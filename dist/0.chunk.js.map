{"version":3,"sources":["webpack:///./src/components/Editor/editor.styl","webpack:///./src/components/RulesEditor/RulesEditor.styl","webpack:///./src/assets/img/boxed-box.png","webpack:///./src/assets/img/champs-box.png","webpack:///./src/assets/img/dead-box.png","webpack:///./src/assets/img/team-box-body.png","webpack:///./src/assets/img/team-box.png","webpack:///./src/assets/img/trash.png","webpack:///./src/assets/pokeball.png","webpack:///./src/components/AddPokemonButton/AddPokemonButton.tsx","webpack:///./src/components/AddPokemonButton/index.ts","webpack:///./src/components/Admin/Admin.tsx","webpack:///./src/components/Admin/index.ts","webpack:///./src/components/BaseEditor/BaseEditor.tsx","webpack:///./src/components/BaseEditor/index.ts","webpack:///./src/components/DataEditor/DataEditor.tsx","webpack:///./src/components/DataEditor/index.ts","webpack:///./src/components/DeletePokemonButton/DeletePokemonButton.tsx","webpack:///./src/components/DeletePokemonButton/index.ts","webpack:///./src/components/Editor/Editor.tsx","webpack:///./src/components/Editor/editor.styl?8fe8","webpack:///./src/components/Editor/index.ts","webpack:///./src/components/GameEditor/GameEditor.tsx","webpack:///./src/components/GameEditor/index.ts","webpack:///./src/components/HotkeysEditor/HotkeysEditor.tsx","webpack:///./src/components/HotkeysEditor/index.ts","webpack:///./src/components/PokemonEditor/Box.tsx","webpack:///./src/components/PokemonEditor/CurrentPokemonEdit.tsx","webpack:///./src/components/PokemonEditor/CurrentPokemonInput.tsx","webpack:///./src/components/PokemonEditor/MassEditor.tsx","webpack:///./src/components/PokemonEditor/PokemonEditor.tsx","webpack:///./src/components/PokemonEditor/index.ts","webpack:///./src/components/PokemonEditor/styles.ts","webpack:///./src/components/RulesEditor/RulesEditor.styl?a67d","webpack:///./src/components/RulesEditor/RulesEditor.tsx","webpack:///./src/components/RulesEditor/index.ts","webpack:///./src/components/StyleEditor/StyleEditor.tsx","webpack:///./src/components/StyleEditor/index.ts","webpack:///./src/components/ThemeEditor/ComponentOptions.ts","webpack:///./src/components/ThemeEditor/ThemeEditor.tsx","webpack:///./src/components/ThemeEditor/index.ts","webpack:///./src/components/ThemeEditor/styles.ts","webpack:///./src/components/TrainerEditor/BadgeInput.tsx","webpack:///./src/components/TrainerEditor/LinkedTrainerInfoEditField.tsx","webpack:///./src/components/TrainerEditor/TrainerEditor.tsx","webpack:///./src/components/TrainerEditor/TrainerInfoEditField.tsx","webpack:///./src/components/TrainerEditor/TrainerInfoEditor.tsx","webpack:///./src/components/TrainerEditor/index.ts","webpack:///./src/components/index.ts","webpack:///./src/models/Pokemon.ts","webpack:///./src/models/Trainer.ts","webpack:///./src/models/index.ts"],"names":[],"mappings":"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AACA,SAAS;AACT;AACA;AACA;AACA,0HAAwC,oUAAkR;AAC1T;AACA,8EAA8C,gDAAgD;AAC9F,kFAAkD,+IAA+I;AACjM,iFAAiD,oCAAoC;AACrF;AACA,4HAA0C,kMAA8F,gDAAU,MAAM;AACxJ,6HAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0CAA0C;AAC/D;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;AC9CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACqB;AACH;AACG;AACG;AACF;AACE;AACH;AACG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yIAAiD,oFAAoF,iDAAiD;AACtL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACpCD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,Y;;;;;;;;;;;;;;;;ACdiB;;;;;;;;;;;;;;;;;;;;;;;ACAjB;AACkB;AAC8B;AACK;AACH;AACtB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA,aAAa;AACb;AACA,gDAAgD,6BAA6B;AAC7E;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,sEAAsC,wDAAwD;AAC9F,wEAAwC,2BAA2B;AACnE,2EAA2C,SAAS,4CAA4C,EAAE;AAClG,4EAA4C,4BAA4B;AACxE,gFAAgD,yBAAyB;AACzE,uFAAuD,2CAA2C,+HAAyD,YAAY;AACvK;AACA,wIAAsD,yNAAqF;AAC3I,2IAAyD,mBAAmB;AAC5E;AACA,mIAAiD,qHAAmE;AACpH;AACA;AACA,4FAA+C,yCAAyC;AACxF;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;AC9CD;;;;;;;;;;;;;;;;;;;ACAA;AACqB;AACA;AACrB;AACA;AACA;AACA;AACA;AACA,uIAAiD,kBAAkB;AACnE,uEAAuC,SAAS,6CAA6C,4BAA4B,2HAAqD,SAAS,kBAAkB,EAAE;AAC3M,4EAA4C,SAAS,gBAAgB,wBAAwB;AAC7F,4EAA4C,SAAS,gBAAgB,EAAE;AACvE;AACA;;;;;;;;;;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACuB;AACD;AACI;AACL;AACL;AAChB;AACA;AACA;AACA,0HAAoC,oBAAoB;AACxD;AACA,KAAK;AACL;AACA,gBAAgB,6BAA6B,gBAAgB;AAC7D;AACA;AACA;AACA;AACA,eAAe,iEAAiE;AAChF;AACA,6FAA6D,mBAAmB,KAAK,OAAO;AAC5F,yEAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,oIAAkD,gCAAgC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDR;AACkH;AACpF;AACA;AACP;AACc;AACnB;AACe;AACP;AACb;AACb;AACA;AAC0D;AACrC;AACrB;AACA,4BAAmC,UAAU;AAC7C,6HAA0C,kMAA4F,gDAAU,MAAM;AACtJ,sHAAmC,gLAA+F;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB,qFAAoD;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA,4EAA4C,6BAA6B;AACzE,+IAAsD,0NAA4K;AAClO,+IAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,+IAAsD,wFAAwF;AAC9I,+IAAsD,iGAAiG;AACvJ,+IAAsD,iIAAiI;AACvL,+IAAsD,8HAA8H;AACpL,+IAAsD,2GAA2G;AACjK,iIAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,+IAAsD,gHAAgH;AACtK,+IAAsD,6GAA6G;AACnK,+IAAsD,yKAAmI;AACzL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgD,mDAAmD;AACnG,4EAA4C,iCAAiC;AAC7E;AACA;AACA;AACA,4EAA4C,+BAA+B;AAC3E,yEAAyC,sCAAsC;AAC/E,6IAAsD,2LAA2L,EAAE,EAAE;AACrP,mJAA0D,mIAAmI;AAC7L,4EAA4C,iHAAgC;AAC5E,4FAA4D,4BAA4B;AACxF,6JAA8D,4BAA4B;AAC1F,iIAA+C;AAC/C;AACA;AACA;AACA;AACA,4CAA4C,2FAA6C;AACzF;AACA,iBAAiB,EAAE;AACnB,+IAAsD,oHAAoH;AAC1K,+IAAsD,sGAAsG;AAC5J,iIAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,+IAAsD,gHAAgH;AACtK,+IAAsD,kJAAkJ;AACxM,+IAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iIAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,+IAAsD,sGAAsG;AAC5J;AACA;AACA,2EAA2C,2JAA2J;AACtM;AACA;AACA,iFAAiD,0CAA0C;AAC3F;AACA,iFAAiD,4CAA4C;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;ACvLD;AACkB;AACyB;AACN;AACb;AACL;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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A;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uBAA8B,uBAAuB,iEAAiC,yHAAqC;AAC3H,kEAAkC,6EAA2B;AAC7D,kEAAkC,2DAA2D;AAC7F;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,wEAAwC,mNAAoF;AAC5H;AACA;AACA,oIAAkD,mCAAmC;AACrF,wEAAwC,8GAA0B;AAClE,4EAA4C,iHAA6B;AACzE,kFAAkD,SAAS,kBAAkB,8EAA4B;AACzG,sFAAsD,SAAS,0CAA0C,sHAAoE;AAC7K,uIAAqD,SAAS,eAAe,gGAA8C;AAC3H,iIAA+C,+HAA+H;AAC9K,4EAA4C,uHAAmC;AAC/E,gFAAgD,qQAAsI;AACtL,qJAA0E,yJAAyJ;AACnO,gFAAgD,0HAAsC;AACtF;AACA;AACA;AACA;AACA;AACA,4FAA4D,yHAAqC;AACjG,kGAAkE,6EAA2B;AAC7F,sJAAoE,yDAAyD;AAC7H,4FAA4D,yHAAqC;AACjG,kGAAkE,6EAA2B;AAC7F,sJAAoE,yDAAyD;AAC7H,mGAAmE,qDAAqD;AACxH,mGAAmE,+CAA+C;AAClH,mGAAmE,8CAA8C;AACjH;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;ACnLD;;;;;;;;;;;;;;;;;;;;;;;;;;ACAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACkB;AACE;AACW;AACT;AAC8B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAA6C;AACpE;AACA;AACA,yKAA2D,yOAAuJ,wVAAsI;AACxV;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA,6FAA6F,mFAAiC;AAC9H,+HAA6C;AAC7C;AACA;AACA,qBAAqB,EAAE,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;;;;;;;;;;;AC7CiB;AACI;AACS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjBA;AAC4B;AACP;AACrB;AACA;AACA,uIAAiD,kBAAkB;AACnE;AACA;AACA;;;;;;;;;;;;;;;;;ACRA;AACA,+BAAsC,qDAAqD,kEAAkC,kCAAkC;AAC/J;AACA,wBAAwB,4CAA4C,oEAAoC,uFAAuF;;;;;;;;;;;;;;;;;;;;;ACH/L;AACqB;AACgB;AACqB;AACjC;AACzB;AACA,oBAAoB,OAAO,mEAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE;AACP;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,4EAA4C,mCAAmC;AAC/E,iLAA6D,0FAA0F;AACvJ,iLAA6D,4EAA4E;AACzI,iLAA6D,0EAA0E;AACvI,iLAA6D,0EAA0E;AACvI,iLAA6D,wEAAwE;AACrI;AACA,iLAA6D,wFAAwF;AACrJ,iLAA6D,+IAA6D;AAC1H;AACA;AACA,sJAAgF,8BAA8B,KAAK;AACnH;AACA;AACA,qFAAqD,yCAAyC,+CAA+C;AAC7I,iLAA6D,wEAAwE;AACrI;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrBgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACXA;AACA","file":"0.chunk.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".editor {\\n  border: 1px solid #eee;\\n  height: 100vh;\\n  overflow-y: scroll;\\n  padding: 0.25rem;\\n  width: 90%;\\n}\\n\\n.editor.pt-dark {\\n  border: 1px solid #000;\\n}\\n\\n.editor:hover {\\n  box-shadow: 0 0 4px #eee;\\n}\\n\\n.pt-select select {\\n  width: 100%;\\n}\\n\\n.game-editor,\\n.trainer-editor,\\n.pokemon-editor,\\n.style-editor,\\n.hotkeys-editor {\\n  padding: 0.3rem;\\n}\\n\\n.base-editor {\\n  border: 1px solid #fafafa;\\n  border-top: 0 solid transparent !important;\\n}\\n\\n.pt-dark .base-editor {\\n  border: 1px solid #111;\\n}\\n\\n.trainer-info-field {\\n  align-items: center;\\n  border-bottom: 1px solid #ddd;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n.trainer-info-field input {\\n  background: inherit;\\n  border: 0 solid transparent;\\n  border-left: 1px solid #eee;\\n  border-radius: 2px;\\n  color: inherit;\\n  padding: 0.25rem;\\n}\\n\\n.pt-dark .trainer-info-field {\\n  border-bottom: 1px solid #394b59;\\n}\\n\\n.pt-dark .trainer-info-field input {\\n  border-left: 1px solid #394b59;\\n}\\n\\n.box-wrapper {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n}\\n\\n.box-wrapper .tab {\\n  margin: 2px;\\n}\\n\\n.pokemon-tab {\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n.current-pokemon {\\n  border: 1px solid #ddd;\\n  border-radius: 0.25rem;\\n  margin: 0.25rem;\\n  padding: 0.25rem;\\n}\\n\\n.pt-dark .current-pokemon {\\n  border: 1px solid #000;\\n}\\n\\n.current-pokemon-header {\\n  align-items: center;\\n  display: flex;\\n  justify-content: flex-start;\\n}\\n\\n.current-pokemon-image {\\n  padding: 0.25rem;\\n  border: 1px solid #ccc;\\n  border-radius: 50%;\\n  height: 3rem;\\n}\\n\\n.pt-dark .current-pokemon-image {\\n  border: none;\\n  background: #394b59;\\n}\\n\\n.current-pokemon-input-wrapper {\\n  display: inline-flex;\\n  flex-direction: column;\\n  padding: 0.25rem;\\n  width: 11rem;\\n}\\n\\n.current-pokemon-input-wrapper label {\\n  font-size: 10px;\\n}\\n\\n.current-pokemon-input-wrapper input {\\n  border: 1px solid #eee;\\n  padding: 0.25rem;\\n}\\n\\n.current-pokemon-checkbox {\\n  display: inline-flex;\\n  flex-flow: row-reverse;\\n  justify-content: flex-end;\\n  width: 5rem;\\n  transform: translateY(1rem);\\n}\\n\\n.pt-dark .current-pokemon-input-wrapper input {\\n  box-shadow: 0 0 0 0 rgba(19,124,189,0), 0 0 0 0 rgba(19,124,189,0), 0 0 0 0 rgba(19,124,189,0), inset 0 0 0 1px rgba(16,22,26,0.3), inset 0 1px 1px rgba(16,22,26,0.4);\\n  background: rgba(16,22,26,0.3);\\n  border: none;\\n  color: #f5f8fa;\\n}\\n\\n.pt-input-ghost {\\n  border: 0 !important;\\n  width: 0 !important;\\n  flex: auto;\\n}\\n\\n.small-input {\\n  width: 5rem;\\n}\\n\\n.current-pokemon-gender {\\n  width: 6rem;\\n}\\n\\n.current-pokemon-status {\\n  width: 5.5rem;\\n}\\n\\n.current-pokemon-moves {\\n  width: 25rem;\\n}\\n\\n.current-pokemon-nature {\\n  width: 6.5rem;\\n}\\n\\n.double-select-wrapper {\\n  display: flex;\\n}\\n\\n.status-wrapper {\\n  display: inline-flex;\\n  flex-flow: column;\\n  padding: 0.25rem;\\n  width: 30%;\\n  vertical-align: top;\\n}\\n\\n.status-wrapper span {\\n  font-size: 10px;\\n  width: 100%;\\n}\\n\\ninput[name='metLevel'] {\\n  color: #ccc;\\n}\\n\\n.pt-dialog.wide-dialog {\\n  width: 90% !important;\\n}\\n\\n.has-nice-scrollbars::-webkit-scrollbar {\\n  width: 5px;\\n  height: 8px;\\n  border-radius: 2px;\\n  background-color: #fff;\\n}\\n\\n.has-nice-scrollbars::-webkit-scrollbar-thumb {\\n  background: #aaa;\\n}\\n\\n.no-pokemon-selected {\\n  display: flex;\\n  align-items: center;\\n  padding: 0.5rem;\\n}\\n\\n.no-pokemon-selected p {\\n  margin: 0.25rem;\\n  padding-left: 0.25rem;\\n}\\n\\n.box {\\n  border-radius: 0.25rem;\\n  padding: 0.25rem;\\n  margin: 0.25rem;\\n  display: flex;\\n  align-items: center;\\n  background-position: center;\\n  flex-wrap: wrap;\\n}\\n\\n.box .pokemon-icon {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 40px;\\n  width: 40px;\\n}\\n\\n.box .pokemon-icon img,\\n.box .pokemon-icon {\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n  transition: 500ms all;\\n}\\n\\n.box .pokemon-icon.selected {\\n  border-radius: 50%;\\n  background: rgba(0,0,0,0.33);\\n  transition: 500ms all;\\n}\\n\\n.pt-dark .box {\\n  box-shadow: 0 0 0.25rem #000;\\n}\\n\\n.Team-box {\\n  background: #15db72;\\n  background-image: url(\" + require(\"../../assets/img/team-box-body.png\") + \");\\n}\\n\\n.Boxed-box {\\n  background: #1184d6;\\n  background-image: url(\" + require(\"../../assets/img/boxed-box.png\") + \");\\n}\\n\\n.Dead-box {\\n  background: #ce1831;\\n  background-image: url(\" + require(\"../../assets/img/dead-box.png\") + \");\\n}\\n\\n.Champs-box {\\n  background: #e5db52;\\n  background-image: url(\" + require(\"../../assets/img/champs-box.png\") + \");\\n}\\n\\n\", \"\"]);\n\n// exports\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".rules-editor-dialog {\\n  padding-bottom: 0 !important;\\n}\\n\\n.rule-no,\\n.rule-delete {\\n  padding: 0.25rem;\\n  text-align: center;\\n  height: 100%;\\n  width: 1.5rem;\\n}\\n\\n.rule-delete {\\n  cursor: pointer;\\n}\\n\\n.rules-list-item {\\n  background: rgba(0,0,0,0.05);\\n  border-radius: 0.25rem;\\n  align-items: center;\\n  display: flex;\\n  justify-content: space-around;\\n  margin: 0.25rem 0;\\n  min-height: 2rem;\\n}\\n\\n\", \"\"]);\n\n// exports\n","module.exports = __webpack_public_path__ + \"assets/boxed-box.cd59f18c0496973abf5e7859142f6887.png\";","module.exports = __webpack_public_path__ + \"assets/champs-box.4b5f8d9323fac44ffeec8c9a5fdc226e.png\";","module.exports = __webpack_public_path__ + \"assets/dead-box.d249339336e54c5916984cf820ba72c2.png\";","module.exports = __webpack_public_path__ + \"assets/team-box-body.1766a13c7001bc8720223980986c4595.png\";","module.exports = __webpack_public_path__ + \"assets/team-box.9b9c52b663641bd69180e2a0778540c8.png\";","module.exports = __webpack_public_path__ + \"assets/trash.e0a3773985ba99fdf8779fc305c3af9f.png\";","module.exports = __webpack_public_path__ + \"assets/pokeball.853392fa4d1cb36496424bd57501bdff.png\";","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { addPokemon, selectPokemon } from 'actions';\nexport const AddPokemonButtonBase = ({ onClick }) => (React.createElement(\"button\", { className: 'pt-intent-success pt-button add-new-pokemon', onClick: e => {\n        e.preventDefault();\n        onClick && onClick();\n    } },\n    React.createElement(\"span\", { className: 'pt-icon-add' }),\n    \" \\u00A0Add New Pokemon\"));\nexport const AddPokemonButton = connect(null, (dispatch, ownProps) => ({\n    onClick: () => {\n        dispatch(addPokemon(ownProps.defaultPokemon));\n        dispatch(selectPokemon(ownProps.defaultPokemon.id));\n    },\n}))(AddPokemonButtonBase);\n","export * from './AddPokemonButton';\n","import * as React from 'react';\nexport class Admin extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return React.createElement(\"div\", null, \"Admin\");\n    }\n}\n","export { Admin } from './Admin';\n","import * as React from 'react';\nconst baseEditorStyle = {\n    cursor: 'pointer',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n};\nexport class BaseEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleEditor = e => {\n            this.setState({ isOpen: !this.state.isOpen });\n        };\n        this.state = {\n            isOpen: true,\n        };\n    }\n    render() {\n        return (React.createElement(\"div\", { className: `${this.props.name.toLowerCase()}-editor base-editor` },\n            React.createElement(\"h4\", { title: `${this.state.isOpen ? 'Collapse' : 'Open'} this editor.`, style: baseEditorStyle, onClick: this.toggleEditor },\n                this.props.name,\n                React.createElement(\"span\", { className: `pt-icon pt-icon-caret-${this.state.isOpen ? 'up' : 'down'}` })),\n            this.state.isOpen ? this.props.children : null));\n    }\n}\n","export * from './BaseEditor';\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, ButtonGroup, Dialog, Callout, TextArea, Intent, Alert } from '@blueprintjs/core';\nimport { PokemonIconBase } from 'components/PokemonIcon';\nimport { ErrorBoundary } from 'components/Shared';\nimport * as uuid from 'uuid/v4';\nimport { persistor } from 'store';\nimport { replaceState } from 'actions';\nconst trash = require('assets/img/trash.png');\nconst hexEncode = function (str) {\n    let hex, i;\n    let result = '';\n    for (i = 0; i < str.length; i++) {\n        hex = str.charCodeAt(i).toString(16);\n        result += ('000' + hex).slice(-4);\n    }\n    return result;\n};\nexport class DataEditorBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.confirmImport = e => {\n            this.props.replaceState(JSON.parse(this.state.data));\n        };\n        this.importState = () => {\n            this.setState({ mode: 'import' });\n            this.setState({ isOpen: true });\n        };\n        this.exportState = state => {\n            this.setState({\n                mode: 'export',\n            });\n            delete state.router;\n            delete state._persist;\n            this.setState({ isOpen: true });\n            this.setState({\n                href: `data:text/plain;charset=utf-8,${encodeURIComponent(JSON.stringify(state))}`,\n            });\n        };\n        this.uploadFile = e => {\n            const file = this.fileInput.files[0];\n            const reader = new FileReader();\n            reader.readAsArrayBuffer(file);\n            reader.addEventListener('load', function () {\n                const u = new Uint8Array(this.result);\n                const a = new Array(u.length);\n                let i = u.length;\n                while (i--) {\n                    a[i] = (u[i] < 16 ? '0' : '') + u[i].toString(16);\n                }\n                console.log(a);\n            });\n        };\n        this.clearAllData = e => {\n            persistor.purge();\n            window.location.reload();\n        };\n        this.toggleClearingData = e => this.setState({ isClearAllDataOpen: !this.state.isClearAllDataOpen });\n        this.state = {\n            isOpen: false,\n            isClearAllDataOpen: false,\n            mode: 'export',\n            data: '',\n            href: '',\n        };\n    }\n    renderTeam(data) {\n        let d;\n        try {\n            d = JSON.parse(data);\n        }\n        catch (_a) {\n            d = { pokemon: false };\n        }\n        console.log(d);\n        if (d.pokemon) {\n            return (React.createElement(\"div\", { className: 'team-icons', style: {\n                    background: 'rgba(0, 0, 0, 0.1)',\n                    borderRadius: '.25rem',\n                    margin: '.25rem',\n                    marginTop: '.5rem',\n                    display: 'flex',\n                    justifyContent: 'center',\n                } }, d.pokemon.filter(p => p.status === 'Team').map(p => {\n                return React.createElement(PokemonIconBase, Object.assign({ key: p.id }, p));\n            })));\n        }\n        else {\n            return null;\n        }\n    }\n    render() {\n        return (React.createElement(\"div\", { style: { padding: '1rem' } },\n            React.createElement(Alert, { onConfirm: this.clearAllData, isOpen: this.state.isClearAllDataOpen, onCancel: this.toggleClearingData, cancelButtonText: 'Nevermind', confirmButtonText: 'Delete Anyway', className: this.props.state.style.editorDarkMode ? 'pt-dark' : 'pt-light', style: { maxWidth: '600px' }, intent: Intent.DANGER },\n                React.createElement(\"div\", { style: { display: 'flex' } },\n                    React.createElement(\"img\", { style: { height: '10rem' }, src: trash, alt: 'Sad Trubbish' }),\n                    React.createElement(\"p\", { style: { fontSize: '1.2rem', padding: '1rem' } }, \"This will permanently delete all your local storage data, with no way to retrieve it. Are you sure you want to do this?\"))),\n            React.createElement(Dialog, { isOpen: this.state.isOpen, onClose: e => this.setState({ isOpen: false }), title: this.state.mode === 'export'\n                    ? 'Exported Nuzlocke Save'\n                    : 'Import Nuzlocke Save', icon: 'floppy-disk' }, this.state.mode === 'export' ? (React.createElement(React.Fragment, null,\n                React.createElement(Callout, null, \"Copy this and paste it somewhere safe!\"),\n                React.createElement(\"div\", { style: { height: '40vh', overflow: 'auto' }, className: 'pt-dialog-body has-nice-scrollbars' },\n                    React.createElement(\"span\", { suppressContentEditableWarning: true, contentEditable: true }, JSON.stringify(this.props.state, null, 2))),\n                React.createElement(\"div\", { className: 'pt-dialog-footer' },\n                    React.createElement(\"a\", { href: this.state.href, download: `nuzlocke_${uuid()}.json` },\n                        React.createElement(Button, { icon: 'download', intent: Intent.PRIMARY }, \"Download\"))))) : (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: 'pt-dialog-body has-nice-scrollbars' },\n                    React.createElement(TextArea, { className: 'custom-css-input pt-fill', onChange: (e) => this.setState({ data: e.target.value }), placeholder: 'Paste nuzlocke.json contents here', value: this.state.data, large: true }),\n                    React.createElement(ErrorBoundary, null, this.renderTeam(this.state.data))),\n                React.createElement(\"div\", { className: 'pt-dialog-footer' },\n                    React.createElement(ButtonGroup, null,\n                        React.createElement(Button, { intent: Intent.PRIMARY, onClick: this.confirmImport, text: 'Upload', icon: 'upload' }),\n                        React.createElement(Button, { icon: 'tick', intent: this.state.data === '' ? Intent.NONE : Intent.SUCCESS, onClick: this.confirmImport, disabled: this.state.data === '' ? true : false, text: 'Confirm' })))))),\n            React.createElement(ButtonGroup, null,\n                React.createElement(Button, { onClick: e => this.importState(), icon: 'import', className: 'pt-intent-primary' }, \"Import Data\"),\n                React.createElement(Button, { onClick: e => this.exportState(this.props.state), icon: 'export' }, \"Export Data\")),\n            React.createElement(\"br\", null),\n            React.createElement(\"br\", null),\n            React.createElement(Button, { icon: 'trash', onClick: this.toggleClearingData, intent: Intent.DANGER, className: 'pt-minimal' }, \"Clear All Data\")));\n    }\n}\nexport const DataEditor = connect((state) => ({ state: state }), {\n    replaceState,\n})(DataEditorBase);\n","export * from './DataEditor';\n","import * as React from 'react';\nimport { Alert, Intent, Icon, Popover, Position, PopoverInteractionKind } from '@blueprintjs/core';\nimport styled from 'react-emotion';\nimport { deletePokemon } from 'actions';\nimport { connect } from 'react-redux';\nimport { accentedE } from 'utils';\nexport const DeletePokemonButtonContainer = styled('div') `\n    color: red;\n    cursor: pointer;\n`;\nexport class DeletePokemonButtonBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dialogOn: false,\n        };\n        this.toggleDialog = this.toggleDialog.bind(this);\n    }\n    toggleDialog() {\n        this.setState({\n            dialogOn: !this.state.dialogOn,\n        });\n    }\n    render() {\n        return (React.createElement(DeletePokemonButtonContainer, null,\n            React.createElement(Alert, { icon: 'trash', isOpen: this.state.dialogOn && this.props.confirmation, onCancel: this.toggleDialog, onConfirm: e => this.props.deletePokemon && this.props.deletePokemon(this.props.id), confirmButtonText: 'Delete Pokemon', cancelButtonText: 'Cancel', intent: Intent.DANGER },\n                React.createElement(\"p\", null, \"This will delete the currently selected Pokemon. Are you sure you want to do that?\"),\n                React.createElement(\"label\", { className: 'pt-control pt-checkbox .modifier' },\n                    React.createElement(\"input\", { onChange: (event) => this.props.modifyDeletionConfirmation && this.props.modifyDeletionConfirmation(!event.target.checked), type: 'checkbox' }),\n                    React.createElement(\"span\", { className: 'pt-control-indicator' }),\n                    \"Don't Ask Me For Confirmation Again\")),\n            React.createElement(Popover, { interactionKind: PopoverInteractionKind.HOVER, position: Position.TOP, content: `Delete Pok${accentedE}mon` },\n                React.createElement(Icon, { role: 'button', onClick: e => {\n                        if (this.props.confirmation) {\n                            this.toggleDialog();\n                        }\n                        else {\n                            this.props.deletePokemon && this.props.deletePokemon(this.props.id);\n                        }\n                    }, icon: 'trash', title: 'Delete Pokemon' }))));\n    }\n}\nexport const DeletePokemonButton = connect((state) => ({\n    confirmation: state.confirmation,\n}), {\n    deletePokemon\n})(DeletePokemonButtonBase);\n","export * from './DeletePokemonButton';\n","import * as React from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { connect } from 'react-redux';\nimport { GameEditor } from 'components/GameEditor';\nimport { PokemonEditor } from 'components/PokemonEditor';\nimport { StyleEditor } from 'components/StyleEditor';\nimport { TrainerEditor } from 'components/TrainerEditor/TrainerEditor';\nimport { DataEditor } from 'components/DataEditor';\nimport { HotkeysEditor } from 'components/HotkeysEditor';\nimport './editor.styl';\nexport class EditorBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const minimized = this.props.editor.minimized;\n        return (React.createElement(Scrollbars, { autoHide: true, autoHideTimeout: 1000, autoHideDuration: 200, className: `editor ${this.props.style.editorDarkMode ? 'pt-dark' : ''}`, style: {\n                width: minimized ? '0%' : '33%',\n                marginLeft: minimized ? '-30rem' : '0',\n                minWidth: '30rem',\n                maxWidth: '40rem',\n                height: '100vh',\n                padding: '.25rem',\n                background: this.props.style.editorDarkMode ? '#222' : '#fff',\n            } },\n            React.createElement(GameEditor, null),\n            React.createElement(TrainerEditor, null),\n            React.createElement(PokemonEditor, null),\n            React.createElement(StyleEditor, null),\n            React.createElement(HotkeysEditor, null),\n            React.createElement(DataEditor, null)));\n    }\n}\nexport const Editor = connect((state) => ({\n    editor: state.editor,\n    style: state.style,\n}), null)(EditorBase);\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/resolve-url-loader/index.js!../../../node_modules/stylus-loader/index.js!./editor.styl\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/resolve-url-loader/index.js!../../../node_modules/stylus-loader/index.js!./editor.styl\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/resolve-url-loader/index.js!../../../node_modules/stylus-loader/index.js!./editor.styl\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}","export { Editor } from './Editor';\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { editGame, changeEditorSize, editStyle } from 'actions';\nimport { gameOfOriginToColor, listOfGames, FEATURES } from 'utils';\nimport { Button, Intent, Popover, Position, Menu } from '@blueprintjs/core';\nimport { RulesEditorDialog } from 'components/RulesEditor';\nconst gameSubEditorStyle = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingBottom: '.25rem',\n};\nexport class GameEditorBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onInput = e => {\n            this.props.editGame({ name: e.target.value });\n            this.props.editStyle({\n                bgColor: gameOfOriginToColor(e.target.value),\n            });\n        };\n        this.toggleDialog = _ => this.setState({ isOpen: !this.state.isOpen });\n        this.state = {\n            isOpen: false,\n        };\n    }\n    render() {\n        const { game } = this.props;\n        const RED = RulesEditorDialog;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(RED, { isOpen: this.state.isOpen, onClose: this.toggleDialog }),\n            React.createElement(\"div\", { className: 'game-editor' },\n                React.createElement(\"h4\", { style: { display: 'flex', alignContent: 'flex-end' } }, \"Game\"),\n                React.createElement(\"div\", { style: gameSubEditorStyle },\n                    React.createElement(\"div\", { className: 'pt-select' },\n                        React.createElement(\"select\", { onChange: this.onInput, value: game.name }, listOfGames.map(game => React.createElement(\"option\", { key: game }, game)))),\n                    FEATURES.multipleNuzlockes ?\n                        React.createElement(Popover, { minimal: true, content: React.createElement(Menu, null), position: Position.BOTTOM },\n                            React.createElement(Button, { icon: 'exchange' }, \"Switch Nuzlockes\"))\n                        : null,\n                    React.createElement(Button, { onClick: this.toggleDialog, icon: 'list', intent: Intent.PRIMARY }, \"Modify Rules\")))));\n    }\n}\nexport const GameEditor = connect((state) => ({ game: state.game, editor: state.editor }), {\n    editGame,\n    editStyle,\n    changeEditorSize,\n})(GameEditorBase);\n","export * from './GameEditor';\n","import * as React from 'react';\nimport { BaseEditor } from 'components/BaseEditor';\nimport { hotkeyList } from 'utils';\nexport class HotkeysEditor extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (React.createElement(BaseEditor, { name: 'Hotkeys' },\n            React.createElement(\"ul\", { style: { listStyleType: 'none', paddingLeft: '1rem' }, className: 'hotkey-list' }, hotkeyList.map(item => (React.createElement(\"li\", { style: { display: 'flex' } },\n                React.createElement(\"kbd\", { style: { margin: '4px' }, className: 'pt-code' }, item.key),\n                React.createElement(\"div\", { style: { margin: '4px' } }, item.comment)))))));\n    }\n}\n","export * from './HotkeysEditor';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport * as React from 'react';\nimport { dragAndDrop, } from 'utils';\nimport { editPokemon } from 'actions';\nimport { PokemonByFilter } from 'components/Shared';\nimport { DropTarget } from 'react-dnd';\nimport { store } from 'store';\nconst boxSource = {\n    drop(props, monitor, component) {\n        const newStatus = props.name;\n        store.dispatch(editPokemon({ status: newStatus }, monitor.getItem().id));\n        return {};\n    },\n    hover(props, monitor) {\n        return { isHovering: monitor.isOver({ shallow: true }) };\n    }\n};\nlet Box = class Box extends React.Component {\n    render() {\n        const { pokemon, name, boxId, filterString, connectDropTarget, canDrop } = this.props;\n        const filter = filterString === 'All' ? undefined : filterString;\n        return connectDropTarget(React.createElement(\"div\", { className: `box ${name}-box` },\n            React.createElement(\"span\", { style: {\n                    alignItems: 'center',\n                    background: canDrop ? 'black' : 'rgba(33, 33, 33, 0.33)',\n                    borderRadius: '.25rem',\n                    color: '#eee',\n                    display: 'inline-flex',\n                    minHeight: '2rem',\n                    justifyContent: 'center',\n                    margin: '.25rem',\n                    padding: '.25rem',\n                    textAlign: 'center',\n                    width: '4rem',\n                } }, name),\n            React.createElement(PokemonByFilter, { team: pokemon, filter: filter })));\n    }\n};\nBox = __decorate([\n    DropTarget(dragAndDrop.ICON, boxSource, (connect, monitor) => ({\n        connectDropTarget: connect.dropTarget(),\n        canDrop: monitor.canDrop()\n    }))\n], Box);\nexport { Box };\n","import * as React from 'react';\nimport { getAdditionalFormes, listOfPokemon, matchSpeciesToTypes, listOfItems, listOfLocations, listOfAbilities, } from 'utils';\nimport { CurrentPokemonInput } from 'components/PokemonEditor';\nimport { DeletePokemonButton } from 'components/DeletePokemonButton';\nimport { Autocomplete } from 'components/Shared';\nimport { selectPokemon, editPokemon } from 'actions';\nimport { connect } from 'react-redux';\nimport { listOfGames, accentedE } from 'utils';\nimport { PokemonIconBase } from 'components/PokemonIcon';\nimport { cx } from 'emotion';\nimport * as Styles from './styles';\nimport * as uuid from 'uuid/v4';\nimport { Icon, Popover, Position, PopoverInteractionKind } from '@blueprintjs/core';\nimport { addPokemon } from 'actions';\nconst pokeball = require('assets/pokeball.png');\nexport const CopyPokemonButton = ({ onClick }) => {\n    return (React.createElement(Popover, { interactionKind: PopoverInteractionKind.HOVER, position: Position.TOP, content: `Copy Pok${accentedE}mon` },\n        React.createElement(Icon, { title: 'Copy Pokemon', icon: 'duplicate', className: cx(Styles.copyButton), onClick: onClick })));\n};\nexport class CurrentPokemonEditBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.copyPokemon = e => {\n            const currentPokemon = this.getCurrentPokemon();\n            if (currentPokemon) {\n                const newPokemon = Object.assign({}, currentPokemon, { id: uuid(), position: currentPokemon.position + 1 });\n                this.props.addPokemon(newPokemon);\n            }\n        };\n        this.expandView = (e) => {\n            this.setState({\n                expandedView: !this.state.expandedView,\n            });\n        };\n        this.state = {\n            selectedId: '5',\n            box: [],\n            expandedView: false,\n        };\n    }\n    componentWillMount() {\n        this.setState({\n            selectedId: this.props.selectedId,\n            box: this.props.box\n        });\n    }\n    componentWillReceiveProps(nextProps, prevProps) {\n        if (nextProps.selectedId !== prevProps.selectedId) {\n            this.setState({ selectedId: nextProps.selectedId });\n        }\n    }\n    moreInputs(currentPokemon) {\n        return (React.createElement(\"div\", { className: 'expanded-edit' },\n            React.createElement(CurrentPokemonInput, { labelName: 'Forme', inputName: 'forme', placeholder: '', value: currentPokemon.forme, type: 'select', options: ['Normal', ...getAdditionalFormes(currentPokemon.species)] }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Types', inputName: 'types', value: currentPokemon.types, type: 'double-select', options: [\n                    'Bug',\n                    'Dark',\n                    'Dragon',\n                    'Electric',\n                    'Fairy',\n                    'Fighting',\n                    'Fire',\n                    'Flying',\n                    'Ghost',\n                    'Grass',\n                    'Ground',\n                    'Ice',\n                    'Normal',\n                    'Poison',\n                    'Psychic',\n                    'Rock',\n                    'Steel',\n                    'Water',\n                    'None',\n                ] }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Shiny', inputName: 'shiny', value: currentPokemon.shiny, type: 'checkbox' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Champion', inputName: 'champion', value: currentPokemon.champion, type: 'checkbox' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Custom Image', inputName: 'customImage', placeholder: 'http://..', value: currentPokemon.customImage, type: 'text' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Custom Icon', inputName: 'customIcon', placeholder: 'http://..', value: currentPokemon.customIcon, type: 'text' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Cause of Death', inputName: 'causeOfDeath', value: currentPokemon.causeOfDeath, type: 'text' }),\n            React.createElement(Autocomplete, { items: listOfItems, name: 'item', label: 'Item', placeholder: 'Item', value: currentPokemon.item || '', onChange: e => {\n                    const edit = {\n                        item: e.target.value,\n                    };\n                    this.props.editPokemon(edit, this.state.selectedId);\n                    this.props.selectPokemon(this.state.selectedId);\n                } }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Wonder Traded', inputName: 'wonderTradedFor', value: currentPokemon.wonderTradedFor, type: 'text' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Position', inputName: 'position', disabled: true, value: currentPokemon.position, type: 'text' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Game of Origin', inputName: 'gameOfOrigin', value: currentPokemon.gameOfOrigin, type: 'select', options: listOfGames })));\n    }\n    getCurrentPokemon() {\n        return this.props.pokemon.find((v) => v.id === this.state.selectedId);\n    }\n    render() {\n        const currentPokemon = this.getCurrentPokemon();\n        if (currentPokemon == null) {\n            return (React.createElement(\"div\", { className: 'current-pokemon no-pokemon-selected' },\n                React.createElement(\"img\", { alt: 'pokeball', src: pokeball }),\n                \" \",\n                React.createElement(\"p\", null, \"Select a Pok\\u00E9mon to edit\")));\n        }\n        return (React.createElement(\"div\", { className: 'current-pokemon' },\n            React.createElement(\"span\", { className: 'current-pokemon-header' },\n                React.createElement(PokemonIconBase, { className: 'current-pokemon-image', id: currentPokemon.id, species: currentPokemon.species, forme: currentPokemon.forme, isShiny: currentPokemon.shiny, selectedId: null, onClick: () => { } }),\n                React.createElement(CurrentPokemonInput, { labelName: 'Status', inputName: 'status', value: currentPokemon.status, type: 'select', options: this.state.box.map(n => n.name) }),\n                React.createElement(\"div\", { className: cx(Styles.iconBar) },\n                    React.createElement(CopyPokemonButton, { onClick: this.copyPokemon }),\n                    React.createElement(DeletePokemonButton, { id: this.state.selectedId }))),\n            React.createElement(Autocomplete, { items: listOfPokemon, name: 'species', label: 'Species', placeholder: 'Missing No.', value: currentPokemon.species, onChange: e => {\n                    const edit = {\n                        species: e.target.value,\n                    };\n                    this.props.editPokemon(edit, this.state.selectedId);\n                    this.props.editPokemon({ types: matchSpeciesToTypes(e.target.value) }, this.state.selectedId);\n                    this.props.selectPokemon(this.state.selectedId);\n                } }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Nickname', inputName: 'nickname', value: currentPokemon.nickname, placeholder: 'Fluffy', type: 'text' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Level', inputName: 'level', placeholder: '5', value: currentPokemon.level, type: 'text' }),\n            React.createElement(Autocomplete, { items: listOfLocations, name: 'met', label: 'Met Location', placeholder: 'Pallet Town', value: currentPokemon.met || '', onChange: e => {\n                    const edit = {\n                        met: e.target.value,\n                    };\n                    this.props.editPokemon(edit, this.state.selectedId);\n                    this.props.selectPokemon(this.state.selectedId);\n                } }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Met Level', inputName: 'metLevel', placeholder: '5', value: currentPokemon.metLevel, type: 'text' }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Gender', inputName: 'gender', placeholder: '', value: currentPokemon.gender, type: 'select', options: ['Male', 'Female', 'Neutral'] }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Nature', inputName: 'nature', placeholder: 'Sassy', value: currentPokemon.nature, type: 'select', options: [\n                    'Adamant',\n                    'Bashful',\n                    'Bold',\n                    'Brave',\n                    'Calm',\n                    'Careful',\n                    'Docile',\n                    'Gentle',\n                    'Hardy',\n                    'Hasty',\n                    'Impish',\n                    'Jolly',\n                    'Lax',\n                    'Lonely',\n                    'Mild',\n                    'Modest',\n                    'Naive',\n                    'Naughty',\n                    'Quiet',\n                    'Quirky',\n                    'Rash',\n                    'Relaxed',\n                    'Sassy',\n                    'Serious',\n                    'Timid',\n                    'None',\n                ] }),\n            React.createElement(Autocomplete, { items: listOfAbilities, name: 'ability', label: 'Ability', placeholder: '', value: currentPokemon.ability || '', onChange: e => {\n                    const edit = {\n                        ability: e.target.value,\n                    };\n                    this.props.editPokemon(edit, this.state.selectedId);\n                    this.props.selectPokemon(this.state.selectedId);\n                } }),\n            React.createElement(CurrentPokemonInput, { labelName: 'Moves', inputName: 'moves', placeholder: '', value: currentPokemon.moves, type: 'moves' }),\n            this.state.expandedView ? this.moreInputs(currentPokemon) : null,\n            React.createElement(\"br\", null),\n            React.createElement(\"button\", { onClick: this.expandView, \"data-expandedview\": this.state.expandedView.toString(), className: 'pt-button pt-intent-primary pt-fill current-pokemon-more' },\n                this.state.expandedView ? (React.createElement(\"span\", null,\n                    \"Less \",\n                    React.createElement(\"span\", { className: 'pt-icon-symbol-triangle-up' }))) : (React.createElement(\"span\", null,\n                    \"More \",\n                    React.createElement(\"span\", { className: 'pt-icon-symbol-triangle-down' }))),\n                ' ')));\n    }\n}\nexport const CurrentPokemonEdit = connect((state) => ({\n    box: state.box,\n    selectedId: state.selectedId,\n    pokemon: state.pokemon\n}), {\n    selectPokemon,\n    editPokemon,\n    addPokemon,\n})(CurrentPokemonEditBase);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { matchSpeciesToTypes, getMoveType } from 'utils';\nimport { editPokemon, selectPokemon } from 'actions';\nimport { ErrorBoundary } from 'components/Shared';\nimport { TagInput } from '@blueprintjs/core';\nexport class CurrentPokemonInputBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = (e, inputName, position, value) => {\n            let edit;\n            if (inputName === 'types' && position != null) {\n                edit = {\n                    [inputName]: value,\n                };\n                edit[inputName][position] = e.target.value;\n            }\n            else if (inputName === 'species') {\n                edit = {\n                    [inputName]: e.target.value,\n                    types: matchSpeciesToTypes(e.target.value),\n                };\n            }\n            else if (inputName === 'moves') {\n                edit = {\n                    [inputName]: e.target.value,\n                };\n            }\n            else if (inputName === 'champion' || inputName === 'shiny') {\n                edit = {\n                    [inputName]: e.target.checked,\n                };\n            }\n            else {\n                edit = {\n                    [inputName]: e.target.value,\n                };\n            }\n            this.props.editPokemon && this.props.editPokemon(edit, this.props.selectedId);\n            this.props.selectPokemon && this.props.selectPokemon(this.props.selectedId);\n        };\n    }\n    getInput({ labelName, disabled, inputName, type, value, placeholder, options }) {\n        value = value == null ? '' : value;\n        if (type === 'moves') {\n            return (React.createElement(ErrorBoundary, null,\n                React.createElement(TagInput, { tagProps: (v, i) => ({\n                        className: `${getMoveType((v || '').toString().trim())}-type`,\n                    }), onChange: values => {\n                        console.log(values);\n                        const edit = {\n                            moves: values,\n                        };\n                        this.props.editPokemon &&\n                            this.props.editPokemon(edit, this.props.selectedId);\n                        this.props.selectPokemon &&\n                            this.props.selectPokemon(this.props.selectedId);\n                    }, values: value || [] })));\n        }\n        if (type === 'text') {\n            return (React.createElement(\"input\", { onChange: event => this.onChange(event, inputName), type: type, name: inputName, value: value, placeholder: placeholder, disabled: disabled || false }));\n        }\n        if (type === 'select') {\n            return (React.createElement(\"div\", { className: 'pt-select' },\n                React.createElement(\"select\", { onChange: event => this.onChange(event, inputName), value: value, name: inputName }, options\n                    ? options.map((item, index) => React.createElement(\"option\", { key: index }, item))\n                    : null)));\n        }\n        if (type === 'checkbox') {\n            return (React.createElement(\"label\", { className: 'pt-control pt-checkbox' },\n                React.createElement(\"input\", { onChange: e => this.onChange(e, inputName), checked: value, type: type, name: inputName }),\n                React.createElement(\"span\", { className: 'pt-control-indicator' })));\n        }\n        if (type === 'double-select') {\n            return (React.createElement(\"span\", { className: 'double-select-wrapper' },\n                React.createElement(\"div\", { className: 'pt-select' },\n                    React.createElement(\"select\", { onChange: e => this.onChange(e, inputName, 0, value), value: value[0] == null ? 'None' : value[0], name: inputName }, options\n                        ? options.map((item, index) => (React.createElement(\"option\", { value: item, key: index }, item)))\n                        : null)),\n                React.createElement(\"span\", null, \"\\u00A0\"),\n                React.createElement(\"div\", { className: 'pt-select' },\n                    React.createElement(\"select\", { onChange: e => this.onChange(e, inputName, 1, value), value: value[1] == null ? 'None' : value[1], name: inputName }, options\n                        ? options.map((item, index) => (React.createElement(\"option\", { value: item, key: index }, item)))\n                        : null))));\n        }\n        return React.createElement(\"div\", null, \"No input type provided.\");\n    }\n    render() {\n        const { labelName, inputName, type, value, placeholder, options } = this.props;\n        return (React.createElement(\"span\", { className: `current-pokemon-input-wrapper current-pokemon-${type} current-pokemon-${inputName}` },\n            React.createElement(\"label\", null, labelName),\n            this.getInput({ labelName, inputName, type, value, placeholder, options })));\n    }\n}\nexport const CurrentPokemonInput = connect((state) => ({\n    selectedId: state.selectedId,\n}), { editPokemon, selectPokemon })(CurrentPokemonInputBase);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, Menu, MenuItem } from '@blueprintjs/core';\nimport { Table, Column, EditableCell } from '@blueprintjs/table';\nimport { AddPokemonButton } from 'components/AddPokemonButton';\nimport { editPokemon } from 'actions';\nimport { PokemonKeys } from 'models';\nimport { generateEmptyPokemon, sortPokes } from 'utils';\nexport class SortableColumnMenu extends React.PureComponent {\n    render() {\n        return (React.createElement(Menu, null,\n            React.createElement(MenuItem, { icon: 'sort-asc', onClick: _ => null, text: 'Sort Asc' }),\n            React.createElement(MenuItem, { icon: 'sort-desc', onClick: _ => null, text: 'Sort Desc' })));\n    }\n}\nexport class MassEditorBase extends React.Component {\n    renderMenu() {\n        return (React.createElement(Menu, null,\n            React.createElement(MenuItem, { icon: 'sort-asc', onClick: _ => null, text: 'Sort Asc' }),\n            React.createElement(MenuItem, { icon: 'sort-desc', onClick: _ => null, text: 'Sort Desc' })));\n    }\n    renderColumns(pokemon) {\n        return Object.keys(PokemonKeys)\n            .filter(k => k !== 'id')\n            .map(key => {\n            return (React.createElement(Column, { key: key, name: key, cellRenderer: r => (React.createElement(EditableCell, { onConfirm: (v, _, c) => {\n                        let value = v;\n                        if (key === 'types') {\n                            value = v.split(',').map(s => s.trim());\n                        }\n                        if (key === 'moves') {\n                            value = v.split(',').map(s => s.trim());\n                        }\n                        this.props.editPokemon({\n                            [key]: value,\n                        }, pokemon[r].id);\n                    }, value: pokemon[r][key] })) }));\n        });\n    }\n    render() {\n        return (React.createElement(Dialog, { icon: 'edit', isOpen: this.props.isOpen, onClose: this.props.toggleDialog, className: `wide-dialog ${this.props.style.editorDarkMode ? 'pt-dark' : 'pt-light'}`, title: 'Mass Editor' },\n            React.createElement(\"div\", { className: 'pt-dialog-body' },\n                React.createElement(AddPokemonButton, { defaultPokemon: generateEmptyPokemon(this.props.pokemon) }),\n                React.createElement(\"div\", { style: { padding: '.25rem' } }),\n                React.createElement(Table, { defaultColumnWidth: 100, numRows: this.props.pokemon.length, numFrozenColumns: 1 }, this.renderColumns(this.props.pokemon.sort(sortPokes))))));\n    }\n}\nexport const MassEditor = connect((state) => ({\n    pokemon: state.pokemon,\n    style: state.style\n}), { editPokemon })(MassEditorBase);\n","import { Button } from '@blueprintjs/core';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { generateEmptyPokemon, } from 'utils';\nimport { CurrentPokemonEdit, MassEditor } from '.';\nimport { AddPokemonButton } from 'components/AddPokemonButton';\nimport { BaseEditor } from 'components/BaseEditor';\nimport { Box } from './Box';\nrequire('../../assets/img/team-box.png');\nrequire('../../assets/img/dead-box.png');\nexport class PokemonEditorBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.openMassEditor = e => {\n            this.setState({\n                isMassEditorOpen: true,\n            });\n        };\n        this.toggleEditor = e => this.setState({ isOpen: !this.state.isOpen });\n        this.state = {\n            isMassEditorOpen: false,\n            isOpen: true,\n        };\n    }\n    componentDidMount() { }\n    renderBoxes(boxes, team) {\n        return boxes.map(({ key, name }) => {\n            return React.createElement(Box, { key: key, pokemon: team, name: name, boxId: key, filterString: name });\n        });\n    }\n    render() {\n        const { team, boxes } = this.props;\n        const { isOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BaseEditor, { name: 'Pokemon' },\n                React.createElement(\"div\", { className: 'button-row', style: { display: 'flex' } },\n                    React.createElement(AddPokemonButton, { defaultPokemon: Object.assign({}, generateEmptyPokemon(team), { gameOfOrigin: this.props.game.name || 'None' }) }),\n                    React.createElement(Button, { icon: 'heat-grid', onClick: this.openMassEditor, style: { marginLeft: 'auto' }, className: 'pt-intent-primary pt-minimal' }, \"Open Mass Editor\")),\n                React.createElement(\"br\", null),\n                this.renderBoxes(boxes, team),\n                React.createElement(\"br\", null),\n                React.createElement(CurrentPokemonEdit, null)),\n            React.createElement(MassEditor, { isOpen: this.state.isMassEditorOpen, toggleDialog: e => this.setState({ isMassEditorOpen: !this.state.isMassEditorOpen }) })));\n    }\n}\nexport const PokemonEditor = connect((state) => ({\n    team: state.pokemon,\n    boxes: state.box,\n    game: state.game,\n}), null)(PokemonEditorBase);\n","export * from './PokemonEditor';\nexport * from './MassEditor';\nexport * from './CurrentPokemonEdit';\nexport * from './CurrentPokemonInput';\n","import { css } from 'emotion';\nexport const iconBar = css `\n    align-items: center;\n    display: flex;\n    margin-left: auto;\n    * {\n        margin: .25rem;\n    }\n`;\nexport const copyButton = css `\n    color: lightblue;\n    margin-left: auto;\n    pointer: cursor;\n`;\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/resolve-url-loader/index.js!../../../node_modules/stylus-loader/index.js!./RulesEditor.styl\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/resolve-url-loader/index.js!../../../node_modules/stylus-loader/index.js!./RulesEditor.styl\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/resolve-url-loader/index.js!../../../node_modules/stylus-loader/index.js!./RulesEditor.styl\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\nimport { Button, Dialog, Intent, TextArea, Icon } from '@blueprintjs/core';\nimport { connect } from 'react-redux';\nimport { editRule, addRule, deleteRule, resetRules } from 'actions';\nimport './RulesEditor.styl';\nexport class RulesEditor extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    renderRules() {\n        return this.props.rules.map((rule, index) => (React.createElement(\"li\", { className: 'rules-list-item', key: index },\n            React.createElement(\"div\", { className: 'rule-no' }, index + 1),\n            React.createElement(TextArea, { defaultValue: rule, className: 'pt-fill', onChange: (e) => this.props.editRule(index, e.target.value), dir: 'auto' }),\n            React.createElement(\"div\", { role: 'action', onClick: e => this.props.deleteRule(index), className: 'rule-delete', title: 'Delete Rule' },\n                React.createElement(Icon, { intent: Intent.DANGER, role: 'action', style: { cursor: 'pointer' }, icon: 'trash' })))));\n    }\n    renderButtons() {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Button, { onClick: _ => this.props.addRule(), intent: Intent.PRIMARY }, \"Add Rule\"),\n            React.createElement(Button, { style: { marginLeft: '1rem' }, onClick: _ => {\n                    this.props.resetRules();\n                    this.forceUpdate();\n                }, intent: Intent.WARNING }, \"Reset Rules\")));\n    }\n    render() {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"ul\", { style: {\n                    listStyleType: 'none',\n                    margin: '.5rem',\n                    padding: '0'\n                } }, this.renderRules()),\n            this.renderButtons()));\n    }\n}\nexport const RulesEditorDialogBase = (props) => {\n    return (React.createElement(Dialog, { isOpen: props.isOpen, onClose: props.onClose, className: `rules-editor-dialog ${props.style.editorDarkMode ? 'pt-dark' : 'pt-light'}`, title: 'Rules Editor', icon: 'edit' },\n        React.createElement(\"div\", { className: 'pt-dialog-body' },\n            React.createElement(RulesEditor, { rules: props.rules, editRule: props.editRule, addRule: props.addRule, deleteRule: props.deleteRule, resetRules: props.resetRules }))));\n};\nexport const RulesEditorDialog = connect((state) => ({\n    rules: state.rules,\n    style: state.style\n}), { editRule, addRule, deleteRule, resetRules })(RulesEditorDialogBase);\n","export * from './RulesEditor';\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { editStyle } from 'actions';\nimport { gameOfOriginToColor, listOfThemes, FEATURES } from 'utils';\nimport { RadioGroup, Radio, TextArea, Checkbox, Button, Intent, Dialog, Classes, } from '@blueprintjs/core';\nimport { BaseEditor } from 'components/BaseEditor';\nimport { ColorEdit } from 'components/Shared';\nimport { cx } from 'emotion';\nimport * as Styles from './styles';\nimport { ThemeEditor } from 'components/ThemeEditor';\nconst editEvent = (e, props, name, game) => {\n    const propName = name || e.target.name;\n    props.editStyle({ [propName]: e.target.value });\n    if (propName === 'template' && e.target.value === 'Default Light') {\n        props.editStyle({ bgColor: '#eeeeee' });\n        props.editStyle({ topHeaderColor: '#dedede' });\n    }\n    if (propName === 'template' && e.target.value === 'Default Dark') {\n        props.editStyle({ bgColor: '#383840' });\n        props.editStyle({ topHeaderColor: '#333333' });\n    }\n    if (propName === 'template' && e.target.value === 'Cards') {\n        props.editStyle({ imageStyle: 'square' });\n    }\n    if (propName === 'template' && e.target.value === 'Generations') {\n        props.editStyle({\n            bgColor: gameOfOriginToColor(game),\n        });\n        props.editStyle({\n            resultHeight: 870\n        });\n        props.editStyle({\n            resultWidth: 1460\n        });\n    }\n};\nexport const IconsNextToTeamPokemon = (props) => (React.createElement(\"div\", { className: 'style-edit' },\n    React.createElement(Checkbox, { checked: props.style.iconsNextToTeamPokemon, name: 'iconsNextToTeamPokemon', label: 'Icons Next to Team Pokemon', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'iconsNextToTeamPokemon') })));\nexport class StyleEditorBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { isThemeEditorOpen: false };\n        this.toggleThemeEditor = e => this.setState({ isThemeEditorOpen: !this.state.isThemeEditorOpen });\n    }\n    render() {\n        const props = this.props;\n        const styleEdit = cx(Styles.styleEdit, { [Styles.styleEdit_dark]: props.style.editorDarkMode });\n        return (React.createElement(BaseEditor, { name: 'Style' },\n            React.createElement(Dialog, { isOpen: this.state.isThemeEditorOpen, onClose: this.toggleThemeEditor, title: 'Theme Editor', icon: 'style', className: cx(Styles.dialog, { [Classes.DARK]: props.style.editorDarkMode }) },\n                React.createElement(ThemeEditor, null)),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(\"label\", { className: 'pt-label pt-inline' }, \"Template\"),\n                React.createElement(\"div\", { className: 'pt-select' },\n                    React.createElement(\"select\", { name: 'template', onChange: e => editEvent(e, props, null, props.game.name), value: props.style.template }, listOfThemes.map(o => React.createElement(\"option\", { key: o }, o)))),\n                FEATURES.themeEditing ?\n                    React.createElement(Button, { onClick: this.toggleThemeEditor, style: { marginLeft: '.25rem' }, intent: Intent.PRIMARY, className: 'pt-minimal' }, \"Edit Theme\")\n                    : null),\n            props.style.template === 'Hexagons' ?\n                React.createElement(\"div\", { className: styleEdit },\n                    React.createElement(\"h6\", null, \"Hexagons Template Options\"))\n                : null,\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(RadioGroup, { className: cx(Styles.radioGroup), label: 'Image Style', onChange: e => editEvent(e, props, 'imageStyle'), selectedValue: props.style.imageStyle },\n                    React.createElement(Radio, { label: 'Round', value: 'round' }),\n                    React.createElement(Radio, { label: 'Square', value: 'square' }))),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(RadioGroup, { className: cx(Styles.radioGroup), label: 'Item Style', onChange: e => editEvent(e, props, 'itemStyle'), selectedValue: props.style.itemStyle },\n                    React.createElement(Radio, { label: 'Round', value: 'round' }),\n                    React.createElement(Radio, { label: 'Square', value: 'square' }))),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(\"label\", { className: 'pt-label pt-inline' }, \"Result Dimensions\"),\n                React.createElement(\"input\", { name: 'resultWidth', className: 'pt-input small-input', onChange: e => editEvent(e, props), value: props.style.resultWidth, type: 'number', min: '0', step: '10' }),\n                React.createElement(\"span\", { style: { marginRight: '0' }, className: 'pt-icon pt-icon-cross' }),\n                React.createElement(\"input\", { name: 'resultHeight', className: 'pt-input small-input', onChange: e => editEvent(e, props), value: props.style.resultHeight, type: 'number', min: '0', step: '10' })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(\"label\", { className: 'pt-label pt-inline' }, \"Background color\"),\n                React.createElement(ColorEdit, { onChange: e => editEvent(e, props), name: 'bgColor', value: props.style.bgColor })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(\"label\", { className: 'pt-label pt-inline' }, \"Header color\"),\n                React.createElement(ColorEdit, { name: 'topHeaderColor', onChange: e => editEvent(e, props), value: props.style.topHeaderColor })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(\"label\", { className: 'pt-label pt-inline' }, \"Background Image\"),\n                React.createElement(\"input\", { value: props.style.backgroundImage, name: 'backgroundImage', onChange: e => editEvent(e, props), className: 'pt-input' }),\n                React.createElement(\"span\", null, ' '),\n                React.createElement(Checkbox, { style: {\n                        marginBottom: '0',\n                        marginLeft: '10px',\n                    }, checked: props.style.tileBackground, name: 'tileBackground', label: 'Tile', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'tileBackground') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(RadioGroup, { className: cx(Styles.radioGroup), label: 'Moves Position', onChange: e => editEvent(e, props, 'movesPosition'), selectedValue: props.style.movesPosition },\n                    React.createElement(Radio, { label: 'Horizontal', value: 'horizontal' }),\n                    React.createElement(Radio, { label: 'Vertical', value: 'vertical' }))),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(RadioGroup, { className: cx(Styles.radioGroup), label: 'Team Images', onChange: e => editEvent(e, props, 'teamImages'), selectedValue: props.style.teamImages },\n                    React.createElement(Radio, { label: 'Standard', value: 'standard' }),\n                    React.createElement(Radio, { label: 'Sugimori', value: 'sugimori' }))),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.teamPokemonBorder, name: 'teamPokemonBorder', label: 'Team Pokemon Gradient Backgrounds', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'teamPokemonBorder') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.showPokemonMoves, name: 'showPokemonMoves', label: 'Show Pokemon Moves', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'showPokemonMoves') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.minimalTeamLayout, name: 'minimalTeamLayout', label: 'Minimal Team Layout', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'minimalTeamLayout') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.displayBadges, name: 'displayBadges', label: 'Display Badges', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'displayBadges') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.displayRules, name: 'displayRules', label: 'Display Nuzlocke Rules', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'displayRules') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.oldMetLocationFormat, name: 'oldMetLocationFormat', label: 'Old Met Location Format', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'oldMetLocationFormat') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.grayScaleDeadPokemon, name: 'grayScaleDeadPokemon', label: 'Gray Scale Filter Dead Pokemon Images', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'grayScaleDeadPokemon') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.spritesMode, name: 'spritesMode', label: 'Sprites Mode', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'spritesMode') })),\n            React.createElement(\"div\", { className: styleEdit },\n                React.createElement(Checkbox, { checked: props.style.scaleSprites, name: 'scaleSprites', label: 'Scale Sprites', onChange: (e) => editEvent(Object.assign({}, e, { target: { value: e.target.checked } }), props, 'scaleSprites') })),\n            React.createElement(\"div\", { className: 'custom-css-input-wrapper' },\n                React.createElement(\"label\", { style: { padding: '.5rem' }, className: 'pt-label' }, \"Custom CSS \"),\n                React.createElement(TextArea, { large: true, onChange: e => editEvent(e, props, 'customCSS'), className: 'custom-css-input pt-fill', value: props.style.customCSS }),\n                React.createElement(\"style\", null, props.style.customCSS))));\n    }\n}\nexport const StyleEditor = connect((state) => ({ style: state.style, game: state.game }), {\n    editStyle,\n})(StyleEditorBase);\n","export * from './StyleEditor';\n","export var ComponentOptions;\n(function (ComponentOptions) {\n    ComponentOptions[\"BackgroundColor\"] = \"Background Color\";\n    ComponentOptions[\"TextColor\"] = \"Text Color\";\n    ComponentOptions[\"Padding\"] = \"Padding\";\n    ComponentOptions[\"Margin\"] = \"Margin\";\n    ComponentOptions[\"BorderRadius\"] = \"Border Radius\";\n})(ComponentOptions || (ComponentOptions = {}));\nexport const Options = {\n    ChampsPokemon: {\n        styles: [\n            ComponentOptions.BorderRadius,\n            ComponentOptions.Padding,\n            ComponentOptions.Margin,\n        ],\n        props: {\n            showNickname: true,\n            showGender: false,\n            showLevel: false,\n        }\n    }\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { cx } from 'emotion';\nimport * as css from './styles';\nimport { generateEmptyPokemon, classWithDarkTheme } from 'utils';\nimport { Button, Tree, Classes, Menu } from '@blueprintjs/core';\nimport { ColorEdit, ThemeSelect } from 'components/Shared';\nimport { ChampsPokemon } from 'components';\nimport { Options } from './ComponentOptions';\nconst modelPokemon = Object.assign({}, generateEmptyPokemon(), { species: 'Pikachu', nickname: 'Pika Pika', gender: 'm', level: 50, metLevel: 5, met: 'Viridian Forest', gameOfOrigin: 'Red' });\nconst componentTree = [\n    {\n        id: 0,\n        hasCaret: false,\n        label: 'Body'\n    },\n    {\n        id: 1,\n        icon: 'style',\n        isExpanded: true,\n        label: 'Header',\n        childNodes: [\n            {\n                id: 2,\n                label: 'Title',\n            },\n            {\n                id: 3,\n                label: 'Trainer Picture',\n            },\n        ]\n    },\n    {\n        id: 4,\n        icon: 'style',\n        isExpanded: true,\n        label: 'Team Pokemon',\n        childNodes: [\n            {\n                id: 5,\n                label: 'Info',\n                childNodes: [\n                    {\n                        id: 6,\n                        label: 'Moves',\n                    },\n                    {\n                        id: 7,\n                        label: 'Nickname Text',\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        id: 8,\n        icon: 'style',\n        isExpanded: true,\n        label: 'Boxed Pokemon',\n        childNodes: [\n            {\n                id: 9,\n                label: 'Info',\n            }\n        ]\n    },\n    {\n        id: 10,\n        icon: 'style',\n        isExpanded: true,\n        label: 'Dead Pokemon',\n        childNodes: [\n            {\n                id: 11,\n                label: 'Info',\n            }\n        ]\n    },\n    {\n        id: 12,\n        icon: 'style',\n        isExpanded: true,\n        label: 'Champs Pokemon',\n        options: Options.ChampsPokemon,\n        childNodes: [\n            {\n                id: 11,\n                label: 'PokemonIcon',\n            }\n        ]\n    },\n    {\n        id: 420,\n        label: 'Custom CSS',\n    }\n];\nexport const NumericValue = ({ name, value, onInput }) => React.createElement(\"div\", { className: cx(css.componentOption) },\n    React.createElement(\"label\", { className: Classes.LABEL }, name),\n    React.createElement(\"input\", { name: name, onInput: onInput, type: 'text', value: value }));\nexport class ThemeEditorBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { componentTree: [] };\n        this.onNodeClick = (node, _nodePath, e) => {\n            const originallySelected = node.isSelected;\n            if (!e.shiftKey) {\n                this.forEachNode(this.state.componentTree, n => (n.isSelected = false));\n            }\n            node.isSelected = originallySelected == null ? true : !originallySelected;\n            this.setState(this.state);\n        };\n        this.onNodeCollapse = (node) => {\n            node.isExpanded = false;\n            this.setState(this.state);\n        };\n        this.onNodeExpand = (node) => {\n            node.isExpanded = true;\n            this.setState(this.state);\n        };\n    }\n    componentWillMount() {\n        this.setState({ componentTree: componentTree });\n    }\n    getCurrentNode() {\n        let currentNode;\n        const selectedNodes = this.forEachNode(this.state.componentTree, (node) => {\n            if (node.isSelected)\n                currentNode = node;\n        });\n        return currentNode;\n    }\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n    render() {\n        const currentNode = this.getCurrentNode() == null ? null : this.getCurrentNode();\n        if (currentNode) {\n            const { label } = currentNode;\n        }\n        console.log(currentNode);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: cx(classWithDarkTheme(css, 'header', this.props.style.editorDarkMode)) },\n                React.createElement(\"strong\", null, \"Current Theme:\"),\n                \" \",\n                React.createElement(ThemeSelect, { theme: this.props.style.template })),\n            React.createElement(\"div\", { className: cx(css.main) },\n                React.createElement(\"div\", { className: cx(css.sidebar) },\n                    React.createElement(\"label\", { style: { display: 'flex' }, className: Classes.LABEL },\n                        React.createElement(\"input\", { style: { margin: '4px', width: 'calc(80% - 8px)' }, className: Classes.INPUT, type: 'text', placeholder: 'Filter...' }),\n                        React.createElement(Button, { style: { width: '20%' }, icon: 'search', className: Classes.MINIMAL })),\n                    React.createElement(Tree, { contents: componentTree, onNodeClick: this.onNodeClick, onNodeCollapse: this.onNodeCollapse, onNodeExpand: this.onNodeExpand })),\n                React.createElement(\"div\", { className: cx(css.componentView) },\n                    React.createElement(\"div\", { className: cx(this.props.style.template.toLowerCase(), classWithDarkTheme(css, 'componentResult', this.props.style.editorDarkMode)) }, currentNode && currentNode.id === 12 &&\n                        React.createElement(ChampsPokemon, Object.assign({ showGender: currentNode.options.props.showGender, showNickname: currentNode.options.props.showNickname, showLevel: currentNode.options.props.showLevel }, modelPokemon))),\n                    React.createElement(\"div\", { className: cx(css.componentOptions) },\n                        React.createElement(\"strong\", null,\n                            this.getCurrentNode() == null ? '' : this.getCurrentNode().label,\n                            \" Options\"),\n                        React.createElement(Menu, null,\n                            React.createElement(React.Fragment, null,\n                                React.createElement(\"div\", { className: cx(css.componentOption) },\n                                    React.createElement(\"label\", { className: Classes.LABEL }, \"Background Color\"),\n                                    React.createElement(ColorEdit, { value: '#222222', name: 'BoxedPokemon', onChange: null })),\n                                React.createElement(\"div\", { className: cx(css.componentOption) },\n                                    React.createElement(\"label\", { className: Classes.LABEL }, \"Text Color\"),\n                                    React.createElement(ColorEdit, { value: '#EEEEEE', name: 'BoxedPokemon', onChange: null })),\n                                React.createElement(NumericValue, { name: 'Border Radius', value: '4px', onInput: null }),\n                                React.createElement(NumericValue, { name: 'Padding', value: '0px', onInput: null }),\n                                React.createElement(NumericValue, { name: 'Margin', value: '0px', onInput: null }))))))));\n    }\n}\nexport const ThemeEditor = connect((state) => ({\n    style: state.style\n}), null)(ThemeEditorBase);\n","export * from './ThemeEditor';\n","import { css } from 'emotion';\nexport const main = css `\n    display: flex;\n`;\nexport const header = css `\n    background: #fff;\n    border-top: 1px solid #eee;\n    border-bottom: 1px solid #eee;\n    padding: .5rem;\n`;\nexport const header_dark = css `\n    background: #394b59;\n    border-top: 1px solid #111;\n    border-bottom: 1px solid #111;\n    padding: .5rem;\n`;\nexport const sidebar = css `\n    width: 30%;\n`;\nexport const componentList = css `\n    background: white;\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n`;\nexport const listItem = css `\n    border-bottom: 1px solid #ccc;\n    list-style-type: none;\n    padding: .25rem;\n`;\nexport const componentView = css `\n    display: flex;\n    width: 100%;\n`;\nexport const componentResult = css `\n    background-image: linear-gradient(to top, #cfd9df 0%, #e2ebf0 100%);\n    padding: 1rem;\n    & *:hover {\n        outline: 1px dotted red;\n    }\n`;\nexport const componentResult_dark = css `\n    background-image: linear-gradient(to top, rgb(32, 40, 45) 0%, rgb(37, 50, 57) 100%);\n    min-width: 33%;\n    padding: 1rem;\n`;\nexport const componentOptions = css `\n    padding: .5rem;\n`;\nexport const componentOption = css `\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    padding: .5rem;\n    .pt-label {\n        margin: 0 !important;\n        width: 60%;\n    }\n`;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getBadges } from 'utils';\nimport { TrainerInfoEditField } from 'components/TrainerEditor/TrainerInfoEditField';\nimport { editTrainer } from 'actions';\nimport { Popover, Menu, Button, Position, Checkbox } from '@blueprintjs/core';\nconst handleDeletion = (badges, badge) => {\n    badges.delete(badge);\n    return badges;\n};\nexport class BadgeInputBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            badges: new Set([]),\n        };\n    }\n    componentWillMount() {\n        this.setState({ badges: new Set(this.props.trainer.badges) });\n    }\n    render() {\n        return (React.createElement(TrainerInfoEditField, { label: 'Checkpoints (Badges)', name: 'badges', placeholder: '...', value: null, onChange: null, element: inputProps => (React.createElement(Popover, { minimal: true, content: React.createElement(Menu, null, getBadges(this.props.game.name).map(badge => (React.createElement(Checkbox, { onChange: (e) => {\n                        this.setState({\n                            badges: this.state.badges.has(badge)\n                                ? handleDeletion(this.state.badges, badge)\n                                : this.state.badges.add(badge),\n                        }, () => {\n                            this.props.editTrainer({\n                                badges: Array.from(this.state.badges),\n                            });\n                        });\n                    }, checked: this.props.trainer &&\n                        this.props.trainer.badges &&\n                        this.props.trainer.badges.includes(badge), key: badge, label: badge })))), position: Position.BOTTOM },\n                React.createElement(Button, { style: {\n                        borderRadius: 0,\n                        width: '160px',\n                    } }, \"Select Checkpoints\"))) }));\n    }\n}\nexport const BadgeInput = connect((state) => ({\n    trainer: state.trainer,\n    game: state.game,\n}), {\n    editTrainer,\n})(BadgeInputBase);\n","import { connect } from 'react-redux';\nimport { editTrainer } from '../../actions';\nimport { TrainerInfoEditField } from './TrainerInfoEditField';\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        value: state.trainer[ownProps.name],\n    };\n};\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        onChange: e => {\n            dispatch(editTrainer({\n                [ownProps.name]: e.target.value,\n            }));\n        },\n    };\n};\nexport const LinkedTrainerInfoEditField = connect(mapStateToProps, mapDispatchToProps)(TrainerInfoEditField);\n","import * as React from 'react';\nimport { TrainerInfoEditor } from 'components/TrainerEditor/TrainerInfoEditor';\nimport { BaseEditor } from 'components/BaseEditor';\nexport class TrainerEditor extends React.Component {\n    render() {\n        return (React.createElement(BaseEditor, { name: 'Trainer' },\n            React.createElement(TrainerInfoEditor, null)));\n    }\n}\n","import * as React from 'react';\nexport const TrainerInfoEditField = ({ label, name, placeholder, onChange, value, element }) => (React.createElement(\"div\", { className: 'trainer-info-field' },\n    React.createElement(\"label\", null, label),\n    element ? (element({ label, name, placeholder, onChange, value })) : (React.createElement(\"input\", { type: 'text', value: value, onChange: onChange, placeholder: placeholder, name: name }))));\n","import * as React from 'react';\nimport { BadgeInput } from 'components/TrainerEditor/BadgeInput';\nimport { LinkedTrainerInfoEditField } from 'components/TrainerEditor/LinkedTrainerInfoEditField';\nimport { Popover, PopoverInteractionKind, Position, Menu } from '@blueprintjs/core';\nimport { listOfTrainers } from 'utils';\nconst capitalize = (s) => s[0].toUpperCase() + s.slice(1);\nconst SpanBlock = ({ text }) => (React.createElement(\"span\", { style: {\n        background: 'rgba(0, 0, 0, 0.1)',\n        display: 'inline-block',\n        padding: '0 3px',\n        margin: '2px',\n        borderRadius: '.25rem',\n    } }, text));\nexport class TrainerInfoEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onInput = e => { };\n    }\n    render() {\n        return (React.createElement(\"div\", { className: 'trainer-info-editor' },\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: 'Trainer Name', name: 'name', placeholder: 'Trainer Name' }),\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: 'ID', name: 'id', placeholder: 'Trainer ID' }),\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: 'Time', name: 'time', placeholder: '0:00' }),\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: 'Money', name: 'money', placeholder: '$0' }),\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: 'Title', name: 'title', placeholder: '' }),\n            React.createElement(BadgeInput, null),\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: 'Exp Share', name: 'expShareStatus', placeholder: 'off' }),\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: React.createElement(Popover, { minimal: true, interactionKind: PopoverInteractionKind.HOVER, position: Position.BOTTOM, content: React.createElement(Menu, null,\n                        \"Type: image url. You can also specify a plain string of\",\n                        ' ',\n                        listOfTrainers.map(t => React.createElement(SpanBlock, { key: t, text: capitalize(t) }))) },\n                    React.createElement(\"span\", null,\n                        \"Trainer Image \",\n                        React.createElement(\"span\", { className: 'pt-icon pt-icon-info-sign' }))), name: 'image', placeholder: 'http://...' }),\n            React.createElement(LinkedTrainerInfoEditField, { onInput: this.onInput, label: 'Notes', name: 'notes', placeholder: '' })));\n    }\n}\n","export * from './TrainerEditor';\nexport * from './BadgeInput';\nexport * from './TrainerInfoEditField';\nexport * from './TrainerInfoEditor';\n","export * from './AddPokemonButton';\nexport * from './Admin';\nexport * from './App';\nexport * from './BaseEditor';\nexport * from './BoxedPokemon';\nexport * from './ChampsPokemon';\nexport * from './DataEditor';\nexport * from './DeadPokemon';\nexport * from './DeletePokemonButton';\nexport * from './Editor';\nexport * from './GameEditor';\nexport * from './Hotkeys';\nexport * from './HotkeysEditor';\nexport * from './PokemonEditor';\nexport * from './PokemonIcon';\nexport * from './Result';\nexport * from './RulesEditor';\nexport * from './Shared';\nexport * from './StyleEditor';\nexport * from './TeamPokemon';\nexport * from './ThemeEditor';\nexport * from './TrainerEditor';\n","import { Types } from 'utils';\nexport const PokemonKeys = {\n    id: '',\n    species: '',\n    nickname: '',\n    status: '',\n    level: 0,\n    gender: 'f',\n    met: '',\n    metLevel: 0,\n    nature: '',\n    ability: '',\n    moves: [],\n    causeOfDeath: '',\n    forme: '',\n    item: '',\n    types: [Types.Normal, Types.Normal],\n    customImage: '',\n    customIcon: '',\n    shiny: false,\n    champion: false,\n    badges: [],\n    num: '',\n    position: 0,\n    wonderTradedFor: '',\n    mvp: false,\n    gameOfOrigin: 'Red',\n};\n","export const TrainerKeys = {\n    name: 'Red',\n    id: '00123',\n    time: '04:33',\n    money: 1244,\n    badges: ['boulder-badge'],\n    expShareStatus: 'ON',\n    image: 'http://placeholder.com',\n    title: 'Trainer Title',\n    notes: 'None yet.',\n    totalTime: '190:33',\n};\n","export * from './Pokemon';\nexport * from './Trainer';\n"],"sourceRoot":""}