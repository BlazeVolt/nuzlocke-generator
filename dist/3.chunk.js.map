{"version":3,"sources":["webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/cell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/editableCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/formats/jsonFormat.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/formats/truncatedFormat.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/column.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/batcher.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/classes.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/clipboard.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/context.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/contextMenuTargetWrapper.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/direction.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/errors.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/grid.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/index.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/directionUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/focusedCellUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/platformUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/scrollUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/selectionUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/loadableContent.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/rect.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/renderMode.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/requestIdleCallback.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/utils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/columnHeader.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/columnHeaderCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/editableName.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/header.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/headerCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/rowHeader.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/rowHeaderCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/index.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/dragEvents.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/draggable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/menus/copyCellsMenuItem.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/menus/index.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/menus/menuContext.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/reorderable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/resizable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/resizeHandle.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/resizeSensor.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/selectable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/layers/guides.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/layers/regions.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/locator.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/quadrants/tableQuadrant.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/quadrants/tableQuadrantStack.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/quadrants/tableQuadrantStackCache.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/regions.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/table.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/tableBody.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/tableBodyCells.js","webpack:///./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.esm.js","webpack:///./node_modules/@emotion/memoize/dist/memoize.esm.js","webpack:///./node_modules/create-emotion-styled/dist/index.esm.js","webpack:///./node_modules/react-emotion/dist/index.esm.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqD;AAC3B;AACL;AACK;AAC1B,qCAA4C,wEAAwC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAsE,qBAAqB;AAC3F;AACA;AACA;AACA;AACA,2NAA8F;AAC9F;AACA;AACA;AACA;AACA,oFAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT,kFAAkD,yBAAyB;AAC3E,2HAA6D,mDAAmD,GAAG,mGAAmG;AACtN,0IAAkD,yCAAyC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;ACtER;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2E;AAC3E;AACoB;AACL;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sEAAsE;AAClG;AACA;AACA,4BAA4B,sDAAsD;AAClF;AACA;AACA;AACA,4BAA4B,0CAA0C;AACtE;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA,4BAA4B,6DAA6D;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAsE,qBAAqB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uCAAuC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iJAA+D,ybAAkU;AACjY;AACA;AACA,6JAA8E;AAC9E;AACA;AACA;AACA,uFAAuD,yBAAyB;AAChF;AACA,iKAA6D,oBAAoB,8GAA8G;AAC/L,oIAA4C,sIAAsI;AAClL;AACA;AACA;AACA;AACA,2HAAyC,sHAAsH;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;ACnHR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uLAAwE,eAAe,iDAAiD;AACxI;AACA;AACA;AACA;AACA,mCAAmC,qCAAqC,EAAE;AAC1E;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;AC1CR;AAAA;AACA;AACA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACgB;AACE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iCAAiC;AACrF;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgD,uBAAuB;AACvE,4EAA4C,kHAA0E;AACtH;AACA;AACA;AACA;AACA,gFAAgD,sDAAsD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6D,4BAA4B;AACzF,oIAAkD,wGAAgE,mBAAmB,8BAA8B,EAAE,wJAAsG;AAC3Q,6HAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA,iFAAiD,6HAAqF;AACtI,6HAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;ACtJR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;AClBR;AAAA;AACA;AACA;AACA;AACA;AACgB;AACc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,gCAAgC,MAAM,QAAQ,MAAM,QAAQ,MAAM;AAClE,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yCAAyC;AAC9E,wCAAwC,+CAA+C;AACvF,qCAAqC,4CAA4C;AACjF;AACA;AACA,6CAA6C,yCAAyC,EAAE;AACxF;AACA;AACA,gDAAgD,qCAAqC,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0CAA0C,sFAAsF,EAAE;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAA0D;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3NR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA,yCAAyC,mBAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB,EAAE;AACrE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;AC9GA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4C,qCAAqC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;AC/BR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;;;;;;;;;;ACX/B;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACqC;AACrC;AACe;AACC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D,qCAAqC,yCAAyC;AAC9E,oCAAoC,uCAAuyBAAyB;AACnE,oDAAoD,+BAA+B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,+BAA+B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2BAA2B;AACtE,+BAA+B,+BAA+B;AAC9D;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2BAA2B;AACtE,+BAA+B,kCAAkC;AACjE;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAA0C,iBAAiB,mBAAmB;AAC9E;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3VR;AAAA;AAAA;AACA;AACA;AACA;AACA;AACoB;AACL;AACA;AACM;AACL;AAChB;AACA;AACA;;;;;;;;;;;;;;;ACZA;AAAA;AACA;AACA;AACA;AACA;AACoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAkC,mHAA0E,iCAAiC;AAC7I;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yBAAyB;AAClE,4DAA8B,eAAe,2CAA2C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1HA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrBA;AAAA;AACA;AACA;AACA;AACA;AACqC;AACrC;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnEA;AAAA;AACA;AACA;AACA;AACA;AACqC;AACjB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+C,mGAAiD;AAChG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;ACjCR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;ACjGR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;;;;;;;;;;;;;;AC3BjC;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpuBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,EAAE;AACvG;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC5TA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;AACM;AACe;AACV;AACV;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgD,SAAS,oBAAoB,EAAE;AAC/E,4EAA4C,0EAA0E;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6IAA2D,2MAA4H;AACvL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oKAA8D,gnCAA47B;AAC1/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;AC1GR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8E;AAC9E;AAC2C;AACjB;AACL;AACrB;AACA,uEAAuC,2FAAmD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qLAAsG;AACtG;AACA;AACA;AACA,4KAAkE,4FAA4F,oBAAoB,qBAAqB;AACvM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsD,kFAA0C;AAChG,2JAAmE,yCAAyC;AAC5G;AACA,6FAA6D,eAAe;AAC5E;AACA,gFAAgD,4FAAoD;AACpG,4EAA4C,mFAA2C;AACvF;AACA;AACA;AACA,4EAA4C,oFAA4C;AACxF;AACA;AACA,gFAAgD,4FAAoD;AACpG;AACA;AACA,4EAA4C,oFAA4C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2C,kFAA0C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,yJAA0E;AAC1E;AACA;AACA,4EAA4C,qBAAqB;AACjE,wEAAwC,gGAAwD;AAChG,4HAA0C,kMAAwG,mBAAmB,8BAA8B,EAAE,4FAA4F;AACjS,6HAA2C,iBAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;AC/GR;AAAA;AACA;AACA;AACA;AACA;AACA;AAC2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAoD;AAChF;AACA;AACA;AACA,4BAA4B,yCAAyC;AACrE;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA,4BAA4B,2DAA2D;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA,qIAAmD,wYAAyT;AAC5W;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDR;AAAA;AACA;AACA;AACA;AACA;AACA;AACmC;AACnC;AACA;AACA;AACqB;AACK;AACN;AACK;AACY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uBAAuB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,6DAA6D,mDAAmD;AAChH,2DAA2D,iDAAiD;AAC5G;AACA;AACA;AACA,8JAAqE,+kBAAuiB;AAC5mB,wIAAgD,mWAAmW;AACnZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA,yCAAyC;AACzC,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB,4EAA4E;AACnG;AACA;AACA;AACA,gHAAkE,+CAA+C;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4E,yFAAiD;AAC7H,4EAA4C,kFAA0C;AACtF,iIAA+C,+BAA+B;AAC9E;AACA;AACA;AACA;AACA;AACA,gJAAsD,0WAA0W;AACha;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;ACzKR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAsE,qBAAqB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IAA+D;AAC/D;AACA;AACA;AACA;AACA,4EAA4C,8CAA8C;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;AC/CR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;AACe;AACpB;AACO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgD,SAAS,sBAAsB,EAAE;AACjF,4EAA4C,6GAAqE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uIAAwD,8MAA+H,6BAA6B,EAAE;AACtN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oKAA8D,uiCAAm3B;AACj7B;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA,8HAA+C,6CAA6C;AAC5F;;;;;;;;;;;;;;;;;;;;;AClGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACgC;AAChC;AAC0B;AACL;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4KAAkE,sFAAsF;AACxJ,wEAAwC,4EAAoC;AAC5E,8IAAsD,mCAAmC;AACzF,gFAAgD,iFAAyC;AACzF;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BR;AAAA;AAAA;AACA;AACA;AACA;AACA;AACe;AACQ;AACF;AAC2B;AAC/B;AACkC;AAC9B;AACO;AACQ;AACX;AACyB;AAC1B;AACD;AAC0F;AACjG;;;;;;;;;;;;;;ACnBhB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;AC5JR;AAAA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AACqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;AChER;AAAA;AACA;AACA;AACA;AACA;AACA;AAC0B;AAC1B;AACoB;AACF;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gLAAgE,kBAAkB,4BAA4B;AAC9G;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;AC7BR;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AAAA;AACA;AACA;AACA;AACA;AACkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;AC5BR;AAAA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B;AACgB;AACqB;AACjB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2KAAkE,mBAAmB,wBAAwB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAwD,+FAAsD,yBAAyB;AACvI;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;AC3GR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;AACoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kCAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qEAAuC;AACvC;AACA,8EAA8C,eAAe;AAC7D;AACA;AACA,0EAA0C,2CAA2C;AACrF;AACA;AACA;AACA,iIAAmD,2KAA2K;AAC9N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;ACtFR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;AACpB;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kKAAmF;AACnF;AACA;AACA;AACA;AACA,2JAA4E;AAC5E;AACA;AACA,2HAAgD,oKAAoK;AACpN,wEAAwC,2BAA2B;AACnE,4EAA4C,2BAA2B;AACvE;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;AC/ER;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,2DAA2D,SAAS,QAAQ,UAAU;AACtF,mBAAmB,kBAAkB,aAAa,oBAAoB;AACtE,qOAA6L,SAAS,QAAQ,gBAAgB,wNAAgL,SAAS,QAAQ,gBAAgB,aAAa,cAAc;AAC1c;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;ACpFR;AAAA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AACgB;AACE;AACG;AACD;AACpiDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2KAAkE,mBAAmB,wBAAwB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0CAA0C,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;AC5NR;AAAA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+EAA+C,iDAAiD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+EAA+C,iDAAiD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4C,+IAAgE;AAC5G;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;ACrDR;AAAA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AACkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgD,+OAAwH;AACxK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAkE,6BAA6B;AAC/F;AACA;AACA,2EAA2C,iFAAyC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;AC3CR;AAAA;AACA;AACA;AACA;AACA;AACA;AACe;AACC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qCAAqC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;ACvKR;AAAA;AACA;AACA;AACA;AACA;AACA;AACgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4C,6EAA6E;AACzH,wEAAwC,6LAAqJ;AAC7L,4EAA4C,iFAAyC;AACrF;AACA;AACA,4EAA4C,iHAAyE;AACrH;AACA,gFAAgD,oHAA4E;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;ACxFR;AAAA;AACA;AACA;AACA;AACA;AACA;AACgD;AAChD;AACA;AACA;AACgB;AACsB;AACJ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,qFAAsC;AACtC,oFAAqC;AACrC,qFAAsC;AACtC,yFAA0C;AAC1C;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsgHAAkE,kCAAkC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gOAAmH,cAAc,seAAyV;AAC1d,mOAAsH,cAAc,2fAA8W;AAClf,4EAA4C,kFAA0C;AACtF,+KAAkE,cAAc,miBAAsZ;AACte,+KAAkE,cAAc,geAAmV;AACna;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sDAAsD;AAC7F;AACA;AACA,sGAAsG;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,sDAAsD,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,4DAA4D,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;ACniBR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;ACxDR;AAAA;AACA;AACA;AACA;AACA;AACA;AACgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACA;AACA;AACA;AACA;AACA,CAAC,gDAAgD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,wBAAwB;AACxB;AACA,wBAAwB;AACxB;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6BAA6B;AAC1E;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAuD,2BAA2B,EAAE;AACpF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,eAAe;AAChD,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA,iCAAiC,eAAe;AAChD,kDAAkD,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE,kDAAkD,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChpBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACgF;AAChF;AACA;AACiB;AACjB;AACoB;AACuB;AACvB;AACpB;AACe;AACf;AACA;AACA;AACe;AACM;AACL;AACO;AACI;AACiB;AACrB;AACF;AACC;AACJ;AACK;AACM;AACkE;AAC3E;AACpB;AACA;AACA;AACA;AACA;AACA,2CAA2C,2CAA2C,EAAE;AACxF,0CAA0C,0CAA0C,EAAE;AACtF,0CAA0C,0CAA0C,EAAE;AACtF,2CAA2C,4CAA4C,EAAE;AACzF,uCAAuC,uCAAuC,EAAE;AAChF,uCAAuC,uCAAuC,EAAE;AAChF,6CAA6C,6CAA6C,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uGAAqD;AAC3G,wDAAwD,yGAAuD;AAC/G,wDAAwD,yGAAuD;AAC/G,yDAAyD,0GAAwD;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gJAAiE;AACjE;AACA;AACA,gFAAgD,8EAA8E;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA8C,6CAA6C;AAC3F;AACA,yMAAgF;AAChF;AACA;AACA,yMAAgF,cAAc,wFAAyC;AACvI;AACA;AACA;AACA,mDAAmD,+BAA+B;AAClF;AACA;AACA,0JAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA,gFAAgD,qBAAqB;AACrE,0IAAmD,w8BAAo3B;AACv6B;AACA;AACA;AACA;AACA,gDAAgD,4BAA4B;AAC5E;AACA;AACA,uJAAwE;AACxE;AACA;AACA;AACA;AACA;AACA,gFAAgD,sCAAsC;AACtF,oIAAgD,+3BAA2yB;AAC31B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA+C,oBAAoB,mBAAmB;AACtF;AACA;AACA;AACA,gDAAgD,4BAA4B;AAC5E,mDAAmD,+BAA+B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4HAAgD,45BAAw0B;AACx3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,yCAAyC;AAC3F,0DAA0D,iDAAiD;AAC3G,mDAAmD,0CAA0C;AAC7F,2DAA2D,kDAAkD;AAC7G,gDAAgD,uCAAuC;AACvF,wDAAwD,+CAA+C;AACvG,kDAAkD,yCAAyC;AAC3F,0DAA0D,iDAAiD;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6BAA6B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClgCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mCAAmC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAqD;AACjF;AACA;AACA,4BAA4B,iDAAiD;AAC7E;AACA;AACA;AACA,4BAA4B,yDAAyD;AACrF;AACA;AACA,4BAA4B,mDAAmD;AAC/E;AACA;AACA;AACA,4CAA4C,wBAAwB;AACpE,4BAA4B,iCAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC;AAC7D;AACA;AACA,4BAA4B,qCAAqC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,2BAA2B,EAAE;AAChG;AACA,6GAA8D,yBAAyB,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,6CAA6C;AAC/G;AACA;AACA;AACA;AACA;AACA,0EAA0E,yDAAyD,EAAE;AACrI;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iJAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4C,uFAAuF;AACnI,oJAAqD,mlCAAmjC;AACxmC,wEAAwC,qNAA8F;AACtI,6HAA6C,qJAA6G;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uKAAqF,8BAA8B,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAiD,qHAAqH;AACtK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+HAA6C,2IAA2I;AACxL,+HAA6C,mJAAmJ;AAChM,+HAA6C,mJAAmJ;AAChM,+HAA6C,uJAAuJ;AACpM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+HAA6C,sHAAsH;AACnK,+HAA6C,0HAA0H;AACvK,+HAA6C,8GAA8G;AAC3J,+HAA6C,sHAAsH;AACnK,+HAA6C,gJAAgJ;AAC7L,+HAA6C,iKAAiK;AAC9M,+HAA6C,qJAAqJ;AAClM,+HAA6C,qKAAqK;AAClN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAiD,uHAAuH;AACxK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAA4C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,6CAA6C,EAAE;AACzH,uIAAsD,4JAAqH;AAC3K,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,WAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3qCA;AAAA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AACmC;AACd;AACC;AACG;AACP;AACuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAyD,qGAA4D,yBAAyB;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uBAAuB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAsE,6BAA6B;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IAAqD,gYAAgY;AACrb,4JAA2D,sQAA+I;AAC1M,sIAAqD,uZAAuZ;AAC5c;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFR;AAAA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AAC4B;AACV;AAClB;AACe;AACM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6IAAsG;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAA2C;AAC3C;AACA,iFAAiD,2FAA2F;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAsE,qCAAqC;AAC3G;AACA,uBAAuB;AACvB;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2C,mCAAmC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE,oDAAoD,+BAA+B;AACnF;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE,oDAAoD,+BAA+B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1JA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACNA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACTA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,YAAY;AACpB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA,WAAW;AACX;;AAEA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAEW;;;AAGX;AACA;AACA,OAAO;;AAEP;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA;;AAEA,eAoBA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1NA;AACA;AACA;AACA;;AAEA;;AAEA;AACA","file":"3.chunk.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Classes as CoreClasses, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { JSONFormat } from \"./formats/jsonFormat\";\nimport { TruncatedFormat } from \"./formats/truncatedFormat\";\nexport var emptyCellRenderer = function () { return React.createElement(Cell, null); };\nvar Cell = /** @class */ (function (_super) {\n    tslib_1.__extends(Cell, _super);\n    function Cell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Cell.prototype.shouldComponentUpdate = function (nextProps) {\n        // deeply compare \"style,\" because a new but identical object might have been provided.\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.deepCompareKeys(this.props.style, nextProps.style));\n    };\n    Cell.prototype.render = function () {\n        var _a = this.props, cellRef = _a.cellRef, tabIndex = _a.tabIndex, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, onKeyPress = _a.onKeyPress, style = _a.style, intent = _a.intent, interactive = _a.interactive, loading = _a.loading, tooltip = _a.tooltip, truncated = _a.truncated, className = _a.className, wrapText = _a.wrapText;\n        var classes = classNames(Classes.TABLE_CELL, CoreClasses.intentClass(intent), (_b = {},\n            _b[Classes.TABLE_CELL_INTERACTIVE] = interactive,\n            _b[CoreClasses.LOADING] = loading,\n            _b[Classes.TABLE_TRUNCATED_CELL] = truncated,\n            _b), className);\n        var textClasses = classNames((_c = {},\n            _c[Classes.TABLE_TRUNCATED_TEXT] = truncated,\n            _c[Classes.TABLE_NO_WRAP_TEXT] = !wrapText,\n            _c));\n        // add width and height to the children, for use in shouldComponentUpdate in truncatedFormat\n        // note: these aren't actually used by truncated format, just in shouldComponentUpdate\n        var modifiedChildren = React.Children.map(this.props.children, function (child) {\n            if (style != null && React.isValidElement(child)) {\n                var childType = child.type;\n                // can't get prototype of \"string\" child, so treat those separately\n                if (typeof child === \"string\" || typeof childType === \"string\") {\n                    return child;\n                }\n                else {\n                    var isTruncatedFormat = childType.prototype === TruncatedFormat.prototype ||\n                        TruncatedFormat.prototype.isPrototypeOf(childType) ||\n                        childType.prototype === JSONFormat.prototype ||\n                        JSONFormat.prototype.isPrototypeOf(childType);\n                    // only add props if child is truncated format\n                    if (isTruncatedFormat) {\n                        return React.cloneElement(child, {\n                            parentCellHeight: parseInt(style.height, 10),\n                            parentCellWidth: parseInt(style.width, 10),\n                        });\n                    }\n                }\n            }\n            return child;\n        });\n        var content = React.createElement(\"div\", { className: textClasses }, modifiedChildren);\n        return (React.createElement(\"div\", tslib_1.__assign({ className: classes, title: tooltip, ref: cellRef }, { style: style, tabIndex: tabIndex, onKeyDown: onKeyDown, onKeyUp: onKeyUp, onKeyPress: onKeyPress }),\n            React.createElement(LoadableContent, { loading: loading, variableLength: true }, content)));\n        var _b, _c;\n    };\n    Cell.defaultProps = {\n        truncated: true,\n        wrapText: false,\n    };\n    return Cell;\n}(React.Component));\nexport { Cell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { EditableText, Hotkey, Hotkeys, HotkeysTarget, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"../interactions/draggable\";\nimport { Cell } from \"./cell\";\nvar EditableCell = /** @class */ (function (_super) {\n    tslib_1.__extends(EditableCell, _super);\n    function EditableCell(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.refHandlers = {\n            cell: function (ref) {\n                _this.cellRef = ref;\n            },\n        };\n        _this.handleKeyPress = function () {\n            if (_this.state.isEditing || !_this.props.isFocused) {\n                return;\n            }\n            // setting dirty value to empty string because apparently the text field will pick up the key and write it in there\n            _this.setState({ isEditing: true, dirtyValue: \"\", savedValue: _this.state.savedValue });\n        };\n        _this.handleEdit = function () {\n            _this.setState({ isEditing: true, dirtyValue: _this.state.savedValue });\n        };\n        _this.handleCancel = function (value) {\n            // don't strictly need to clear the dirtyValue, but it's better hygiene\n            _this.setState({ isEditing: false, dirtyValue: undefined });\n            _this.invokeCallback(_this.props.onCancel, value);\n        };\n        _this.handleChange = function (value) {\n            _this.setState({ dirtyValue: value });\n            _this.invokeCallback(_this.props.onChange, value);\n        };\n        _this.handleConfirm = function (value) {\n            _this.setState({ isEditing: false, savedValue: value, dirtyValue: undefined });\n            _this.invokeCallback(_this.props.onConfirm, value);\n        };\n        _this.handleCellActivate = function (_event) {\n            return true;\n        };\n        _this.handleCellDoubleClick = function (_event) {\n            _this.handleEdit();\n        };\n        _this.state = {\n            isEditing: false,\n            savedValue: props.value,\n        };\n        return _this;\n    }\n    EditableCell.prototype.componentDidMount = function () {\n        this.checkShouldFocus();\n    };\n    EditableCell.prototype.componentDidUpdate = function () {\n        this.checkShouldFocus();\n    };\n    EditableCell.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.shallowCompareKeys(this.state, nextState) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, [\"style\"]));\n    };\n    EditableCell.prototype.componentWillReceiveProps = function (nextProps) {\n        var value = nextProps.value;\n        if (value != null) {\n            this.setState({ savedValue: value, dirtyValue: value });\n        }\n    };\n    EditableCell.prototype.render = function () {\n        var _a = this.props, onCancel = _a.onCancel, onChange = _a.onChange, onConfirm = _a.onConfirm, truncated = _a.truncated, wrapText = _a.wrapText, spreadableProps = tslib_1.__rest(_a, [\"onCancel\", \"onChange\", \"onConfirm\", \"truncated\", \"wrapText\"]);\n        var _b = this.state, isEditing = _b.isEditing, dirtyValue = _b.dirtyValue, savedValue = _b.savedValue;\n        var interactive = spreadableProps.interactive || isEditing;\n        var cellContents = null;\n        if (isEditing) {\n            cellContents = (React.createElement(EditableText, { isEditing: true, className: classNames(Classes.TABLE_EDITABLE_TEXT, Classes.TABLE_EDITABLE_NAME), intent: spreadableProps.intent, minWidth: null, onCancel: this.handleCancel, onChange: this.handleChange, onConfirm: this.handleConfirm, onEdit: this.handleEdit, placeholder: \"\", selectAllOnFocus: false, value: dirtyValue }));\n        }\n        else {\n            var textClasses = classNames(Classes.TABLE_EDITABLE_TEXT, (_c = {},\n                _c[Classes.TABLE_TRUNCATED_TEXT] = truncated,\n                _c[Classes.TABLE_NO_WRAP_TEXT] = !wrapText,\n                _c));\n            cellContents = React.createElement(\"div\", { className: textClasses }, savedValue);\n        }\n        return (React.createElement(Cell, tslib_1.__assign({}, spreadableProps, { truncated: false, interactive: interactive, cellRef: this.refHandlers.cell, onKeyPress: this.handleKeyPress }),\n            React.createElement(Draggable, { onActivate: this.handleCellActivate, onDoubleClick: this.handleCellDoubleClick, preventDefault: false, stopPropagation: interactive }, cellContents)));\n        var _c;\n    };\n    EditableCell.prototype.renderHotkeys = function () {\n        return (React.createElement(Hotkeys, null,\n            React.createElement(Hotkey, { key: \"edit-cell\", label: \"Edit the currently focused cell\", group: \"Table\", combo: \"f2\", onKeyDown: this.handleEdit })));\n    };\n    EditableCell.prototype.checkShouldFocus = function () {\n        if (this.props.isFocused && !this.state.isEditing) {\n            // don't focus if we're editing -- we'll lose the fact that we're editing\n            this.cellRef.focus();\n        }\n    };\n    EditableCell.prototype.invokeCallback = function (callback, value) {\n        // pass through the row and column indices if they were provided as props by the consumer\n        var _a = this.props, rowIndex = _a.rowIndex, columnIndex = _a.columnIndex;\n        CoreUtils.safeInvoke(callback, value, rowIndex, columnIndex);\n    };\n    EditableCell.defaultProps = {\n        truncated: true,\n        wrapText: false,\n    };\n    EditableCell = tslib_1.__decorate([\n        HotkeysTarget\n    ], EditableCell);\n    return EditableCell;\n}(React.Component));\nexport { EditableCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { TruncatedFormat, TruncatedPopoverMode } from \"./truncatedFormat\";\nvar JSONFormat = /** @class */ (function (_super) {\n    tslib_1.__extends(JSONFormat, _super);\n    function JSONFormat() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    JSONFormat.prototype.render = function () {\n        var _a = this.props, children = _a.children, omitQuotesOnStrings = _a.omitQuotesOnStrings, stringify = _a.stringify;\n        var showPopover = this.props.showPopover;\n        // always hide popover if value is nully\n        var isNully = children == null;\n        if (isNully) {\n            showPopover = TruncatedPopoverMode.NEVER;\n        }\n        var className = classNames(this.props.className, (_b = {},\n            _b[Classes.TABLE_NULL] = isNully,\n            _b));\n        var displayValue = \"\";\n        if (omitQuotesOnStrings && typeof children === \"string\") {\n            displayValue = children;\n        }\n        else {\n            displayValue = stringify(children);\n        }\n        return (React.createElement(TruncatedFormat, tslib_1.__assign({}, this.props, { className: className, showPopover: showPopover }), displayValue));\n        var _b;\n    };\n    JSONFormat.defaultProps = {\n        omitQuotesOnStrings: true,\n        stringify: function (obj) { return JSON.stringify(obj, null, 2); },\n    };\n    return JSONFormat;\n}(React.Component));\nexport { JSONFormat };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Icon, Popover, Position } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { Utils } from \"../../common/utils\";\nimport { Locator } from \"../../locator\";\n// amount in pixels that the content div width changes when truncated vs when\n// not truncated. Note: could be modified by styles\n// Note 2: this doesn't come from the width of the popover element, but the \"right\" style\n// on the div, which comes from styles\nvar CONTENT_DIV_WIDTH_DELTA = 25;\nexport var TruncatedPopoverMode;\n(function (TruncatedPopoverMode) {\n    TruncatedPopoverMode[\"ALWAYS\"] = \"always\";\n    TruncatedPopoverMode[\"NEVER\"] = \"never\";\n    TruncatedPopoverMode[\"WHEN_TRUNCATED\"] = \"when-truncated\";\n    TruncatedPopoverMode[\"WHEN_TRUNCATED_APPROX\"] = \"when-truncated-approx\";\n})(TruncatedPopoverMode || (TruncatedPopoverMode = {}));\nvar TruncatedFormat = /** @class */ (function (_super) {\n    tslib_1.__extends(TruncatedFormat, _super);\n    function TruncatedFormat() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isPopoverOpen: false,\n            isTruncated: false,\n        };\n        _this.handleContentDivRef = function (ref) { return (_this.contentDiv = ref); };\n        _this.handlePopoverOpen = function () {\n            _this.setState({ isPopoverOpen: true });\n        };\n        _this.handlePopoverClose = function () {\n            _this.setState({ isPopoverOpen: false });\n        };\n        return _this;\n    }\n    TruncatedFormat.prototype.componentDidMount = function () {\n        this.setTruncationState();\n    };\n    TruncatedFormat.prototype.componentDidUpdate = function () {\n        this.setTruncationState();\n    };\n    TruncatedFormat.prototype.render = function () {\n        var _a = this.props, children = _a.children, detectTruncation = _a.detectTruncation, truncateLength = _a.truncateLength, truncationSuffix = _a.truncationSuffix;\n        var content = \"\" + children;\n        var cellContent = content;\n        if (!detectTruncation && truncateLength > 0 && cellContent.length > truncateLength) {\n            cellContent = cellContent.substring(0, truncateLength) + truncationSuffix;\n        }\n        if (this.shouldShowPopover(content)) {\n            var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT);\n            return (React.createElement(\"div\", { className: className },\n                React.createElement(\"div\", { className: Classes.TABLE_TRUNCATED_VALUE, ref: this.handleContentDivRef }, cellContent),\n                this.renderPopover()));\n        }\n        else {\n            var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT_TEXT);\n            return (React.createElement(\"div\", { className: className, ref: this.handleContentDivRef }, cellContent));\n        }\n    };\n    TruncatedFormat.prototype.renderPopover = function () {\n        var _a = this.props, children = _a.children, preformatted = _a.preformatted;\n        // `<Popover>` will always check the content's position on update\n        // regardless if it is open or not. This negatively affects perf due to\n        // layout thrashing. So instead we manage the popover state ourselves\n        // and mimic its popover target\n        if (this.state.isPopoverOpen) {\n            var popoverClasses = classNames(Classes.TABLE_TRUNCATED_POPOVER, preformatted ? Classes.TABLE_POPOVER_WHITESPACE_PRE : Classes.TABLE_POPOVER_WHITESPACE_NORMAL);\n            var popoverContent = React.createElement(\"div\", { className: popoverClasses }, children);\n            return (React.createElement(Popover, { className: Classes.TABLE_TRUNCATED_POPOVER_TARGET, modifiers: { preventOverflow: { boundariesElement: \"window\" } }, content: popoverContent, position: Position.BOTTOM, isOpen: true, onClose: this.handlePopoverClose },\n                React.createElement(Icon, { icon: \"more\" })));\n        }\n        else {\n            // NOTE: This structure matches what `<Popover>` does internally. If\n            // `<Popover>` changes, this must be updated.\n            return (React.createElement(\"span\", { className: Classes.TABLE_TRUNCATED_POPOVER_TARGET, onClick: this.handlePopoverOpen },\n                React.createElement(Icon, { icon: \"more\" })));\n        }\n    };\n    TruncatedFormat.prototype.shouldShowPopover = function (content) {\n        var _a = this.props, detectTruncation = _a.detectTruncation, measureByApproxOptions = _a.measureByApproxOptions, showPopover = _a.showPopover, truncateLength = _a.truncateLength;\n        switch (showPopover) {\n            case TruncatedPopoverMode.ALWAYS:\n                return true;\n            case TruncatedPopoverMode.NEVER:\n                return false;\n            case TruncatedPopoverMode.WHEN_TRUNCATED:\n                return detectTruncation\n                    ? this.state.isTruncated\n                    : truncateLength > 0 && content.length > truncateLength;\n            case TruncatedPopoverMode.WHEN_TRUNCATED_APPROX:\n                if (!detectTruncation) {\n                    return truncateLength > 0 && content.length > truncateLength;\n                }\n                if (this.props.parentCellHeight == null || this.props.parentCellWidth == null) {\n                    return false;\n                }\n                var approximateCharWidth = measureByApproxOptions.approximateCharWidth, approximateLineHeight = measureByApproxOptions.approximateLineHeight, cellHorizontalPadding = measureByApproxOptions.cellHorizontalPadding, numBufferLines = measureByApproxOptions.numBufferLines;\n                var cellWidth = this.props.parentCellWidth;\n                var approxCellHeight = Utils.getApproxCellHeight(content, cellWidth, approximateCharWidth, approximateLineHeight, cellHorizontalPadding, numBufferLines);\n                var shouldTruncate = approxCellHeight > this.props.parentCellHeight;\n                return shouldTruncate;\n            default:\n                return false;\n        }\n    };\n    TruncatedFormat.prototype.setTruncationState = function () {\n        if (!this.props.detectTruncation || this.props.showPopover !== TruncatedPopoverMode.WHEN_TRUNCATED) {\n            return;\n        }\n        if (this.contentDiv === undefined) {\n            this.setState({ isTruncated: false });\n            return;\n        }\n        var isTruncated = this.state.isTruncated;\n        // take all measurements at once to avoid excessive DOM reflows.\n        var _a = this.contentDiv, containerHeight = _a.clientHeight, containerWidth = _a.clientWidth, actualContentHeight = _a.scrollHeight, contentWidth = _a.scrollWidth;\n        // if the content is truncated, then a popover handle will be present as a\n        // sibling of the content. we don't want to consider that handle when\n        // calculating the width of the actual content, so subtract it.\n        var actualContentWidth = isTruncated ? contentWidth - CONTENT_DIV_WIDTH_DELTA : contentWidth;\n        // we of course truncate the content if it doesn't fit in the container. but we\n        // also aggressively truncate if they're the same size with truncation enabled;\n        // this addresses browser-crashing stack-overflow bugs at various zoom levels.\n        // (see: https://github.com/palantir/blueprint/pull/1519)\n        var shouldTruncate = (isTruncated && actualContentWidth === containerWidth) ||\n            actualContentWidth > containerWidth ||\n            actualContentHeight > containerHeight;\n        this.setState({ isTruncated: shouldTruncate });\n    };\n    TruncatedFormat.defaultProps = {\n        detectTruncation: false,\n        measureByApproxOptions: {\n            approximateCharWidth: 8,\n            approximateLineHeight: 18,\n            cellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n            numBufferLines: 0,\n        },\n        preformatted: false,\n        showPopover: TruncatedPopoverMode.WHEN_TRUNCATED,\n        truncateLength: 2000,\n        truncationSuffix: \"...\",\n    };\n    return TruncatedFormat;\n}(React.PureComponent));\nexport { TruncatedFormat };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { emptyCellRenderer } from \"./cell/cell\";\nvar Column = /** @class */ (function (_super) {\n    tslib_1.__extends(Column, _super);\n    function Column() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Column.defaultProps = {\n        cellRenderer: emptyCellRenderer,\n    };\n    return Column;\n}(React.PureComponent));\nexport { Column };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { Utils } from \"@blueprintjs/core\";\nimport { requestIdleCallback } from \"./requestIdleCallback\";\n/**\n * This class helps batch updates to large lists.\n *\n * For example, if your React component has many children, updating them all at\n * once may cause jank when reconciling the DOM. This class helps you update\n * only a few children per frame.\n *\n * A typical usage would be:\n *\n * ```tsx\n * public renderChildren = (allChildrenKeys: string[]) => {\n *\n *     batcher.startNewBatch();\n *\n *     allChildrenKeys.forEach((prop1: string, index: number) => {\n *         batcher.addArgsToBatch(prop1, \"prop2\", index);\n *     });\n *\n *     batcher.removeOldAddNew((prop1: string, prop2: string, other: number) => {\n *         return <Child prop1={prop1} prop2={prop2} other={other} />;\n *     });\n *\n *     if (!batcher.isDone()) {\n *         batcher.idleCallback(this.forceUpdate());\n *     }\n *\n *     const currentChildren = batcher.getList();\n *     return currentChildren;\n * }\n *\n * ```\n */\nvar Batcher = /** @class */ (function () {\n    function Batcher() {\n        var _this = this;\n        this.currentObjects = {};\n        this.oldObjects = {};\n        this.batchArgs = {};\n        this.done = true;\n        this.handleIdleCallback = function () {\n            var callback = _this.callback;\n            delete _this.callback;\n            Utils.safeInvoke(callback);\n        };\n        this.mapCurrentObjectKey = function (key) {\n            return _this.currentObjects[key];\n        };\n    }\n    /**\n     * Resets the \"batch\" and \"current\" sets. This essentially clears the cache\n     * and prevents accidental re-use of \"current\" objects.\n     */\n    Batcher.prototype.reset = function () {\n        this.batchArgs = {};\n        this.oldObjects = this.currentObjects;\n        this.currentObjects = {};\n    };\n    /**\n     * Starts a new \"batch\" argument set\n     */\n    Batcher.prototype.startNewBatch = function () {\n        this.batchArgs = {};\n    };\n    /**\n     * Stores the variadic arguments to be later batched together.\n     *\n     * The arguments must be simple stringifyable objects.\n     */\n    Batcher.prototype.addArgsToBatch = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.batchArgs[this.getKey(args)] = args;\n    };\n    /**\n     * Compares the set of \"batch\" arguments to the \"current\" set. Creates any\n     * new objects using the callback as a factory. Removes old objects.\n     *\n     * Arguments that are in the \"current\" set but were not part of the last\n     * \"batch\" set are considered candidates for removal. Similarly, Arguments\n     * that are part of the \"batch\" set but not the \"current\" set are candidates\n     * for addition.\n     *\n     * The number of objects added and removed may be limited with the\n     * `...Limit` parameters.\n     *\n     * Finally, the batcher determines if the batching is complete if the\n     * \"current\" arguments match the \"batch\" arguments.\n     */\n    Batcher.prototype.removeOldAddNew = function (callback, addNewLimit, removeOldLimit, updateLimit) {\n        var _this = this;\n        if (addNewLimit === void 0) { addNewLimit = Batcher.DEFAULT_ADD_LIMIT; }\n        if (removeOldLimit === void 0) { removeOldLimit = Batcher.DEFAULT_REMOVE_LIMIT; }\n        if (updateLimit === void 0) { updateLimit = Batcher.DEFAULT_UPDATE_LIMIT; }\n        // remove old\n        var keysToRemove = this.setKeysDifference(this.currentObjects, this.batchArgs, removeOldLimit);\n        keysToRemove.forEach(function (key) { return delete _this.currentObjects[key]; });\n        // remove ALL old objects not in batch\n        var keysToRemoveOld = this.setKeysDifference(this.oldObjects, this.batchArgs, -1);\n        keysToRemoveOld.forEach(function (key) { return delete _this.oldObjects[key]; });\n        // copy ALL old objects into current objects if not defined\n        var keysToShallowCopy = Object.keys(this.oldObjects);\n        keysToShallowCopy.forEach(function (key) {\n            if (_this.currentObjects[key] == null) {\n                _this.currentObjects[key] = _this.oldObjects[key];\n            }\n        });\n        // update old objects with factory\n        var keysToUpdate = this.setKeysIntersection(this.oldObjects, this.currentObjects, updateLimit);\n        keysToUpdate.forEach(function (key) {\n            delete _this.oldObjects[key];\n            _this.currentObjects[key] = callback.apply(undefined, _this.batchArgs[key]);\n        });\n        // add new objects with factory\n        var keysToAdd = this.setKeysDifference(this.batchArgs, this.currentObjects, addNewLimit);\n        keysToAdd.forEach(function (key) { return (_this.currentObjects[key] = callback.apply(undefined, _this.batchArgs[key])); });\n        // set `done` to true of sets match exactly after add/remove and there\n        // are no \"old objects\" remaining\n        this.done =\n            this.setHasSameKeys(this.batchArgs, this.currentObjects) && Object.keys(this.oldObjects).length === 0;\n    };\n    /**\n     * Returns true of the \"current\" set matches the \"batch\" set.\n     */\n    Batcher.prototype.isDone = function () {\n        return this.done;\n    };\n    /**\n     * Returns all the objects in the \"current\" set.\n     */\n    Batcher.prototype.getList = function () {\n        return Object.keys(this.currentObjects).map(this.mapCurrentObjectKey);\n    };\n    /**\n     * Registers a callback to be invoked on the next idle frame. If a callback\n     * has already been registered, we do not register a new one.\n     */\n    Batcher.prototype.idleCallback = function (callback) {\n        if (!this.callback) {\n            this.callback = callback;\n            requestIdleCallback(this.handleIdleCallback);\n        }\n    };\n    Batcher.prototype.cancelOutstandingCallback = function () {\n        delete this.callback;\n    };\n    /**\n     * Forcibly overwrites the current list of batched objects. Not recommended\n     * for normal usage.\n     */\n    Batcher.prototype.setList = function (objectsArgs, objects) {\n        var _this = this;\n        this.reset();\n        objectsArgs.forEach(function (args, i) {\n            _this.addArgsToBatch.apply(_this, args);\n            _this.currentObjects[_this.getKey(args)] = objects[i];\n        });\n        this.done = true;\n    };\n    Batcher.prototype.getKey = function (args) {\n        return args.join(Batcher.ARG_DELIMITER);\n    };\n    Batcher.prototype.setKeysDifference = function (a, b, limit) {\n        return this.setKeysOperation(a, b, \"difference\", limit);\n    };\n    Batcher.prototype.setKeysIntersection = function (a, b, limit) {\n        return this.setKeysOperation(a, b, \"intersect\", limit);\n    };\n    /**\n     * Compares the keys of A from B -- and performs an \"intersection\" or\n     * \"difference\" operation on the keys.\n     *\n     * Note that the order of operands A and B matters for the \"difference\"\n     * operation.\n     *\n     * Returns an array of at most `limit` keys.\n     */\n    Batcher.prototype.setKeysOperation = function (a, b, operation, limit) {\n        var result = [];\n        var aKeys = Object.keys(a);\n        for (var i = 0; i < aKeys.length && (limit < 0 || result.length < limit); i++) {\n            var key = aKeys[i];\n            if ((operation === \"difference\" && a[key] && !b[key]) || (operation === \"intersect\" && a[key] && b[key])) {\n                result.push(key);\n            }\n        }\n        return result;\n    };\n    /**\n     * Returns true of objects `a` and `b` have exactly the same keys.\n     */\n    Batcher.prototype.setHasSameKeys = function (a, b) {\n        var aKeys = Object.keys(a);\n        var bKeys = Object.keys(b);\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n        for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {\n            var aKey = aKeys_1[_i];\n            if (b[aKey] === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Batcher.DEFAULT_ADD_LIMIT = 20;\n    Batcher.DEFAULT_UPDATE_LIMIT = 20;\n    Batcher.DEFAULT_REMOVE_LIMIT = 20;\n    Batcher.ARG_DELIMITER = \"|\";\n    return Batcher;\n}());\nexport { Batcher };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport var TABLE_BODY = \"pt-table-body\";\nexport var TABLE_BODY_SCROLL_CLIENT = \"pt-table-body-scroll-client\";\nexport var TABLE_BODY_VIRTUAL_CLIENT = \"pt-table-body-virtual-client\";\nexport var TABLE_BOTTOM_CONTAINER = \"pt-table-bottom-container\";\nexport var TABLE_CELL = \"pt-table-cell\";\nexport var TABLE_CELL_CLIENT = \"pt-table-cell-client\";\nexport var TABLE_CELL_GHOST = \"pt-table-cell-ghost\";\nexport var TABLE_CELL_INTERACTIVE = \"pt-table-cell-interactive\";\nexport var TABLE_CELL_LEDGER_EVEN = \"pt-table-cell-ledger-even\";\nexport var TABLE_CELL_LEDGER_ODD = \"pt-table-cell-ledger-odd\";\nexport var TABLE_COLUMN_HEADER_TR = \"pt-table-column-header-tr\";\nexport var TABLE_COLUMN_HEADERS = \"pt-table-column-headers\";\nexport var TABLE_COLUMN_HEADER_CELL = \"pt-table-column-header-cell\";\nexport var TABLE_COLUMN_NAME = \"pt-table-column-name\";\nexport var TABLE_COLUMN_NAME_TEXT = \"pt-table-column-name-text\";\nexport var TABLE_CONTAINER = \"pt-table-container\";\nexport var TABLE_DRAGGING = \"pt-table-dragging\";\nexport var TABLE_EDITABLE_NAME = \"pt-table-editable-name\";\nexport var TABLE_EDITABLE_TEXT = \"pt-table-editable-text\";\nexport var TABLE_FOCUS_REGION = \"pt-table-focus-region\";\nexport var TABLE_HAS_INTERACTION_BAR = \"pt-table-has-interaction-bar\";\nexport var TABLE_HAS_REORDER_HANDLE = \"pt-table-has-reorder-handle\";\nexport var TABLE_HEADER = \"pt-table-header\";\nexport var TABLE_HEADER_ACTIVE = \"pt-table-header-active\";\nexport var TABLE_HEADER_CONTENT = \"pt-table-header-content\";\nexport var TABLE_HEADER_REORDERABLE = \"pt-table-header-reorderable\";\nexport var TABLE_HEADER_SELECTED = \"pt-table-header-selected\";\nexport var TABLE_HORIZONTAL_CELL_DIVIDER = \"pt-table-horizontal-cell-divider\";\nexport var TABLE_HORIZONTAL_GUIDE = \"pt-table-horizontal-guide\";\nexport var TABLE_INTERACTION_BAR = \"pt-table-interaction-bar\";\nexport var TABLE_LAST_IN_COLUMN = \"pt-table-last-in-column\";\nexport var TABLE_LAST_IN_ROW = \"pt-table-last-in-row\";\nexport var TABLE_MENU = \"pt-table-menu\";\nexport var TABLE_NO_HORIZONTAL_SCROLL = \"pt-table-no-horizontal-scroll\";\nexport var TABLE_NO_LAYOUT = \"pt-table-no-layout\";\nexport var TABLE_NO_ROWS = \"pt-table-no-rows\";\nexport var TABLE_NO_VERTICAL_SCROLL = \"pt-table-no-vertical-scroll\";\nexport var TABLE_NO_WRAP_TEXT = \"pt-table-no-wrap-text\";\nexport var TABLE_NULL = \"pt-table-null\";\nexport var TABLE_OVERLAY = \"pt-table-overlay\";\nexport var TABLE_OVERLAY_LAYER = \"pt-table-overlay-layer\";\nexport var TABLE_OVERLAY_REORDERING_CURSOR = \"pt-table-reordering-cursor-overlay\";\nexport var TABLE_POPOVER_WHITESPACE_NORMAL = \"pt-table-popover-whitespace-normal\";\nexport var TABLE_POPOVER_WHITESPACE_PRE = \"pt-table-popover-whitespace-pre\";\nexport var TABLE_QUADRANT = \"pt-table-quadrant\";\nexport var TABLE_QUADRANT_BODY_CONTAINER = \"pt-table-quadrant-body-container\";\nexport var TABLE_QUADRANT_LEFT = \"pt-table-quadrant-left\";\nexport var TABLE_QUADRANT_MAIN = \"pt-table-quadrant-main\";\nexport var TABLE_QUADRANT_SCROLL_CONTAINER = \"pt-table-quadrant-scroll-container\";\nexport var TABLE_QUADRANT_STACK = \"pt-table-quadrant-stack\";\nexport var TABLE_QUADRANT_TOP = \"pt-table-quadrant-top\";\nexport var TABLE_QUADRANT_TOP_LEFT = \"pt-table-quadrant-top-left\";\nexport var TABLE_REGION = \"pt-table-region\";\nexport var TABLE_REORDER_HANDLE = \"pt-table-reorder-handle\";\nexport var TABLE_REORDER_HANDLE_TARGET = \"pt-table-reorder-handle-target\";\nexport var TABLE_REORDERING = \"pt-table-reordering\";\nexport var TABLE_RESIZE_GUIDES = \"pt-table-resize-guides\";\nexport var TABLE_RESIZE_HANDLE = \"pt-table-resize-handle\";\nexport var TABLE_RESIZE_HANDLE_TARGET = \"pt-table-resize-handle-target\";\nexport var TABLE_RESIZE_HORIZONTAL = \"pt-table-resize-horizontal\";\nexport var TABLE_RESIZE_SENSOR = \"pt-table-resize-sensor\";\nexport var TABLE_RESIZE_SENSOR_EXPAND = \"pt-table-resize-sensor-expand\";\nexport var TABLE_RESIZE_SENSOR_SHRINK = \"pt-table-resize-sensor-shrink\";\nexport var TABLE_RESIZE_VERTICAL = \"pt-table-resize-vertical\";\nexport var TABLE_ROUNDED_LAYOUT = \"pt-table-rounded-layout\";\nexport var TABLE_ROW_HEADERS = \"pt-table-row-headers\";\nexport var TABLE_ROW_HEADERS_CELLS_CONTAINER = \"pt-table-row-headers-cells-container\";\nexport var TABLE_ROW_NAME = \"pt-table-row-name\";\nexport var TABLE_ROW_NAME_TEXT = \"pt-table-row-name-text\";\nexport var TABLE_SELECTION_ENABLED = \"pt-table-selection-enabled\";\nexport var TABLE_SELECTION_REGION = \"pt-table-selection-region\";\nexport var TABLE_TH_MENU = \"pt-table-th-menu\";\nexport var TABLE_TH_MENU_CONTAINER = \"pt-table-th-menu-container\";\nexport var TABLE_TH_MENU_CONTAINER_BACKGROUND = \"pt-table-th-menu-container-background\";\nexport var TABLE_TH_MENU_OPEN = \"pt-table-th-menu-open\";\nexport var TABLE_THEAD = \"pt-table-thead\";\nexport var TABLE_TOP_CONTAINER = \"pt-table-top-container\";\nexport var TABLE_TRUNCATED_CELL = \"pt-table-truncated-cell\";\nexport var TABLE_TRUNCATED_FORMAT = \"pt-table-truncated-format\";\nexport var TABLE_TRUNCATED_FORMAT_TEXT = \"pt-table-truncated-format-text\";\nexport var TABLE_TRUNCATED_POPOVER = \"pt-table-truncated-popover\";\nexport var TABLE_TRUNCATED_POPOVER_TARGET = \"pt-table-truncated-popover-target\";\nexport var TABLE_TRUNCATED_TEXT = \"pt-table-truncated-text\";\nexport var TABLE_TRUNCATED_VALUE = \"pt-table-truncated-value\";\nexport var TABLE_VERTICAL_GUIDE = \"pt-table-vertical-guide\";\n/** Common code for row and column index class generator functions, since they're essentially the same. */\nfunction dimensionIndexClass(classPrefix, index) {\n    if (index == null) {\n        return undefined;\n    }\n    if (typeof index === \"number\") {\n        return \"\" + classPrefix + index;\n    }\n    return index.indexOf(classPrefix) === 0 ? index : \"\" + classPrefix + index;\n}\n/** Return CSS class for table colummn index, whether or not 'pt-table-col-' prefix is included. */\nexport function columnIndexClass(columnIndex) {\n    return dimensionIndexClass(\"pt-table-col-\", columnIndex);\n}\n/** Return CSS class for table row index, whether or not 'pt-table-row-' prefix is included. */\nexport function rowIndexClass(rowIndex) {\n    return dimensionIndexClass(\"pt-table-row-\", rowIndex);\n}\n/** Return CSS class for table colummn cell index, whether or not 'pt-table-cell-col-' prefix is included. */\nexport function columnCellIndexClass(columnIndex) {\n    return dimensionIndexClass(\"pt-table-cell-col-\", columnIndex);\n}\n/** Return CSS class for table row cell index, whether or not 'pt-table-cell-row-' prefix is included. */\nexport function rowCellIndexClass(rowIndex) {\n    return dimensionIndexClass(\"pt-table-cell-row-\", rowIndex);\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n/* istanbul ignore next */\nexport var Clipboard = {\n    /**\n     * Overrides the inherited CSS of the element to make sure it is\n     * selectable. This method also makes the element pseudo-invisible.\n     */\n    applySelectableStyles: function (elem) {\n        elem.style.overflow = \"hidden\";\n        elem.style.height = \"0px\";\n        elem.style.setProperty(\"-webkit-user-select\", \"all\");\n        elem.style.setProperty(\"-moz-user-select\", \"all\");\n        elem.style.setProperty(\"-ms-user-select\", \"all\");\n        elem.style.setProperty(\"user-select\", \"all\");\n        return elem;\n    },\n    /**\n     * Copies table cells to the clipboard. The parameter is a row-major\n     * 2-dimensional `Array` of strings and can contain nulls. We assume all\n     * rows are the same length. If not, the cells will still be copied, but\n     * the columns may not align. Returns a boolean indicating whether the\n     * copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyCells: function (cells) {\n        var table = document.createElement(\"table\");\n        Clipboard.applySelectableStyles(table);\n        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n            var row = cells_1[_i];\n            var tr = table.appendChild(document.createElement(\"tr\"));\n            for (var _a = 0, row_1 = row; _a < row_1.length; _a++) {\n                var cell = row_1[_a];\n                var td = tr.appendChild(document.createElement(\"td\"));\n                td.textContent = cell;\n            }\n        }\n        var tsv = cells.map(function (row) { return row.join(\"\\t\"); }).join(\"\\n\");\n        return Clipboard.copyElement(table, tsv);\n    },\n    /**\n     * Copies the text to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyString: function (value) {\n        var text = document.createElement(\"textarea\");\n        Clipboard.applySelectableStyles(text);\n        text.value = value;\n        return Clipboard.copyElement(text, value);\n    },\n    /**\n     * Copies the element and its children to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * If a plaintext argument is supplied, we add both the text/html and\n     * text/plain mime types to the clipboard. This preserves the built in\n     * semantics of copying elements to the clipboard while allowing custom\n     * plaintext output for programs that can't cope with HTML data in the\n     * clipboard.\n     *\n     * Verified on Firefox 47, Chrome 51.\n     *\n     * Note: Sometimes the copy does not succeed. Presumably, in order to\n     * prevent memory issues, browsers will limit the total amount of data you\n     * can copy to the clipboard. Based on ad hoc testing, we found an\n     * inconsistent limit at about 300KB or 40,000 cells. Depending on the on\n     * the content of cells, your limits may vary.\n     */\n    copyElement: function (elem, plaintext) {\n        if (!Clipboard.isCopySupported()) {\n            return false;\n        }\n        // must be document.body instead of document.documentElement for firefox\n        document.body.appendChild(elem);\n        try {\n            window.getSelection().selectAllChildren(elem);\n            if (plaintext != null) {\n                // add plaintext fallback\n                // http://stackoverflow.com/questions/23211018/copy-to-clipboard-with-jquery-js-in-chrome\n                elem.addEventListener(\"copy\", function (e) {\n                    e.preventDefault();\n                    var clipboardData = e.clipboardData || window.clipboardData;\n                    if (clipboardData != null) {\n                        clipboardData.setData(\"text/html\", elem.outerHTML);\n                        clipboardData.setData(\"text/plain\", plaintext);\n                    }\n                });\n            }\n            return document.execCommand(\"copy\");\n        }\n        catch (err) {\n            return false;\n        }\n        finally {\n            document.body.removeChild(elem);\n        }\n    },\n    /**\n     * Returns a boolean indicating whether the current browser nominally\n     * supports the `copy` operation using the `execCommand` API.\n     */\n    isCopySupported: function () {\n        return document.queryCommandSupported != null && document.queryCommandSupported(\"copy\");\n    },\n};\n","/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as PropTypes from \"prop-types\";\nexport var columnInteractionBarContextTypes = {\n    enableColumnInteractionBar: PropTypes.bool,\n};\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { ContextMenuTarget } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n/**\n * Since the ContextMenuTarget uses the `onContextMenu` prop instead\n * `element.addEventListener`, the prop can be lost. This wrapper helps us\n * maintain context menu fuctionality when doing fancy React.cloneElement\n * chains.\n */\nvar ContextMenuTargetWrapper = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextMenuTargetWrapper, _super);\n    function ContextMenuTargetWrapper() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ContextMenuTargetWrapper.prototype.render = function () {\n        var _a = this.props, className = _a.className, children = _a.children, style = _a.style;\n        return (React.createElement(\"div\", { className: className, style: style }, children));\n    };\n    ContextMenuTargetWrapper.prototype.renderContextMenu = function (e) {\n        return this.props.renderContextMenu(e);\n    };\n    ContextMenuTargetWrapper = tslib_1.__decorate([\n        ContextMenuTarget\n    ], ContextMenuTargetWrapper);\n    return ContextMenuTargetWrapper;\n}(React.PureComponent));\nexport { ContextMenuTargetWrapper };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport var Direction;\n(function (Direction) {\n    Direction[\"UP\"] = \"up\";\n    Direction[\"DOWN\"] = \"down\";\n    Direction[\"LEFT\"] = \"left\";\n    Direction[\"RIGHT\"] = \"right\";\n})(Direction || (Direction = {}));\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar ns = \"[Blueprint Table]\";\n// const deprec = `${ns} DEPRECATION:`;\nexport var QUADRANT_ON_SCROLL_UNNECESSARILY_DEFINED = ns + \" <TableQuadrant> onScroll need not be defined for any quadrant aside from the MAIN quadrant.\";\nexport var TABLE_EXPAND_FOCUSED_REGION_MULTI_COLUMN_REGION = ns + \" <Table> Cannot expand a FULL_COLUMNS selection using a multi-column region.\";\nexport var TABLE_EXPAND_FOCUSED_REGION_MULTI_ROW_REGION = ns + \" <Table> Cannot expand a FULL_COLUMNS selection using a multi-row region.\";\nexport var TABLE_NON_COLUMN_CHILDREN_WARNING = ns + \" <Table> Children of Table must be Columns\\\"\";\nexport var TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING = ns +\n    \" <Table> numFrozenColumns must be in less than or equal to the number of columns. Clamping the value for you.\";\nexport var TABLE_NUM_FROZEN_COLUMNS_NEGATIVE = ns + \" <Table> requires numFrozenColumns to be greater than or equal to 0.\";\nexport var TABLE_NUM_FROZEN_ROWS_BOUND_WARNING = ns + \" <Table> numFrozenRows must be less than or equal to numRows. Clamping the value for you.\";\nexport var TABLE_NUM_FROZEN_ROWS_NEGATIVE = ns + \" <Table> requires numFrozenRows to be greater than or equal to 0.\";\nexport var TABLE_NUM_ROWS_ROW_HEIGHTS_MISMATCH = ns + \" <Table> requires rowHeights.length to equal numRows when both props are provided.\";\nexport var TABLE_NUM_ROWS_NEGATIVE = ns + \" <Table> requires numRows to be greater than or equal to 0.\";\nexport var TABLE_NUM_COLUMNS_COLUMN_WIDTHS_MISMATCH = ns + \" <Table> requires columnWidths.length to equal the number of <Column>s if provided.\";\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport * as Classes from \"./classes\";\nimport { Rect } from \"./rect\";\nimport { Utils } from \"./utils\";\n/**\n * This class manages the sizes of grid cells using arrays of individual row/column sizes.\n */\nvar Grid = /** @class */ (function () {\n    /**\n     * This constructor accumulates the heights and widths in `O(n)`, saving\n     * time in later calculations.\n     *\n     * @param bleed - The number of rows/cols that we expand beyond the\n     *     viewport (on all sides). This helps avoid displaying an empty\n     *     viewport when the user scrolls quickly.\n     */\n    function Grid(rowHeights, columnWidths, bleed, ghostHeight, ghostWidth) {\n        if (bleed === void 0) { bleed = Grid.DEFAULT_BLEED; }\n        if (ghostHeight === void 0) { ghostHeight = Grid.DEFAULT_GHOST_HEIGHT; }\n        if (ghostWidth === void 0) { ghostWidth = Grid.DEFAULT_GHOST_WIDTH; }\n        var _this = this;\n        this.getCumulativeWidthBefore = function (index) {\n            return index === 0 ? 0 : _this.getCumulativeWidthAt(index - 1);\n        };\n        this.getCumulativeWidthAt = function (index) {\n            if (_this.numCols === 0) {\n                return _this.ghostWidth * index;\n            }\n            else if (index >= _this.numCols) {\n                return _this.cumulativeColumnWidths[_this.numCols - 1] + _this.ghostWidth * (index - _this.numCols + 1);\n            }\n            else {\n                return _this.cumulativeColumnWidths[index];\n            }\n        };\n        this.getCumulativeHeightBefore = function (index) {\n            return index === 0 ? 0 : _this.getCumulativeHeightAt(index - 1);\n        };\n        this.getCumulativeHeightAt = function (index) {\n            if (_this.numRows === 0) {\n                return _this.ghostHeight * index;\n            }\n            else if (index >= _this.numRows) {\n                return _this.cumulativeRowHeights[_this.numRows - 1] + _this.ghostHeight * (index - _this.numRows + 1);\n            }\n            else {\n                return _this.cumulativeRowHeights[index];\n            }\n        };\n        this.columnWidths = columnWidths;\n        this.rowHeights = rowHeights;\n        this.cumulativeColumnWidths = Utils.accumulate(columnWidths);\n        this.cumulativeRowHeights = Utils.accumulate(rowHeights);\n        this.numCols = columnWidths.length;\n        this.numRows = rowHeights.length;\n        this.bleed = bleed;\n        this.ghostHeight = ghostHeight;\n        this.ghostWidth = ghostWidth;\n    }\n    /**\n     * Returns the `Rect` bounds of a cell in scrollpane client space.\n     *\n     * Scrollpane client coordinate space uses the origin of the scrollpane\n     * client (the inside part that you're moving around).\n     *\n     * For example, let's say you're scrolling around a block of 1000 x 1000\n     * cells. Regardless where you've scrolled, the first cell is always at\n     * 0,0 in scrollpane client space. the cell to the right of it is always\n     * at, e.g., 100,0.\n     */\n    Grid.prototype.getCellRect = function (rowIndex, columnIndex) {\n        var height = this.rowHeights[rowIndex];\n        var top = this.cumulativeRowHeights[rowIndex] - height;\n        var width = this.columnWidths[columnIndex];\n        var left = this.cumulativeColumnWidths[columnIndex] - width;\n        return new Rect(left, top, width, height);\n    };\n    /**\n     * Returns the `Rect` bounds of a cell in scrollpane client space.\n     *\n     * If the cell is beyond the bounds of the user-defined table cells, it is\n     * considered a \"ghost\" cell. If a width/height is not defined for that\n     * row/column, we use the default width/height.\n     */\n    Grid.prototype.getGhostCellRect = function (rowIndex, columnIndex) {\n        var left = 0;\n        var top = 0;\n        var width = 0;\n        var height = 0;\n        if (rowIndex >= this.rowHeights.length) {\n            height = this.ghostHeight;\n            top = this.getHeight() + this.ghostHeight * (rowIndex - this.numRows);\n        }\n        else {\n            height = this.rowHeights[rowIndex];\n            top = this.cumulativeRowHeights[rowIndex] - height;\n        }\n        if (columnIndex >= this.columnWidths.length) {\n            width = this.ghostWidth;\n            left = this.getWidth() + this.ghostWidth * (columnIndex - this.numCols);\n        }\n        else {\n            width = this.columnWidths[columnIndex];\n            left = this.cumulativeColumnWidths[columnIndex] - width;\n        }\n        return new Rect(left, top, width, height);\n    };\n    /**\n     * Returns the `Rect` with the base coordinate and height of the specified row.\n     */\n    Grid.prototype.getRowRect = function (rowIndex) {\n        var height = this.rowHeights[rowIndex];\n        var top = this.cumulativeRowHeights[rowIndex] - height;\n        return new Rect(0, top, this.getWidth(), height);\n    };\n    /**\n     * Returns the `Rect` with the base coordinate and width of the specified column.\n     */\n    Grid.prototype.getColumnRect = function (columnIndex) {\n        var width = this.columnWidths[columnIndex];\n        var left = this.cumulativeColumnWidths[columnIndex] - width;\n        return new Rect(left, 0, width, this.getHeight());\n    };\n    /**\n     * Returns the total width of the entire grid\n     */\n    Grid.prototype.getWidth = function () {\n        return this.numCols === 0 ? 0 : this.cumulativeColumnWidths[this.numCols - 1];\n    };\n    /**\n     * Returns the total width of the entire grid\n     */\n    Grid.prototype.getHeight = function () {\n        return this.numRows === 0 ? 0 : this.cumulativeRowHeights[this.numRows - 1];\n    };\n    /**\n     * Returns the `Rect` bounds of entire grid\n     */\n    Grid.prototype.getRect = function () {\n        return new Rect(0, 0, this.getWidth(), this.getHeight());\n    };\n    /**\n     * Maps each cell that intersects with the given `Rect` argument. The\n     * indices of iteration are extended in both directions by the integer\n     * `bleed` class property, then are clamped between 0 and the number of\n     * rows/columns.\n     *\n     * Uses a binary search for each of the 4 edges of the bounds, resulting\n     * in a runtime of `O(log(rows) + log(cols))` plus the `O(irows * icols)`\n     * iteration of intersecting cells.\n     */\n    Grid.prototype.mapCellsInRect = function (rect, callback) {\n        var results = [];\n        if (rect == null) {\n            return results;\n        }\n        var _a = this.getRowIndicesInRect(rect), rowIndexStart = _a.rowIndexStart, rowIndexEnd = _a.rowIndexEnd;\n        var _b = this.getColumnIndicesInRect(rect), columnIndexStart = _b.columnIndexStart, columnIndexEnd = _b.columnIndexEnd;\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n                results.push(callback(rowIndex, columnIndex));\n            }\n        }\n        return results;\n    };\n    /**\n     * Maps each row that intersects with the given `Rect` argument.\n     *\n     * See Grid.mapCellsInRect for more details.\n     */\n    Grid.prototype.mapRowsInRect = function (rect, callback) {\n        var results = [];\n        if (rect == null) {\n            return results;\n        }\n        var _a = this.getRowIndicesInRect(rect), rowIndexStart = _a.rowIndexStart, rowIndexEnd = _a.rowIndexEnd;\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            results.push(callback(rowIndex));\n        }\n        return results;\n    };\n    /**\n     * Maps each column that intersects with the given `Rect` argument.\n     *\n     * See Grid.mapCellsInRect for more details.\n     */\n    Grid.prototype.mapColumnsInRect = function (rect, callback) {\n        var results = [];\n        if (rect == null) {\n            return results;\n        }\n        var _a = this.getColumnIndicesInRect(rect), columnIndexStart = _a.columnIndexStart, columnIndexEnd = _a.columnIndexEnd;\n        for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n            results.push(callback(columnIndex));\n        }\n        return results;\n    };\n    /**\n     * Returns the start and end indices of rows that intersect with the given\n     * `Rect` argument.\n     */\n    Grid.prototype.getRowIndicesInRect = function (rect, includeGhostCells, limit) {\n        if (includeGhostCells === void 0) { includeGhostCells = false; }\n        if (limit === void 0) { limit = Grid.DEFAULT_MAX_ROWS; }\n        if (rect == null) {\n            return { rowIndexEnd: 0, rowIndexStart: 0 };\n        }\n        var searchEnd = includeGhostCells ? Math.max(this.numRows, Grid.DEFAULT_MAX_ROWS) : this.numRows;\n        var _a = this.getIndicesInInterval(rect.top, rect.top + rect.height, searchEnd, !includeGhostCells, this.getCumulativeHeightAt), start = _a.start, end = _a.end;\n        var rowIndexEnd = limit > 0 && end - start > limit ? start + limit : end;\n        return {\n            rowIndexEnd: rowIndexEnd,\n            rowIndexStart: start,\n        };\n    };\n    /**\n     * Returns the start and end indices of columns that intersect with the\n     * given `Rect` argument.\n     */\n    Grid.prototype.getColumnIndicesInRect = function (rect, includeGhostCells, limit) {\n        if (includeGhostCells === void 0) { includeGhostCells = false; }\n        if (limit === void 0) { limit = Grid.DEFAULT_MAX_COLUMNS; }\n        if (rect == null) {\n            return { columnIndexEnd: 0, columnIndexStart: 0 };\n        }\n        var searchEnd = includeGhostCells ? Math.max(this.numCols, Grid.DEFAULT_MAX_COLUMNS) : this.numCols;\n        var _a = this.getIndicesInInterval(rect.left, rect.left + rect.width, searchEnd, !includeGhostCells, this.getCumulativeWidthAt), start = _a.start, end = _a.end;\n        var columnIndexEnd = limit > 0 && end - start > limit ? start + limit : end;\n        return {\n            columnIndexEnd: columnIndexEnd,\n            columnIndexStart: start,\n        };\n    };\n    Grid.prototype.isGhostIndex = function (rowIndex, columnIndex) {\n        return rowIndex >= this.numRows || columnIndex >= this.numCols;\n    };\n    Grid.prototype.getExtremaClasses = function (rowIndex, columnIndex, rowEnd, columnEnd) {\n        if (rowIndex === rowEnd && columnIndex === columnEnd) {\n            return [Classes.TABLE_LAST_IN_COLUMN, Classes.TABLE_LAST_IN_ROW];\n        }\n        if (rowIndex === rowEnd) {\n            return [Classes.TABLE_LAST_IN_COLUMN];\n        }\n        if (columnIndex === columnEnd) {\n            return [Classes.TABLE_LAST_IN_ROW];\n        }\n        return [];\n    };\n    Grid.prototype.getRegionStyle = function (region) {\n        var cardinality = Regions.getRegionCardinality(region);\n        switch (cardinality) {\n            case RegionCardinality.CELLS: {\n                var _a = region.rows, rowStart = _a[0], rowEnd = _a[1];\n                var _b = region.cols, colStart = _b[0], colEnd = _b[1];\n                // if the region is outside the bounds of the table, don't display it\n                if (this.isGhostIndex(rowStart, colStart) || this.isGhostIndex(rowEnd, colEnd)) {\n                    return { display: \"none\" };\n                }\n                var cellRect0 = this.getCellRect(rowStart, colStart);\n                var cellRect1 = this.getCellRect(rowEnd, colEnd);\n                var offsetLeft = colStart === 0 ? 0 : 1;\n                var offsetTop = rowStart === 0 ? 0 : 1;\n                var rect = cellRect0.union(cellRect1);\n                rect.height += offsetTop;\n                rect.left -= offsetLeft;\n                rect.width += offsetLeft;\n                rect.top -= offsetTop;\n                return tslib_1.__assign({}, rect.style(), { display: \"block\" });\n            }\n            case RegionCardinality.FULL_COLUMNS: {\n                var _c = region.cols, colStart = _c[0], colEnd = _c[1];\n                // if the region is outside the bounds of the table, don't display it\n                if (this.isGhostIndex(0, colStart) || this.isGhostIndex(0, colEnd)) {\n                    return { display: \"none\" };\n                }\n                var cellRect0 = this.getCellRect(0, colStart);\n                var cellRect1 = this.getCellRect(0, colEnd);\n                var rect = cellRect0.union(cellRect1);\n                var offsetLeft = colStart === 0 ? 0 : 1;\n                return {\n                    bottom: 0,\n                    display: \"block\",\n                    left: rect.left - offsetLeft,\n                    top: 0,\n                    width: rect.width + offsetLeft,\n                };\n            }\n            case RegionCardinality.FULL_ROWS: {\n                var _d = region.rows, rowStart = _d[0], rowEnd = _d[1];\n                // if the region is outside the bounds of the table, don't display it\n                if (this.isGhostIndex(rowStart, 0) || this.isGhostIndex(rowEnd, 0)) {\n                    return { display: \"none\" };\n                }\n                var cellRect0 = this.getCellRect(rowStart, 0);\n                var cellRect1 = this.getCellRect(rowEnd, 0);\n                var rect = cellRect0.union(cellRect1);\n                var offsetTop = rowStart === 0 ? 0 : 1;\n                return {\n                    display: \"block\",\n                    height: rect.height + offsetTop,\n                    left: 0,\n                    right: 0,\n                    top: rect.top - offsetTop,\n                };\n            }\n            case RegionCardinality.FULL_TABLE:\n                return {\n                    bottom: 0,\n                    display: \"block\",\n                    left: 0,\n                    right: 0,\n                    top: 0,\n                };\n            default:\n                return { display: \"none\" };\n        }\n    };\n    Grid.prototype.getIndicesInInterval = function (min, max, count, useEndBleed, lookup) {\n        var start = Utils.binarySearch(min, count - 1, lookup);\n        var end = Utils.binarySearch(max, count - 1, lookup);\n        // correct exact pixel alignment\n        if (start >= 0 && min === lookup(start)) {\n            start += 1;\n        }\n        // apply bounded bleeds\n        start = Math.max(0, start - this.bleed);\n        if (useEndBleed) {\n            end = Math.min(count - 1, end + this.bleed);\n        }\n        else {\n            end = Math.min(count - 1, end);\n        }\n        return { start: start, end: end };\n    };\n    Grid.DEFAULT_BLEED = 3;\n    Grid.DEFAULT_MAX_COLUMNS = 50;\n    Grid.DEFAULT_MAX_ROWS = 200;\n    Grid.DEFAULT_GHOST_HEIGHT = 20;\n    Grid.DEFAULT_GHOST_WIDTH = 150;\n    return Grid;\n}());\nexport { Grid };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport { Clipboard } from \"./clipboard\";\nexport { Grid } from \"./grid\";\nexport { Rect } from \"./rect\";\nexport { RenderMode } from \"./renderMode\";\nexport { Utils } from \"./utils\";\n// NOTE: The following are not exported in the public API:\n// - Errors\n// - internal/\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { Direction } from \"../direction\";\nexport function directionToDelta(direction) {\n    switch (direction) {\n        case Direction.UP:\n            return { rows: -1, cols: 0 };\n        case Direction.DOWN:\n            return { rows: +1, cols: 0 };\n        case Direction.LEFT:\n            return { rows: 0, cols: -1 };\n        case Direction.RIGHT:\n            return { rows: 0, cols: +1 };\n        default:\n            return undefined;\n    }\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { RegionCardinality, Regions } from \"../../regions\";\nimport * as Errors from \"../errors\";\n/**\n * Returns the `focusedSelectionIndex` if both the focused cell and that\n * property are defined, or the last index of `selectedRegions` otherwise. If\n * `selectedRegions` is empty, the function always returns `undefined`.\n */\nexport function getFocusedOrLastSelectedIndex(selectedRegions, focusedCell) {\n    if (selectedRegions.length === 0) {\n        return undefined;\n    }\n    else if (focusedCell != null) {\n        return focusedCell.focusSelectionIndex;\n    }\n    else {\n        return selectedRegions.length - 1;\n    }\n}\n/**\n * Returns the proper focused cell for the given set of initial conditions.\n */\nexport function getInitialFocusedCell(enableFocusedCell, focusedCellFromProps, focusedCellFromState, selectedRegions) {\n    if (!enableFocusedCell) {\n        return undefined;\n    }\n    else if (focusedCellFromProps != null) {\n        // controlled mode\n        return focusedCellFromProps;\n    }\n    else if (focusedCellFromState != null) {\n        // use the current focused cell from state\n        return focusedCellFromState;\n    }\n    else if (selectedRegions.length > 0) {\n        // focus the top-left cell of the last selection\n        var lastIndex = selectedRegions.length - 1;\n        return tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(selectedRegions[lastIndex]), { focusSelectionIndex: lastIndex });\n    }\n    else {\n        // focus the top-left cell of the table\n        return { col: 0, row: 0, focusSelectionIndex: 0 };\n    }\n}\n/**\n * Returns `true` if the focused cell is located along the top boundary of the\n * provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionTop(region, focusedCell) {\n    return region.rows != null && focusedCell.row === region.rows[0];\n}\n/**\n * Returns `true` if the focused cell is located along the bottom boundary of\n * the provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionBottom(region, focusedCell) {\n    return region.rows != null && focusedCell.row === region.rows[1];\n}\n/**\n * Returns `true` if the focused cell is located along the left boundary of the\n * provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionLeft(region, focusedCell) {\n    return region.cols != null && focusedCell.col === region.cols[0];\n}\n/**\n * Returns `true` if the focused cell is located along the right boundary of the\n * provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionRight(region, focusedCell) {\n    return region.cols != null && focusedCell.col === region.cols[1];\n}\n/**\n * Returns a new cell-coordinates object that includes a focusSelectionIndex property.\n * The returned object will have the proper IFocusedCellCoordinates type.\n */\nexport function toFullCoordinates(cellCoords, focusSelectionIndex) {\n    if (focusSelectionIndex === void 0) { focusSelectionIndex = 0; }\n    return tslib_1.__assign({}, cellCoords, { focusSelectionIndex: focusSelectionIndex });\n}\n/**\n * Expands an existing region to new region based on the current focused cell.\n * The focused cell is an invariant and should not move as a result of this\n * operation. This function is used, for instance, to expand a selected region\n * on shift+click.\n */\nexport function expandFocusedRegion(focusedCell, newRegion) {\n    switch (Regions.getRegionCardinality(newRegion)) {\n        case RegionCardinality.FULL_COLUMNS: {\n            var _a = getExpandedRegionIndices(focusedCell, newRegion, \"col\", \"cols\"), indexStart = _a[0], indexEnd = _a[1];\n            return Regions.column(indexStart, indexEnd);\n        }\n        case RegionCardinality.FULL_ROWS: {\n            var _b = getExpandedRegionIndices(focusedCell, newRegion, \"row\", \"rows\"), indexStart = _b[0], indexEnd = _b[1];\n            return Regions.row(indexStart, indexEnd);\n        }\n        case RegionCardinality.CELLS:\n            var _c = getExpandedRegionIndices(focusedCell, newRegion, \"row\", \"rows\"), rowIndexStart = _c[0], rowIndexEnd = _c[1];\n            var _d = getExpandedRegionIndices(focusedCell, newRegion, \"col\", \"cols\"), colIndexStart = _d[0], colIndexEnd = _d[1];\n            return Regions.cell(rowIndexStart, colIndexStart, rowIndexEnd, colIndexEnd);\n        default:\n            // i.e. `case RegionCardinality.FULL_TABLE:`\n            return Regions.table();\n    }\n}\nfunction getExpandedRegionIndices(focusedCell, newRegion, focusedCellDimension, regionDimension) {\n    var sourceIndex = focusedCell[focusedCellDimension];\n    var _a = newRegion[regionDimension], destinationIndex = _a[0], destinationIndexEnd = _a[1];\n    if (destinationIndex !== destinationIndexEnd) {\n        if (regionDimension === \"rows\") {\n            throw new Error(Errors.TABLE_EXPAND_FOCUSED_REGION_MULTI_ROW_REGION);\n        }\n        else if (regionDimension === \"cols\") {\n            throw new Error(Errors.TABLE_EXPAND_FOCUSED_REGION_MULTI_COLUMN_REGION);\n        }\n    }\n    return sourceIndex <= destinationIndex ? [sourceIndex, destinationIndex] : [destinationIndex, sourceIndex];\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n/**\n * Returns `true` if `navigator.platform` matches a known Mac platform, or\n * `false` otherwise.\n */\nexport function isMac(platformOverride) {\n    var platformActual = typeof navigator !== \"undefined\" ? navigator.platform : undefined;\n    var platform = platformOverride != null ? platformOverride : platformActual;\n    return platform == null ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}\n/**\n * Returns `true` if (1) the platform is Mac and the keypress includes the `cmd`\n * key, or (2) the platform is non-Mac and the keypress includes the `ctrl` key.\n */\nexport var isModKeyPressed = function (event, platformOverride) {\n    var isMacPlatform = isMac(platformOverride);\n    return (isMacPlatform && event.metaKey) || (!isMacPlatform && event.ctrlKey);\n};\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { RegionCardinality, Regions } from \"../../regions\";\n/**\n * Returns the scroll{Left,Top} offsets of the provided region based on its\n * cardinality.\n */\nexport function getScrollPositionForRegion(region, currScrollLeft, currScrollTop, getLeftOffset, getTopOffset, numFrozenRows, numFrozenColumns) {\n    if (numFrozenRows === void 0) { numFrozenRows = 0; }\n    if (numFrozenColumns === void 0) { numFrozenColumns = 0; }\n    var cardinality = Regions.getRegionCardinality(region);\n    var scrollTop = currScrollTop;\n    var scrollLeft = currScrollLeft;\n    // if these were max-frozen-index values, we would have added 1 before passing to the get*Offset\n    // functions, but the counts are already 1-indexed, so we can just pass those.\n    var frozenColumnsCumulativeWidth = getLeftOffset(numFrozenColumns);\n    var frozenRowsCumulativeHeight = getTopOffset(numFrozenRows);\n    switch (cardinality) {\n        case RegionCardinality.CELLS: {\n            // scroll to the top-left corner of the block of cells\n            var topOffset = getTopOffset(region.rows[0]);\n            var leftOffset = getLeftOffset(region.cols[0]);\n            scrollTop = getClampedScrollPosition(topOffset, frozenRowsCumulativeHeight);\n            scrollLeft = getClampedScrollPosition(leftOffset, frozenColumnsCumulativeWidth);\n            break;\n        }\n        case RegionCardinality.FULL_ROWS: {\n            // scroll to the top of the row block\n            var topOffset = getTopOffset(region.rows[0]);\n            scrollTop = getClampedScrollPosition(topOffset, frozenRowsCumulativeHeight);\n            break;\n        }\n        case RegionCardinality.FULL_COLUMNS: {\n            // scroll to the left side of the column block\n            var leftOffset = getLeftOffset(region.cols[0]);\n            scrollLeft = getClampedScrollPosition(leftOffset, frozenColumnsCumulativeWidth);\n            break;\n        }\n        default: {\n            // if it's a FULL_TABLE region, scroll back to the top-left cell of the table\n            scrollTop = 0;\n            scrollLeft = 0;\n            break;\n        }\n    }\n    return { scrollLeft: scrollLeft, scrollTop: scrollTop };\n}\n/**\n * Returns the thickness of the target scroll bar in pixels.\n * If the target scroll bar is not present, 0 is returned.\n */\nexport function measureScrollBarThickness(element, direction) {\n    // offset size includes the scroll bar. client size does not.\n    // the difference gives the thickness of the scroll bar.\n    return direction === \"horizontal\"\n        ? element.offsetHeight - element.clientHeight\n        : element.offsetWidth - element.clientWidth;\n}\n/**\n * Adjust the scroll position to align content just beyond the frozen region, if necessary.\n */\nfunction getClampedScrollPosition(scrollOffset, frozenRegionCumulativeSize) {\n    // if the new scroll offset falls within the frozen region, clamp it to 0\n    return Math.max(scrollOffset - frozenRegionCumulativeSize, 0);\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { RegionCardinality, Regions } from \"../../regions\";\nimport { Direction } from \"../direction\";\nimport * as DirectionUtils from \"./directionUtils\";\nimport * as FocusedCellUtils from \"./focusedCellUtils\";\n/**\n * Resizes the provided region by 1 row/column in the specified direction,\n * returning a new region instance. The region may either expand *or* contract\n * depending on the presence and location of the focused cell.\n *\n * If no focused cell is provided, the region will always be *expanded* in the\n * specified direction.\n *\n * If a focused cell *is* provided, the behavior will change depending on where\n * the focused cell is within the region:\n *\n *   1. If along a top/bottom boundary while resizing UP/DOWN, the resize will\n *      expand from or shrink to the focused cell (same if along a left/right\n *      boundary while moving LEFT/RIGHT).\n *   2. If *not* along a top/bottom boundary while resizing UP/DOWN (or if *not*\n *      along a left/right boundary while moving LEFT/RIGHT), the region will\n *      simply expand in the specified direction.\n *\n * Other notes:\n * - A CELLS region can be resized vertically or horizontally.\n * - A FULL_ROWS region can be resized only vertically.\n * - A FULL_COLUMNS region can be resized only horizontally.\n * - A FULL_TABLE region cannot be resized.\n *\n * This function does not clamp the indices of the returned region; that is the\n * responsibility of the caller.\n */\nexport function resizeRegion(region, direction, focusedCell) {\n    if (Regions.getRegionCardinality(region) === RegionCardinality.FULL_TABLE) {\n        // return the same instance to maintain referential integrity and\n        // possibly avoid unnecessary update lifecycles.\n        return region;\n    }\n    var nextRegion = Regions.copy(region);\n    var affectedRowIndex = 0;\n    var affectedColumnIndex = 0;\n    if (focusedCell != null) {\n        var isAtTop = FocusedCellUtils.isFocusedCellAtRegionTop(nextRegion, focusedCell);\n        var isAtBottom = FocusedCellUtils.isFocusedCellAtRegionBottom(nextRegion, focusedCell);\n        var isAtLeft = FocusedCellUtils.isFocusedCellAtRegionLeft(nextRegion, focusedCell);\n        var isAtRight = FocusedCellUtils.isFocusedCellAtRegionRight(nextRegion, focusedCell);\n        // the focused cell is found along the top and bottom boundary\n        // simultaneously when the region is 1 row tall. check for this and\n        // similar special cases.\n        if (direction === Direction.UP) {\n            affectedRowIndex = isAtTop && !isAtBottom ? 1 : 0;\n        }\n        else if (direction === Direction.DOWN) {\n            affectedRowIndex = isAtBottom && !isAtTop ? 0 : 1;\n        }\n        else if (direction === Direction.LEFT) {\n            affectedColumnIndex = isAtLeft && !isAtRight ? 1 : 0;\n        }\n        else {\n            // i.e. `Direction.RIGHT:`\n            affectedColumnIndex = isAtRight && !isAtLeft ? 0 : 1;\n        }\n    }\n    else {\n        // when there is no focused cell, expand in the specified direction.\n        affectedRowIndex = direction === Direction.DOWN ? 1 : 0;\n        affectedColumnIndex = direction === Direction.RIGHT ? 1 : 0;\n    }\n    var delta = DirectionUtils.directionToDelta(direction);\n    if (nextRegion.rows != null) {\n        nextRegion.rows[affectedRowIndex] += delta.rows;\n    }\n    if (nextRegion.cols != null) {\n        nextRegion.cols[affectedColumnIndex] += delta.cols;\n    }\n    // the new coordinates might be out of bounds. the caller is responsible for\n    // sanitizing the result.\n    return nextRegion;\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { Classes } from \"@blueprintjs/core\";\n// This class expects a single, non-string child.\nvar LoadableContent = /** @class */ (function (_super) {\n    tslib_1.__extends(LoadableContent, _super);\n    function LoadableContent(props) {\n        var _this = _super.call(this, props) || this;\n        _this.style = _this.calculateStyle(props.variableLength);\n        return _this;\n    }\n    LoadableContent.prototype.componentWillReceiveProps = function (nextProps) {\n        if ((!this.props.loading && nextProps.loading) || this.props.variableLength !== nextProps.variableLength) {\n            this.style = this.calculateStyle(nextProps.variableLength);\n        }\n    };\n    LoadableContent.prototype.render = function () {\n        if (this.props.loading) {\n            return React.createElement(\"div\", { className: Classes.SKELETON, style: this.style });\n        }\n        return React.Children.only(this.props.children);\n    };\n    LoadableContent.prototype.calculateStyle = function (variableLength) {\n        var skeletonLength = variableLength ? 75 - Math.floor(Math.random() * 11) * 5 : 100;\n        return { width: skeletonLength + \"%\" };\n    };\n    return LoadableContent;\n}(React.PureComponent));\nexport { LoadableContent };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n// HACKHACK: workaround for https://github.com/palantir/tslint/issues/1768\n// tslint:disable adjacent-overload-signatures\n/**\n * A simple object for storing the client bounds of HTMLElements. Since\n * ClientRects are immutable, this object enables editing and some simple\n * manipulation methods.\n */\nvar Rect = /** @class */ (function () {\n    function Rect(left, top, width, height) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Returns the smallest Rect that entirely contains the supplied rects\n     */\n    Rect.union = function (anyRect0, anyRect1) {\n        var rect0 = Rect.wrap(anyRect0);\n        var rect1 = Rect.wrap(anyRect1);\n        var top = Math.min(rect0.top, rect1.top);\n        var left = Math.min(rect0.left, rect1.left);\n        var bottom = Math.max(rect0.top + rect0.height, rect1.top + rect1.height);\n        var right = Math.max(rect0.left + rect0.width, rect1.left + rect1.width);\n        var height = bottom - top;\n        var width = right - left;\n        return new Rect(left, top, width, height);\n    };\n    /**\n     * Returns a new Rect that subtracts the origin of the second argument\n     * from the first.\n     */\n    Rect.subtractOrigin = function (anyRect0, anyRect1) {\n        var rect0 = Rect.wrap(anyRect0);\n        var rect1 = Rect.wrap(anyRect1);\n        return new Rect(rect0.left - rect1.left, rect0.top - rect1.top, rect0.width, rect0.height);\n    };\n    /**\n     * Returns the CSS properties representing the absolute positioning of\n     * this Rect.\n     */\n    Rect.style = function (rect) {\n        return {\n            height: rect.height + \"px\",\n            left: rect.left + \"px\",\n            position: \"absolute\",\n            top: rect.top + \"px\",\n            width: rect.width + \"px\",\n        };\n    };\n    /**\n     * Given a ClientRect or Rect object, returns a Rect object.\n     */\n    Rect.wrap = function (rect) {\n        if (rect instanceof Rect) {\n            return rect;\n        }\n        else {\n            return new Rect(rect.left, rect.top, rect.width, rect.height);\n        }\n    };\n    Rect.prototype.subtractOrigin = function (anyRect) {\n        return Rect.subtractOrigin(this, anyRect);\n    };\n    Rect.prototype.union = function (anyRect) {\n        return Rect.union(this, anyRect);\n    };\n    Rect.prototype.style = function () {\n        return Rect.style(this);\n    };\n    Rect.prototype.sizeStyle = function () {\n        return {\n            height: this.height + \"px\",\n            width: this.width + \"px\",\n        };\n    };\n    Rect.prototype.containsX = function (clientX) {\n        return clientX >= this.left && clientX <= this.left + this.width;\n    };\n    Rect.prototype.containsY = function (clientY) {\n        return clientY >= this.top && clientY <= this.top + this.height;\n    };\n    Rect.prototype.equals = function (rect) {\n        return (rect != null &&\n            this.left === rect.left &&\n            this.top === rect.top &&\n            this.width === rect.width &&\n            this.height === rect.height);\n    };\n    Rect.ORIGIN = new Rect(0, 0, 0, 0);\n    return Rect;\n}());\nexport { Rect };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport var RenderMode;\n(function (RenderMode) {\n    /**\n     * Renders cells in batches across multiple animation frames. This improves\n     * performance by spreading out work to keep a high FPS and avoid blocking\n     * the UI, but it also introduces a noticeable scan-line rendering artifact\n     * as successive batches of cells finish rendering.\n     */\n    RenderMode[\"BATCH\"] = \"batch\";\n    /**\n     * Renders all cells synchronously on initial mount, then renders cells in\n     * batches on successive updates (e.g. during scrolling). This helps to\n     * remove visual rendering artifacts when the table is first rendered,\n     * wihout slowing scrolling performance to a crawl.\n     */\n    RenderMode[\"BATCH_ON_UPDATE\"] = \"batch-on-update\";\n    /**\n     * Disables the batch-rendering behavior, rendering all cells synchronously\n     * at once. This may result in degraded performance on large tables and/or\n     * on tables with complex cells.\n     */\n    RenderMode[\"NONE\"] = \"none\";\n})(RenderMode || (RenderMode = {}));\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n/**\n * Event name for `postMessage`\n */\nvar MESSAGE_EVENT_DATA = \"blueprint-table-post-message\";\n/**\n * Object that holds state for managing idle callbacks\n */\nvar IDLE_STATE = {\n    callbacks: [],\n    triggered: false,\n};\nvar handleIdle = function (event) {\n    if (event.source !== window || event.data !== MESSAGE_EVENT_DATA) {\n        return;\n    }\n    IDLE_STATE.triggered = false;\n    var callback = null;\n    if (IDLE_STATE.callbacks.length > 0) {\n        callback = IDLE_STATE.callbacks.shift();\n    }\n    if (IDLE_STATE.callbacks.length > 0) {\n        triggerIdleFrame();\n    }\n    // finally, invoke the callback. exceptions will be propagated\n    if (callback) {\n        callback();\n    }\n};\n// check for window since we might be in a headless server environment\nif (typeof window !== \"undefined\") {\n    if (window.addEventListener != null) {\n        window.addEventListener(\"message\", handleIdle, false);\n    }\n}\nvar triggerIdleFrame = function () {\n    if (IDLE_STATE.triggered) {\n        return;\n    }\n    IDLE_STATE.triggered = true;\n    /**\n     * This is the magic that will wait for the browser to be \"idle\" before\n     * invoking the callback.\n     *\n     * First, we use nested calls to `requestAnimationFrame` which will cause\n     * the inner callback to be invoked on the NEXT FRAME.\n     *\n     * Then, we call to `postMessage` to invoke the `handleIdle` method only\n     * once the current stack frame is empty.\n     *\n     * With this approach, the idle callback will be invoked at most once per\n     * frame and only after the stack frame is empty.\n     */\n    requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n            postMessage(MESSAGE_EVENT_DATA, \"*\");\n        });\n    });\n};\n/**\n * Invokes the provided callback on the next available frame after the stack\n * frame is empty.\n *\n * At most one callback per frame is invoked, and the callback may be delayed\n * multiple frames until the page is idle.\n *\n * TODO: return a token from this method that allows you to cancel the callback\n * (otherwise the callback list may increase without bound).\n */\nexport var requestIdleCallback = function (callback) {\n    IDLE_STATE.callbacks.push(callback);\n    triggerIdleFrame();\n};\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT = \"bp-table-text-no-measure\";\n/**\n * Since Firefox doesn't provide a computed \"font\" property, we manually\n * construct it using the ordered properties that can be specifed in CSS.\n */\nvar CSS_FONT_PROPERTIES = [\"font-style\", \"font-variant\", \"font-weight\", \"font-size\", \"font-family\"];\nexport var Utils = {\n    /**\n     * Invokes the callback `n` times, collecting the results in an array, which\n     * is the return value. Similar to _.times\n     */\n    times: function (n, callback) {\n        if (n < 0) {\n            throw new Error(\"[Blueprint] times() cannot be called with negative numbers.\");\n        }\n        var result = Array(n);\n        for (var index = 0; index < n; index++) {\n            result[index] = callback(index);\n        }\n        return result;\n    },\n    /**\n     * Takes an array of numbers, returns an array of numbers of the same length in which each\n     * value is the sum of current and previous values in the input array.\n     *\n     * Example input:  [10, 20, 50]\n     *         output: [10, 30, 80]\n     */\n    accumulate: function (numbers) {\n        var result = [];\n        var sum = 0;\n        for (var _i = 0, numbers_1 = numbers; _i < numbers_1.length; _i++) {\n            var num = numbers_1[_i];\n            sum += num;\n            result.push(sum);\n        }\n        return result;\n    },\n    /**\n     * Returns traditional spreadsheet-style column names\n     * e.g. (A, B, ..., Z, AA, AB, ..., ZZ, AAA, AAB, ...).\n     *\n     * Note that this isn't technically mathematically equivalent to base 26 since\n     * there is no zero element.\n     */\n    toBase26Alpha: function (num) {\n        var str = \"\";\n        while (true) {\n            var letter = num % 26;\n            str = String.fromCharCode(65 + letter) + str;\n            num = num - letter;\n            if (num <= 0) {\n                return str;\n            }\n            num = num / 26 - 1;\n        }\n    },\n    /**\n     * Returns traditional spreadsheet-style cell names\n     * e.g. (A1, B2, ..., Z44, AA1) with rows 1-indexed.\n     */\n    toBase26CellName: function (rowIndex, columnIndex) {\n        return \"\" + Utils.toBase26Alpha(columnIndex) + (rowIndex + 1);\n    },\n    /**\n     * Performs the binary search algorithm to find the index of the `value`\n     * parameter in a sorted list of numbers. If `value` is not in the list, the\n     * index where `value` can be inserted to maintain the sort is returned.\n     *\n     * Unlike a typical binary search implementation, we use a `lookup`\n     * callback to access the sorted list of numbers instead of an array. This\n     * avoids additional storage overhead.\n     *\n     * We use this to, for example, find the index of a row/col given its client\n     * coordinate.\n     *\n     * Adapted from lodash https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L3579\n     *\n     * @param value - the query value\n     * @param high - the length of the sorted list of numbers\n     * @param lookup - returns the number from the list at the supplied index\n     */\n    binarySearch: function (value, high, lookup) {\n        var low = 0;\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2.0);\n            var computed = lookup(mid);\n            if (computed < value) {\n                low = mid + 1;\n            }\n            else {\n                high = mid;\n            }\n        }\n        return high;\n    },\n    /**\n     * Returns a copy of the array that will have a length of the supplied parameter.\n     * If the array is too long, it will be truncated. If it is too short, it will be\n     * filled with the suppleid `fillValue` argument.\n     *\n     * @param array - the `Array` to copy and adjust\n     * @param length - the target length of the array\n     * @param fillValue - the value to add to the array if it is too short\n     */\n    arrayOfLength: function (array, length, fillValue) {\n        if (array.length > length) {\n            return array.slice(0, length);\n        }\n        array = array.slice();\n        while (array.length < length) {\n            array.push(fillValue);\n        }\n        return array;\n    },\n    /**\n     * Takes in one full array of values and one sparse array of the same\n     * length and type. Returns a copy of the `defaults` array, where each\n     * value is replaced with the corresponding non-null value at the same\n     * index in `sparseOverrides`.\n     *\n     * @param defaults - the full array of default values\n     * @param sparseOverrides - the sparse array of override values\n     */\n    assignSparseValues: function (defaults, sparseOverrides) {\n        if (sparseOverrides == null || defaults.length !== sparseOverrides.length) {\n            return defaults;\n        }\n        defaults = defaults.slice();\n        for (var i = 0; i < defaults.length; i++) {\n            var override = sparseOverrides[i];\n            if (override != null) {\n                defaults[i] = override;\n            }\n        }\n        return defaults;\n    },\n    /**\n     * Measures the bounds of supplied element's textContent.\n     * We use the computed font from the supplied element and a non-DOM canvas\n     * context to measure the text.\n     */\n    measureElementTextContent: function (element) {\n        var context = document.createElement(\"canvas\").getContext(\"2d\");\n        var style = getComputedStyle(element, null);\n        context.font = CSS_FONT_PROPERTIES.map(function (prop) { return style.getPropertyValue(prop); }).join(\" \");\n        return measureTextContentWithExclusions(context, element);\n    },\n    /**\n     * Given a number, returns a value that is clamped within a\n     * minimum/maximum bounded range. The minimum and maximum are optional. If\n     * either is missing, that extrema limit is not applied.\n     *\n     * Assumes max >= min.\n     */\n    clamp: function (value, min, max) {\n        if (min != null && value < min) {\n            value = min;\n        }\n        if (max != null && value > max) {\n            value = max;\n        }\n        return value;\n    },\n    /**\n     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n     * at the absolute index in the original ordering but emit the new index in the reordered list.\n     * This function converts an absolute \"guide\" index to a relative \"reordered\" index.\n     *\n     * Example: Say we want to move the first three columns two spots to the right. While we drag, a\n     * vertical guide is shown to preview where we'll be dropping the columns. (In the following\n     * ASCII art, `*` denotes a selected column, `·` denotes a cell border, and `|` denotes a\n     * vertical guide).\n     *\n     *     Before mousedown:\n     *     · 0 · 1 · 2 · 3 · 4 · 5 ·\n     *       *   *   *\n     *\n     *     During mousemove two spots to the right:\n     *     · 0 · 1 · 2 · 3 · 4 | 5 ·\n     *       *   *   *\n     *\n     *     After mouseup:\n     *     · 3 · 4 · 0 · 1 · 2 · 5 ·\n     *               *   *   *\n     *\n     * Note that moving the three columns beyond index 4 effectively moves them two spots rightward.\n     *\n     * In this case, the inputs to this function would be:\n     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n     *     - newIndex: 5 (the index on whose left boundary the guide appears in the original ordering)\n     *     - length: 3 (the number of columns to move)\n     *\n     * The return value will then be 2, the left-most index of the columns in the new ordering.\n     */\n    guideIndexToReorderedIndex: function (oldIndex, newIndex, length) {\n        if (newIndex < oldIndex) {\n            return newIndex;\n        }\n        else if (oldIndex <= newIndex && newIndex < oldIndex + length) {\n            return oldIndex;\n        }\n        else {\n            return Math.max(0, newIndex - length);\n        }\n    },\n    /**\n     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n     * at the absolute index in the original ordering but emit the new index in the reordered list.\n     * This function converts a relative \"reordered\"\" index to an absolute \"guide\" index.\n     *\n     * For the scenario in the example above, the inputs to this function would be:\n     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n     *     - newIndex: 2 (the left-most index of the selected column range in the new ordering)\n     *     - length: 3 (the number of columns to move)\n     *\n     * The return value will then be 5, the index on whose left boundary the guide should appear in\n     * the original ordering.\n     */\n    reorderedIndexToGuideIndex: function (oldIndex, newIndex, length) {\n        return newIndex <= oldIndex ? newIndex : newIndex + length;\n    },\n    /**\n     * Returns a copy of the provided array with the `length` contiguous elements starting at the\n     * `from` index reordered to start at the `to` index.\n     *\n     * For example, given the array [A,B,C,D,E,F], reordering the 3 contiguous elements starting at\n     * index 1 (B, C, and D) to start at index 2 would yield [A,E,B,C,D,F].\n     */\n    reorderArray: function (array, from, to, length) {\n        if (length === void 0) { length = 1; }\n        if (length === 0 || length === array.length || from === to) {\n            // return an unchanged copy\n            return array.slice();\n        }\n        if (length < 0 || length > array.length || from + length > array.length) {\n            return undefined;\n        }\n        var before = array.slice(0, from);\n        var within = array.slice(from, from + length);\n        var after = array.slice(from + length);\n        var result = [];\n        var i = 0;\n        var b = 0;\n        var w = 0;\n        var a = 0;\n        while (i < to) {\n            if (b < before.length) {\n                result.push(before[b]);\n                b += 1;\n            }\n            else {\n                result.push(after[a]);\n                a += 1;\n            }\n            i += 1;\n        }\n        while (w < length) {\n            result.push(within[w]);\n            w += 1;\n            i += 1;\n        }\n        while (i < array.length) {\n            if (b < before.length) {\n                result.push(before[b]);\n                b += 1;\n            }\n            else {\n                result.push(after[a]);\n                a += 1;\n            }\n            i += 1;\n        }\n        return result;\n    },\n    /**\n     * Returns true if the mouse event was triggered by the left mouse button.\n     */\n    isLeftClick: function (event) {\n        return event.button === 0;\n    },\n    getApproxCellHeight: function (cellText, columnWidth, approxCharWidth, approxLineHeight, horizontalPadding, numBufferLines) {\n        var numCharsInCell = cellText == null ? 0 : cellText.length;\n        var actualCellWidth = columnWidth;\n        var availableCellWidth = actualCellWidth - horizontalPadding;\n        var approxCharsPerLine = availableCellWidth / approxCharWidth;\n        var approxNumLinesDesired = Math.ceil(numCharsInCell / approxCharsPerLine) + numBufferLines;\n        var approxCellHeight = approxNumLinesDesired * approxLineHeight;\n        return approxCellHeight;\n    },\n};\n/**\n * Wrapper around Canvas measureText which applies some extra logic to optionally\n * exclude an element's text from the computation.\n */\nfunction measureTextContentWithExclusions(context, element) {\n    // We only expect one or zero excluded elements in this subtree\n    // We don't have a need for more than one, so we avoid that complexity altogether.\n    var elementToExclude = element.querySelector(\".\" + CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT);\n    var removedElementParent;\n    var removedElementNextSibling;\n    if (elementToExclude != null) {\n        removedElementParent = elementToExclude.parentElement;\n        removedElementNextSibling = elementToExclude.nextSibling;\n        removedElementParent.removeChild(elementToExclude);\n    }\n    var metrics = context.measureText(element.textContent);\n    if (elementToExclude != null) {\n        removedElementParent.insertBefore(elementToExclude, removedElementNextSibling);\n    }\n    return metrics;\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/index\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { ColumnHeaderCell } from \"./columnHeaderCell\";\nimport { Header } from \"./header\";\nvar ColumnHeader = /** @class */ (function (_super) {\n    tslib_1.__extends(ColumnHeader, _super);\n    function ColumnHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.wrapCells = function (cells) {\n            var _a = _this.props, columnIndexStart = _a.columnIndexStart, grid = _a.grid;\n            var tableWidth = grid.getRect().width;\n            var scrollLeftCorrection = _this.props.grid.getCumulativeWidthBefore(columnIndexStart);\n            var style = {\n                // only header cells in view will render, but we need to reposition them to stay in view\n                // as we scroll horizontally.\n                transform: \"translateX(\" + (scrollLeftCorrection || 0) + \"px)\",\n                // reduce the width to clamp the sliding window as we approach the final headers; otherwise,\n                // we'll have tons of useless whitespace at the end.\n                width: tableWidth - scrollLeftCorrection,\n            };\n            var classes = classNames(Classes.TABLE_THEAD, Classes.TABLE_COLUMN_HEADER_TR);\n            // add a wrapper set to the full-table width to ensure container styles stretch from the first\n            // cell all the way to the last\n            return (React.createElement(\"div\", { style: { width: tableWidth } },\n                React.createElement(\"div\", { style: style, className: classes, ref: _this.props.measurableElementRef }, cells)));\n        };\n        _this.convertPointToColumn = function (clientXOrY, useMidpoint) {\n            var locator = _this.props.locator;\n            return locator != null ? locator.convertPointToColumn(clientXOrY, useMidpoint) : null;\n        };\n        _this.getCellExtremaClasses = function (index, indexEnd) {\n            return _this.props.grid.getExtremaClasses(0, index, 1, indexEnd);\n        };\n        _this.getColumnWidth = function (index) {\n            return _this.props.grid.getColumnRect(index).width;\n        };\n        _this.getDragCoordinate = function (clientCoords) {\n            return clientCoords[0]; // x-coordinate\n        };\n        _this.getMouseCoordinate = function (event) {\n            return event.clientX;\n        };\n        _this.handleResizeEnd = function (index, size) {\n            _this.props.onResizeGuide(null);\n            _this.props.onColumnWidthChanged(index, size);\n        };\n        _this.handleResizeDoubleClick = function (index) {\n            var _a = _this.props, minColumnWidth = _a.minColumnWidth, maxColumnWidth = _a.maxColumnWidth;\n            var width = _this.props.locator.getWidestVisibleCellInColumn(index);\n            var clampedWidth = Utils.clamp(width, minColumnWidth, maxColumnWidth);\n            _this.props.onResizeGuide(null);\n            _this.props.onColumnWidthChanged(index, clampedWidth);\n        };\n        _this.handleSizeChanged = function (index, size) {\n            var rect = _this.props.grid.getColumnRect(index);\n            _this.props.onResizeGuide([rect.left + size]);\n        };\n        _this.isCellSelected = function (index) {\n            return Regions.hasFullColumn(_this.props.selectedRegions, index);\n        };\n        _this.isGhostIndex = function (index) {\n            return _this.props.grid.isGhostIndex(-1, index);\n        };\n        _this.renderGhostCell = function (index, extremaClasses) {\n            var _a = _this.props, grid = _a.grid, loading = _a.loading;\n            var rect = grid.getGhostCellRect(0, index);\n            var style = {\n                flexBasis: rect.width + \"px\",\n                width: rect.width + \"px\",\n            };\n            return (React.createElement(ColumnHeaderCell, { className: classNames(extremaClasses), index: index, key: Classes.columnIndexClass(index), loading: loading, style: style }));\n        };\n        _this.toRegion = function (index1, index2) {\n            return Regions.column(index1, index2);\n        };\n        return _this;\n    }\n    ColumnHeader.prototype.render = function () {\n        var _a = this.props, \n        // from IColumnHeaderProps\n        renderHeaderCell = _a.cellRenderer, onColumnWidthChanged = _a.onColumnWidthChanged, \n        // from IColumnWidths\n        minSize = _a.minColumnWidth, maxSize = _a.maxColumnWidth, defaultColumnWidth = _a.defaultColumnWidth, \n        // from IColumnIndices\n        indexStart = _a.columnIndexStart, indexEnd = _a.columnIndexEnd, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"cellRenderer\", \"onColumnWidthChanged\", \"minColumnWidth\", \"maxColumnWidth\", \"defaultColumnWidth\", \"columnIndexStart\", \"columnIndexEnd\"]);\n        return (React.createElement(Header, tslib_1.__assign({ convertPointToIndex: this.convertPointToColumn, fullRegionCardinality: RegionCardinality.FULL_COLUMNS, getCellExtremaClasses: this.getCellExtremaClasses, getCellIndexClass: Classes.columnCellIndexClass, getCellSize: this.getColumnWidth, getDragCoordinate: this.getDragCoordinate, getIndexClass: Classes.columnIndexClass, getMouseCoordinate: this.getMouseCoordinate, ghostCellRenderer: this.renderGhostCell, handleResizeDoubleClick: this.handleResizeDoubleClick, handleResizeEnd: this.handleResizeEnd, handleSizeChanged: this.handleSizeChanged, headerCellIsReorderablePropName: \"enableColumnReordering\", headerCellIsSelectedPropName: \"isColumnSelected\", headerCellRenderer: renderHeaderCell, indexEnd: indexEnd, indexStart: indexStart, isCellSelected: this.isCellSelected, isGhostIndex: this.isGhostIndex, maxSize: maxSize, minSize: minSize, resizeOrientation: Orientation.VERTICAL, selectedRegions: [], toRegion: this.toRegion, wrapCells: this.wrapCells }, spreadableProps)));\n    };\n    ColumnHeader.defaultProps = {\n        isReorderable: false,\n        isResizable: true,\n        loading: false,\n    };\n    return ColumnHeader;\n}(React.Component));\nexport { ColumnHeader };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, Icon, Popover, Position, Utils as CoreUtils, } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { columnInteractionBarContextTypes } from \"../common/context\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { HeaderCell } from \"./headerCell\";\nexport function HorizontalCellDivider() {\n    return React.createElement(\"div\", { className: Classes.TABLE_HORIZONTAL_CELL_DIVIDER });\n}\nvar ColumnHeaderCell = /** @class */ (function (_super) {\n    tslib_1.__extends(ColumnHeaderCell, _super);\n    function ColumnHeaderCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isActive: false,\n        };\n        _this.handlePopoverDidOpen = function () {\n            _this.setState({ isActive: true });\n        };\n        _this.handlePopoverWillClose = function () {\n            _this.setState({ isActive: false });\n        };\n        return _this;\n    }\n    /**\n     * This method determines if a `MouseEvent` was triggered on a target that\n     * should be used as the header click/drag target. This enables users of\n     * this component to render fully interactive components in their header\n     * cells without worry of selection or resize operations from capturing\n     * their mouse events.\n     */\n    ColumnHeaderCell.isHeaderMouseTarget = function (target) {\n        return (target.classList.contains(Classes.TABLE_HEADER) ||\n            target.classList.contains(Classes.TABLE_COLUMN_NAME) ||\n            target.classList.contains(Classes.TABLE_INTERACTION_BAR) ||\n            target.classList.contains(Classes.TABLE_HEADER_CONTENT));\n    };\n    ColumnHeaderCell.prototype.render = function () {\n        var _a = this.props, \n        // from IColumnHeaderCellProps\n        enableColumnReordering = _a.enableColumnReordering, isColumnSelected = _a.isColumnSelected, menuIcon = _a.menuIcon, \n        // from IColumnNameProps\n        name = _a.name, nameRenderer = _a.nameRenderer, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"enableColumnReordering\", \"isColumnSelected\", \"menuIcon\", \"name\", \"nameRenderer\"]);\n        var classes = classNames(spreadableProps.className, Classes.TABLE_COLUMN_HEADER_CELL, (_b = {},\n            _b[Classes.TABLE_HAS_INTERACTION_BAR] = this.context.enableColumnInteractionBar,\n            _b[Classes.TABLE_HAS_REORDER_HANDLE] = this.props.reorderHandle != null,\n            _b));\n        return (React.createElement(HeaderCell, tslib_1.__assign({ isReorderable: this.props.enableColumnReordering, isSelected: this.props.isColumnSelected }, spreadableProps, { className: classes }),\n            this.renderName(),\n            this.maybeRenderContent(),\n            this.props.loading ? undefined : this.props.resizeHandle));\n        var _b;\n    };\n    ColumnHeaderCell.prototype.renderName = function () {\n        var _a = this.props, index = _a.index, loading = _a.loading, name = _a.name, nameRenderer = _a.nameRenderer, reorderHandle = _a.reorderHandle;\n        var dropdownMenu = this.maybeRenderDropdownMenu();\n        var defaultName = React.createElement(\"div\", { className: Classes.TABLE_TRUNCATED_TEXT }, name);\n        var nameComponent = (React.createElement(LoadableContent, { loading: loading, variableLength: true }, nameRenderer == null\n            ? defaultName\n            : React.cloneElement(nameRenderer(name, index), { index: index })));\n        if (this.context.enableColumnInteractionBar) {\n            return (React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME, title: name },\n                React.createElement(\"div\", { className: Classes.TABLE_INTERACTION_BAR },\n                    reorderHandle,\n                    dropdownMenu),\n                React.createElement(HorizontalCellDivider, null),\n                React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME_TEXT }, nameComponent)));\n        }\n        else {\n            return (React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME, title: name },\n                reorderHandle,\n                dropdownMenu,\n                React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME_TEXT }, nameComponent)));\n        }\n    };\n    ColumnHeaderCell.prototype.maybeRenderContent = function () {\n        if (this.props.children === null) {\n            return undefined;\n        }\n        return React.createElement(\"div\", { className: Classes.TABLE_HEADER_CONTENT }, this.props.children);\n    };\n    ColumnHeaderCell.prototype.maybeRenderDropdownMenu = function () {\n        var _a = this.props, index = _a.index, menuIcon = _a.menuIcon, menuRenderer = _a.menuRenderer;\n        if (!CoreUtils.isFunction(menuRenderer)) {\n            return undefined;\n        }\n        var classes = classNames(Classes.TABLE_TH_MENU_CONTAINER, (_b = {},\n            _b[Classes.TABLE_TH_MENU_OPEN] = this.state.isActive,\n            _b));\n        return (React.createElement(\"div\", { className: classes },\n            React.createElement(\"div\", { className: Classes.TABLE_TH_MENU_CONTAINER_BACKGROUND }),\n            React.createElement(Popover, { content: menuRenderer(index), position: Position.BOTTOM, className: Classes.TABLE_TH_MENU, modifiers: { preventOverflow: { boundariesElement: \"window\" } }, popoverDidOpen: this.handlePopoverDidOpen, popoverWillClose: this.handlePopoverWillClose },\n                React.createElement(Icon, { icon: menuIcon }))));\n        var _b;\n    };\n    ColumnHeaderCell.defaultProps = {\n        isActive: false,\n        menuIcon: \"chevron-down\",\n    };\n    ColumnHeaderCell.contextTypes = columnInteractionBarContextTypes;\n    return ColumnHeaderCell;\n}(AbstractPureComponent));\nexport { ColumnHeaderCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EditableText, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nvar EditableName = /** @class */ (function (_super) {\n    tslib_1.__extends(EditableName, _super);\n    function EditableName(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.handleEdit = function () {\n            _this.setState({ isEditing: true, dirtyName: _this.state.savedName });\n        };\n        _this.handleCancel = function (value) {\n            // don't strictly need to clear the dirtyName, but it's better hygiene\n            _this.setState({ isEditing: false, dirtyName: undefined });\n            _this.invokeCallback(_this.props.onCancel, value);\n        };\n        _this.handleChange = function (value) {\n            _this.setState({ dirtyName: value });\n            _this.invokeCallback(_this.props.onChange, value);\n        };\n        _this.handleConfirm = function (value) {\n            _this.setState({ isEditing: false, savedName: value, dirtyName: undefined });\n            _this.invokeCallback(_this.props.onConfirm, value);\n        };\n        _this.state = {\n            dirtyName: props.name,\n            isEditing: false,\n            savedName: props.name,\n        };\n        return _this;\n    }\n    EditableName.prototype.componentWillReceiveProps = function (nextProps) {\n        var name = nextProps.name;\n        if (name !== this.props.name) {\n            this.setState({ savedName: name, dirtyName: name });\n        }\n    };\n    EditableName.prototype.render = function () {\n        var _a = this.props, className = _a.className, intent = _a.intent, name = _a.name;\n        var _b = this.state, isEditing = _b.isEditing, dirtyName = _b.dirtyName, savedName = _b.savedName;\n        return (React.createElement(EditableText, { className: classNames(className, Classes.TABLE_EDITABLE_NAME), defaultValue: name, intent: intent, minWidth: null, onCancel: this.handleCancel, onChange: this.handleChange, onConfirm: this.handleConfirm, onEdit: this.handleEdit, placeholder: \"\", selectAllOnFocus: true, value: isEditing ? dirtyName : savedName }));\n    };\n    EditableName.prototype.invokeCallback = function (callback, value) {\n        var index = this.props.index;\n        CoreUtils.safeInvoke(callback, value, index);\n    };\n    return EditableName;\n}(React.PureComponent));\nexport { EditableName };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Icon, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { DragEvents } from \"../interactions/dragEvents\";\nimport { DragReorderable } from \"../interactions/reorderable\";\nimport { Resizable } from \"../interactions/resizable\";\nimport { DragSelectable } from \"../interactions/selectable\";\nimport { RegionCardinality, Regions } from \"../regions\";\nvar SHALLOW_COMPARE_PROP_KEYS_BLACKLIST = [\"focusedCell\", \"selectedRegions\"];\nvar Header = /** @class */ (function (_super) {\n    tslib_1.__extends(Header, _super);\n    function Header(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.convertEventToIndex = function (event) {\n            var coord = _this.props.getMouseCoordinate(event);\n            return _this.props.convertPointToIndex(coord);\n        };\n        _this.locateClick = function (event) {\n            _this.activationIndex = _this.convertEventToIndex(event);\n            return _this.props.toRegion(_this.activationIndex);\n        };\n        _this.locateDragForSelection = function (_event, coords, returnEndOnly) {\n            if (returnEndOnly === void 0) { returnEndOnly = false; }\n            var coord = _this.props.getDragCoordinate(coords.current);\n            var indexStart = _this.activationIndex;\n            var indexEnd = _this.props.convertPointToIndex(coord);\n            return returnEndOnly ? _this.props.toRegion(indexEnd) : _this.props.toRegion(indexStart, indexEnd);\n        };\n        _this.locateDragForReordering = function (_event, coords) {\n            var coord = _this.props.getDragCoordinate(coords.current);\n            var guideIndex = _this.props.convertPointToIndex(coord, true);\n            return guideIndex < 0 ? undefined : guideIndex;\n        };\n        _this.renderCells = function () {\n            var _a = _this.props, indexStart = _a.indexStart, indexEnd = _a.indexEnd;\n            var cells = [];\n            for (var index = indexStart; index <= indexEnd; index++) {\n                cells.push(_this.renderNewCell(index));\n            }\n            return cells;\n        };\n        _this.renderNewCell = function (index) {\n            var extremaClasses = _this.props.getCellExtremaClasses(index, _this.props.indexEnd);\n            var renderer = _this.props.isGhostIndex(index) ? _this.props.ghostCellRenderer : _this.renderCell;\n            return renderer(index, extremaClasses);\n        };\n        _this.renderCell = function (index, extremaClasses) {\n            var _a = _this.props, getIndexClass = _a.getIndexClass, selectedRegions = _a.selectedRegions;\n            var cell = _this.props.headerCellRenderer(index);\n            var isLoading = cell.props.loading != null ? cell.props.loading : _this.props.loading;\n            var isSelected = _this.props.isCellSelected(index);\n            var isEntireCellTargetReorderable = _this.isEntireCellTargetReorderable(index);\n            var className = classNames(extremaClasses, (_b = {},\n                _b[Classes.TABLE_HEADER_REORDERABLE] = isEntireCellTargetReorderable,\n                _b), _this.props.getCellIndexClass(index), cell.props.className);\n            var cellProps = (_c = {\n                    className: className,\n                    index: index\n                },\n                _c[_this.props.headerCellIsSelectedPropName] = isSelected,\n                _c[_this.props.headerCellIsReorderablePropName] = isEntireCellTargetReorderable,\n                _c.loading = isLoading,\n                _c.reorderHandle = _this.maybeRenderReorderHandle(index),\n                _c);\n            var modifiedHandleSizeChanged = function (size) { return _this.props.handleSizeChanged(index, size); };\n            var modifiedHandleResizeEnd = function (size) { return _this.props.handleResizeEnd(index, size); };\n            var modifiedHandleResizeHandleDoubleClick = function () {\n                return CoreUtils.safeInvoke(_this.props.handleResizeDoubleClick, index);\n            };\n            var baseChildren = (React.createElement(DragSelectable, { enableMultipleSelection: _this.props.enableMultipleSelection, disabled: _this.isDragSelectableDisabled, focusedCell: _this.props.focusedCell, ignoredSelectors: [\".\" + Classes.TABLE_REORDER_HANDLE_TARGET], key: getIndexClass(index), locateClick: _this.locateClick, locateDrag: _this.locateDragForSelection, onFocusedCell: _this.props.onFocusedCell, onSelection: _this.handleDragSelectableSelection, onSelectionEnd: _this.handleDragSelectableSelectionEnd, selectedRegions: selectedRegions, selectedRegionTransform: _this.props.selectedRegionTransform },\n                React.createElement(Resizable, { isResizable: _this.props.isResizable, maxSize: _this.props.maxSize, minSize: _this.props.minSize, onDoubleClick: modifiedHandleResizeHandleDoubleClick, onLayoutLock: _this.props.onLayoutLock, onResizeEnd: modifiedHandleResizeEnd, onSizeChanged: modifiedHandleSizeChanged, orientation: _this.props.resizeOrientation, size: _this.props.getCellSize(index) }, React.cloneElement(cell, cellProps))));\n            return _this.isReorderHandleEnabled()\n                ? baseChildren // reordering will be handled by interacting with the reorder handle\n                : _this.wrapInDragReorderable(index, baseChildren, _this.isDragReorderableDisabled);\n            var _b, _c;\n        };\n        _this.handleDragSelectableSelection = function (selectedRegions) {\n            _this.props.onSelection(selectedRegions);\n            _this.setState({ hasValidSelection: false });\n        };\n        _this.handleDragSelectableSelectionEnd = function () {\n            _this.activationIndex = null; // not strictly required, but good practice\n            _this.setState({ hasValidSelection: true });\n        };\n        _this.isDragSelectableDisabled = function (event) {\n            if (DragEvents.isAdditive(event)) {\n                // if the meta/ctrl key was pressed, we want to forcefully ignore\n                // reordering interactions and prioritize drag-selection\n                // interactions (e.g. to make it possible to deselect a row).\n                return false;\n            }\n            var cellIndex = _this.convertEventToIndex(event);\n            return _this.isEntireCellTargetReorderable(cellIndex);\n        };\n        _this.isDragReorderableDisabled = function (event) {\n            var isSelectionEnabled = !_this.isDragSelectableDisabled(event);\n            if (isSelectionEnabled) {\n                // if drag-selection is enabled, we don't want drag-reordering\n                // interactions to compete. otherwise, a mouse-drag might both expand a\n                // selection and reorder the same selection simultaneously - confusing!\n                return true;\n            }\n            var cellIndex = _this.convertEventToIndex(event);\n            return !_this.isEntireCellTargetReorderable(cellIndex);\n        };\n        _this.isEntireCellTargetReorderable = function (index) {\n            var selectedRegions = _this.props.selectedRegions;\n            // although reordering may be generally enabled for this row/column (via props.isReorderable), the\n            // row/column shouldn't actually become reorderable from a user perspective until a few other\n            // conditions are true:\n            return (_this.props.isReorderable &&\n                // the row/column should be the only selection (or it should be part of the only selection),\n                // because reordering multiple disjoint row/column selections is a UX morass with no clear best\n                // behavior.\n                _this.props.isCellSelected(index) &&\n                _this.state.hasValidSelection &&\n                Regions.getRegionCardinality(selectedRegions[0]) === _this.props.fullRegionCardinality &&\n                // selected regions can be updated during mousedown+drag and before mouseup; thus, we\n                // add a final check to make sure we don't enable reordering until the selection\n                // interaction is complete. this prevents one click+drag interaction from triggering\n                // both selection and reordering behavior.\n                selectedRegions.length === 1 &&\n                // columns are reordered via a reorder handle, so drag-selection needn't be disabled\n                !_this.isReorderHandleEnabled());\n        };\n        _this.state = { hasValidSelection: _this.isSelectedRegionsControlledAndNonEmpty(props) };\n        return _this;\n    }\n    Header.prototype.componentWillReceiveProps = function (nextProps) {\n        this.setState({ hasValidSelection: this.isSelectedRegionsControlledAndNonEmpty(nextProps) });\n    };\n    Header.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        return (!CoreUtils.shallowCompareKeys(this.state, nextState) ||\n            !CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: SHALLOW_COMPARE_PROP_KEYS_BLACKLIST }) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, SHALLOW_COMPARE_PROP_KEYS_BLACKLIST));\n    };\n    Header.prototype.render = function () {\n        return this.props.wrapCells(this.renderCells());\n    };\n    Header.prototype.isSelectedRegionsControlledAndNonEmpty = function (props) {\n        if (props === void 0) { props = this.props; }\n        return props.selectedRegions != null && props.selectedRegions.length > 0;\n    };\n    Header.prototype.isReorderHandleEnabled = function () {\n        // the reorder handle can only appear in the column interaction bar\n        return this.isColumnHeader() && this.props.isReorderable;\n    };\n    Header.prototype.maybeRenderReorderHandle = function (index) {\n        return !this.isReorderHandleEnabled()\n            ? undefined\n            : this.wrapInDragReorderable(index, React.createElement(\"div\", { className: Classes.TABLE_REORDER_HANDLE_TARGET },\n                React.createElement(\"div\", { className: Classes.TABLE_REORDER_HANDLE },\n                    React.createElement(Icon, { icon: \"drag-handle-vertical\" }))), false);\n    };\n    Header.prototype.isColumnHeader = function () {\n        return this.props.fullRegionCardinality === RegionCardinality.FULL_COLUMNS;\n    };\n    Header.prototype.wrapInDragReorderable = function (index, children, disabled) {\n        return (React.createElement(DragReorderable, { disabled: disabled, key: this.props.getIndexClass(index), locateClick: this.locateClick, locateDrag: this.locateDragForReordering, onReordered: this.props.onReordered, onReordering: this.props.onReordering, onSelection: this.props.onSelection, onFocusedCell: this.props.onFocusedCell, selectedRegions: this.props.selectedRegions, toRegion: this.props.toRegion }, children));\n    };\n    return Header;\n}(React.Component));\nexport { Header };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, ContextMenuTarget, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nvar HeaderCell = /** @class */ (function (_super) {\n    tslib_1.__extends(HeaderCell, _super);\n    function HeaderCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isActive: false,\n        };\n        return _this;\n    }\n    HeaderCell.prototype.shouldComponentUpdate = function (nextProps) {\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, [\"style\"]));\n    };\n    HeaderCell.prototype.renderContextMenu = function (_event) {\n        var menuRenderer = this.props.menuRenderer;\n        if (CoreUtils.isFunction(menuRenderer)) {\n            // the preferred way (a consistent function instance that won't cause as many re-renders)\n            return menuRenderer(this.props.index);\n        }\n        else {\n            return undefined;\n        }\n    };\n    HeaderCell.prototype.render = function () {\n        var classes = classNames(Classes.TABLE_HEADER, (_a = {},\n            _a[Classes.TABLE_HEADER_ACTIVE] = this.props.isActive || this.state.isActive,\n            _a[Classes.TABLE_HEADER_SELECTED] = this.props.isSelected,\n            _a[CoreClasses.LOADING] = this.props.loading,\n            _a), this.props.className);\n        return (React.createElement(\"div\", { className: classes, style: this.props.style }, this.props.children));\n        var _a;\n    };\n    HeaderCell = tslib_1.__decorate([\n        ContextMenuTarget\n    ], HeaderCell);\n    return HeaderCell;\n}(React.Component));\nexport { HeaderCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Header } from \"./header\";\nimport { RowHeaderCell } from \"./rowHeaderCell\";\nvar RowHeader = /** @class */ (function (_super) {\n    tslib_1.__extends(RowHeader, _super);\n    function RowHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.wrapCells = function (cells) {\n            var _a = _this.props, rowIndexStart = _a.rowIndexStart, grid = _a.grid;\n            var tableHeight = grid.getRect().height;\n            var scrollTopCorrection = _this.props.grid.getCumulativeHeightBefore(rowIndexStart);\n            var style = {\n                // reduce the height to clamp the sliding window as we approach the final headers; otherwise,\n                // we'll have tons of useless whitespace at the end.\n                height: tableHeight - scrollTopCorrection,\n                // only header cells in view will render, but we need to reposition them to stay in view\n                // as we scroll vertically.\n                transform: \"translateY(\" + (scrollTopCorrection || 0) + \"px)\",\n            };\n            // add a wrapper set to the full-table height to ensure container styles stretch from the first\n            // cell all the way to the last\n            return (React.createElement(\"div\", { style: { height: tableHeight } },\n                React.createElement(\"div\", { className: Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER, style: style }, cells)));\n        };\n        _this.convertPointToRow = function (clientXOrY, useMidpoint) {\n            var locator = _this.props.locator;\n            return locator != null ? locator.convertPointToRow(clientXOrY, useMidpoint) : null;\n        };\n        _this.getCellExtremaClasses = function (index, indexEnd) {\n            return _this.props.grid.getExtremaClasses(index, 0, indexEnd, 1);\n        };\n        _this.getRowHeight = function (index) {\n            return _this.props.grid.getRowRect(index).height;\n        };\n        _this.getDragCoordinate = function (clientCoords) {\n            return clientCoords[1]; // y-coordinate\n        };\n        _this.getMouseCoordinate = function (event) {\n            return event.clientY;\n        };\n        _this.handleResizeEnd = function (index, size) {\n            _this.props.onResizeGuide(null);\n            _this.props.onRowHeightChanged(index, size);\n        };\n        _this.handleSizeChanged = function (index, size) {\n            var rect = _this.props.grid.getRowRect(index);\n            _this.props.onResizeGuide([rect.top + size]);\n        };\n        _this.isCellSelected = function (index) {\n            return Regions.hasFullRow(_this.props.selectedRegions, index);\n        };\n        _this.isGhostIndex = function (index) {\n            return _this.props.grid.isGhostIndex(index, -1);\n        };\n        _this.renderGhostCell = function (index, extremaClasses) {\n            var rect = _this.props.grid.getGhostCellRect(index, 0);\n            return (React.createElement(RowHeaderCell, { className: classNames(extremaClasses), index: index, key: Classes.rowIndexClass(index), loading: _this.props.loading, style: { height: rect.height + \"px\" } }));\n        };\n        _this.toRegion = function (index1, index2) {\n            // the `this` value is messed up for Regions.row, so we have to have a wrapper function here\n            return Regions.row(index1, index2);\n        };\n        return _this;\n    }\n    RowHeader.prototype.render = function () {\n        var _a = this.props, \n        // from IRowHeaderProps\n        onRowHeightChanged = _a.onRowHeightChanged, renderHeaderCell = _a.rowHeaderCellRenderer, \n        // from IRowHeights\n        minSize = _a.minRowHeight, maxSize = _a.maxRowHeight, defaultRowHeight = _a.defaultRowHeight, \n        // from IRowIndices\n        indexStart = _a.rowIndexStart, indexEnd = _a.rowIndexEnd, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"onRowHeightChanged\", \"rowHeaderCellRenderer\", \"minRowHeight\", \"maxRowHeight\", \"defaultRowHeight\", \"rowIndexStart\", \"rowIndexEnd\"]);\n        return (React.createElement(Header, tslib_1.__assign({ convertPointToIndex: this.convertPointToRow, fullRegionCardinality: RegionCardinality.FULL_ROWS, getCellExtremaClasses: this.getCellExtremaClasses, getCellIndexClass: Classes.rowCellIndexClass, getCellSize: this.getRowHeight, getDragCoordinate: this.getDragCoordinate, getIndexClass: Classes.rowIndexClass, getMouseCoordinate: this.getMouseCoordinate, ghostCellRenderer: this.renderGhostCell, handleResizeEnd: this.handleResizeEnd, handleSizeChanged: this.handleSizeChanged, headerCellIsReorderablePropName: \"enableRowReordering\", headerCellIsSelectedPropName: \"isRowSelected\", headerCellRenderer: renderHeaderCell, indexEnd: indexEnd, indexStart: indexStart, isCellSelected: this.isCellSelected, isGhostIndex: this.isGhostIndex, maxSize: maxSize, minSize: minSize, resizeOrientation: Orientation.HORIZONTAL, selectedRegions: [], toRegion: this.toRegion, wrapCells: this.wrapCells }, spreadableProps)));\n    };\n    RowHeader.defaultProps = {\n        rowHeaderCellRenderer: renderDefaultRowHeader,\n    };\n    return RowHeader;\n}(React.Component));\nexport { RowHeader };\n/**\n * A default implementation of `IRowHeaderRenderer` that displays 1-indexed\n * numbers for each row.\n */\nexport function renderDefaultRowHeader(rowIndex) {\n    return React.createElement(RowHeaderCell, { index: rowIndex, name: \"\" + (rowIndex + 1) });\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { AbstractPureComponent } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { HeaderCell } from \"./headerCell\";\nvar RowHeaderCell = /** @class */ (function (_super) {\n    tslib_1.__extends(RowHeaderCell, _super);\n    function RowHeaderCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RowHeaderCell.prototype.render = function () {\n        var _a = this.props, \n        // from IRowHeaderCellProps\n        enableRowReordering = _a.enableRowReordering, isRowSelected = _a.isRowSelected, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"enableRowReordering\", \"isRowSelected\"]);\n        return (React.createElement(HeaderCell, tslib_1.__assign({ isReorderable: this.props.enableRowReordering, isSelected: this.props.isRowSelected }, spreadableProps),\n            React.createElement(\"div\", { className: Classes.TABLE_ROW_NAME },\n                React.createElement(LoadableContent, { loading: spreadableProps.loading },\n                    React.createElement(\"div\", { className: Classes.TABLE_ROW_NAME_TEXT }, spreadableProps.name))),\n            this.props.children,\n            spreadableProps.loading ? undefined : spreadableProps.resizeHandle));\n    };\n    return RowHeaderCell;\n}(AbstractPureComponent));\nexport { RowHeaderCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport { Cell } from \"./cell/cell\";\nexport { EditableCell } from \"./cell/editableCell\";\nexport { JSONFormat } from \"./cell/formats/jsonFormat\";\nexport { TruncatedPopoverMode, TruncatedFormat } from \"./cell/formats/truncatedFormat\";\nexport { Column } from \"./column\";\nexport { Clipboard, Grid, Rect, RenderMode, Utils } from \"./common/index\";\nexport { Draggable, } from \"./interactions/draggable\";\nexport { CopyCellsMenuItem } from \"./interactions/menus\";\nexport { Orientation, ResizeHandle } from \"./interactions/resizeHandle\";\nexport { DragSelectable } from \"./interactions/selectable\";\nexport { ColumnHeaderCell, HorizontalCellDivider } from \"./headers/columnHeaderCell\";\nexport { RowHeaderCell } from \"./headers/rowHeaderCell\";\nexport { EditableName } from \"./headers/editableName\";\nexport { ColumnLoadingOption, RegionCardinality, Regions, RowLoadingOption, SelectionModes, TableLoadingOption, } from \"./regions\";\nexport { Table } from \"./table\";\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar DragEvents = /** @class */ (function () {\n    function DragEvents() {\n        var _this = this;\n        this.handleMouseDown = function (event) {\n            _this.initCoordinateData(event);\n            if (_this.handler != null && _this.handler.onActivate != null) {\n                var exitCode = _this.handler.onActivate(event);\n                if (exitCode === false) {\n                    return;\n                }\n            }\n            _this.isActivated = true;\n            _this.maybeAlterEventChain(event);\n            // It is possible that the mouseup would not be called after the initial\n            // mousedown (for example if the mouse is moved out of the window). So,\n            // we preemptively detach to avoid duplicate listeners.\n            _this.detachDocumentEventListeners();\n            _this.attachDocumentEventListeners();\n        };\n        this.handleMouseMove = function (event) {\n            _this.maybeAlterEventChain(event);\n            if (_this.isActivated) {\n                _this.isDragging = true;\n            }\n            if (_this.isDragging) {\n                var coords = _this.updateCoordinateData(event);\n                if (_this.handler != null && _this.handler.onDragMove != null) {\n                    _this.handler.onDragMove(event, coords);\n                }\n            }\n        };\n        this.handleMouseUp = function (event) {\n            _this.maybeAlterEventChain(event);\n            if (_this.handler != null) {\n                if (_this.isDragging) {\n                    var coords = _this.updateCoordinateData(event);\n                    if (_this.handler.onDragMove != null) {\n                        _this.handler.onDragMove(event, coords);\n                    }\n                    if (_this.handler.onDragEnd != null) {\n                        _this.handler.onDragEnd(event, coords);\n                    }\n                }\n                else if (_this.isActivated) {\n                    if (_this.handler.onDoubleClick != null) {\n                        if (_this.doubleClickTimeoutToken == null) {\n                            // if this the first click of a possible double-click,\n                            // we delay the firing of the click event by the\n                            // timeout.\n                            _this.doubleClickTimeoutToken = window.setTimeout(function () {\n                                delete _this.doubleClickTimeoutToken;\n                                if (_this.handler.onClick != null) {\n                                    _this.handler.onClick(event);\n                                }\n                            }, DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC);\n                        }\n                        else {\n                            // otherwise, this is the second click in the double-\n                            // click so we cancel the single-click timeout and\n                            // fire the double-click event.\n                            window.clearTimeout(_this.doubleClickTimeoutToken);\n                            delete _this.doubleClickTimeoutToken;\n                            _this.handler.onDoubleClick(event);\n                        }\n                    }\n                    else if (_this.handler.onClick != null) {\n                        _this.handler.onClick(event);\n                    }\n                }\n            }\n            _this.isActivated = false;\n            _this.isDragging = false;\n            _this.detachDocumentEventListeners();\n        };\n    }\n    /**\n     * Returns true if the event includes a modifier key that often adds the result of the drag\n     * event to any existing state. For example, holding CTRL before dragging may select another\n     * region in addition to an existing one, while the absence of a modifier key may clear the\n     * existing selection first.\n     * @param event the mouse event for the drag interaction\n     */\n    DragEvents.isAdditive = function (event) {\n        return event.ctrlKey || event.metaKey;\n    };\n    DragEvents.prototype.attach = function (element, handler) {\n        this.detach();\n        this.handler = handler;\n        this.element = element;\n        if (this.isValidDragHandler(handler)) {\n            this.element.addEventListener(\"mousedown\", this.handleMouseDown);\n        }\n        return this;\n    };\n    DragEvents.prototype.detach = function () {\n        if (this.element != null) {\n            this.element.removeEventListener(\"mousedown\", this.handleMouseDown);\n            this.detachDocumentEventListeners();\n        }\n    };\n    DragEvents.prototype.isValidDragHandler = function (handler) {\n        return (handler != null &&\n            (handler.onActivate != null ||\n                handler.onDragMove != null ||\n                handler.onDragEnd != null ||\n                handler.onClick != null ||\n                handler.onDoubleClick != null));\n    };\n    DragEvents.prototype.attachDocumentEventListeners = function () {\n        document.addEventListener(\"mousemove\", this.handleMouseMove);\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\n    };\n    DragEvents.prototype.detachDocumentEventListeners = function () {\n        document.removeEventListener(\"mousemove\", this.handleMouseMove);\n        document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    };\n    DragEvents.prototype.initCoordinateData = function (event) {\n        this.activationCoordinates = [event.clientX, event.clientY];\n        this.lastCoordinates = this.activationCoordinates;\n    };\n    DragEvents.prototype.updateCoordinateData = function (event) {\n        var currentCoordinates = [event.clientX, event.clientY];\n        var deltaCoordinates = [\n            currentCoordinates[0] - this.lastCoordinates[0],\n            currentCoordinates[1] - this.lastCoordinates[1],\n        ];\n        var offsetCoordinates = [\n            currentCoordinates[0] - this.activationCoordinates[0],\n            currentCoordinates[1] - this.activationCoordinates[1],\n        ];\n        var data = {\n            activation: this.activationCoordinates,\n            current: currentCoordinates,\n            delta: deltaCoordinates,\n            last: this.lastCoordinates,\n            offset: offsetCoordinates,\n        };\n        this.lastCoordinates = [event.clientX, event.clientY];\n        return data;\n    };\n    DragEvents.prototype.maybeAlterEventChain = function (event) {\n        if (this.handler.preventDefault) {\n            event.preventDefault();\n        }\n        if (this.handler.stopPropagation) {\n            event.stopPropagation();\n        }\n    };\n    DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC = 500;\n    return DragEvents;\n}());\nexport { DragEvents };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { DragEvents } from \"./dragEvents\";\nvar REATTACH_PROPS_KEYS = [\"stopPropagation\", \"preventDefault\"];\n/**\n * This component provides a simple interface for combined drag and/or click\n * events.\n *\n * Since the mouse interactions for drag and click are overloaded, here are\n * the events that will fire in these cases:\n *\n * A Click Interaction\n * 1. The user presses down on the render element, triggering the onActivate\n *    callback.\n * 2. The user releases the mouse button without moving it, triggering the\n *    onClick callback.\n *\n * A Drag Interaction\n * 1. The user presses down on the render element, triggering the onActivate\n *    callback.\n * 2. The user moves the mouse, triggering the onDragMove callback.\n * 3. The user moves the mouse, triggering the onDragMove callback.\n * 4. The user moves the mouse, triggering the onDragMove callback.\n * 5. The user releases the mouse button, triggering a final onDragMove\n *    callback as well as an onDragEnd callback.\n *\n * If `false` is returned from the onActivate callback, no further events\n * will be fired until the next activation.\n */\nvar Draggable = /** @class */ (function (_super) {\n    tslib_1.__extends(Draggable, _super);\n    function Draggable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Draggable.prototype.render = function () {\n        return React.Children.only(this.props.children);\n    };\n    Draggable.prototype.componentDidUpdate = function (prevProps) {\n        var propsWhitelist = { include: REATTACH_PROPS_KEYS };\n        if (this.events && !CoreUtils.shallowCompareKeys(prevProps, this.props, propsWhitelist)) {\n            this.events.attach(ReactDOM.findDOMNode(this), this.props);\n        }\n    };\n    Draggable.prototype.componentDidMount = function () {\n        this.events = new DragEvents();\n        this.events.attach(ReactDOM.findDOMNode(this), this.props);\n    };\n    Draggable.prototype.componentWillUnmount = function () {\n        this.events.detach();\n        delete this.events;\n    };\n    Draggable.defaultProps = {\n        preventDefault: true,\n        stopPropagation: false,\n    };\n    return Draggable;\n}(React.PureComponent));\nexport { Draggable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MenuItem, Utils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { Clipboard } from \"../../common/clipboard\";\nimport { Regions } from \"../../regions\";\nvar CopyCellsMenuItem = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyCellsMenuItem, _super);\n    function CopyCellsMenuItem() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleClick = function () {\n            var _a = _this.props, context = _a.context, getCellData = _a.getCellData, onCopy = _a.onCopy;\n            var cells = context.getUniqueCells();\n            var sparse = Regions.sparseMapCells(cells, getCellData);\n            var success = Clipboard.copyCells(sparse);\n            Utils.safeInvoke(onCopy, success);\n        };\n        return _this;\n    }\n    CopyCellsMenuItem.prototype.render = function () {\n        var _a = this.props, context = _a.context, getCellData = _a.getCellData, onCopy = _a.onCopy, menuItemProps = tslib_1.__rest(_a, [\"context\", \"getCellData\", \"onCopy\"]);\n        return React.createElement(MenuItem, tslib_1.__assign({}, menuItemProps, { onClick: this.handleClick }));\n    };\n    return CopyCellsMenuItem;\n}(React.PureComponent));\nexport { CopyCellsMenuItem };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport * from \"./copyCellsMenuItem\";\nexport * from \"./menuContext\";\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { Regions } from \"../../regions\";\nvar MenuContext = /** @class */ (function () {\n    function MenuContext(target, selectedRegions, numRows, numCols) {\n        this.target = target;\n        this.selectedRegions = selectedRegions;\n        this.numRows = numRows;\n        this.numCols = numCols;\n        this.regions = Regions.overlapsRegion(selectedRegions, target) ? selectedRegions : [target];\n    }\n    MenuContext.prototype.getTarget = function () {\n        return this.target;\n    };\n    MenuContext.prototype.getSelectedRegions = function () {\n        return this.selectedRegions;\n    };\n    MenuContext.prototype.getRegions = function () {\n        return this.regions;\n    };\n    MenuContext.prototype.getUniqueCells = function () {\n        return Regions.enumerateUniqueCells(this.regions, this.numRows, this.numCols);\n    };\n    return MenuContext;\n}());\nexport { MenuContext };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { Utils } from \"../common/utils\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Draggable } from \"./draggable\";\nvar DragReorderable = /** @class */ (function (_super) {\n    tslib_1.__extends(DragReorderable, _super);\n    function DragReorderable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleActivate = function (event) {\n            if (_this.shouldIgnoreMouseDown(event)) {\n                return false;\n            }\n            var region = _this.props.locateClick(event);\n            if (!Regions.isValid(region)) {\n                return false;\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var isColumnHeader = cardinality === RegionCardinality.FULL_COLUMNS;\n            var isRowHeader = cardinality === RegionCardinality.FULL_ROWS;\n            if (!isColumnHeader && !isRowHeader) {\n                return false;\n            }\n            var selectedRegions = _this.props.selectedRegions;\n            var selectedRegionIndex = Regions.findContainingRegion(selectedRegions, region);\n            if (selectedRegionIndex >= 0) {\n                var selectedRegion = selectedRegions[selectedRegionIndex];\n                if (Regions.getRegionCardinality(selectedRegion) !== cardinality) {\n                    // ignore FULL_TABLE selections\n                    return false;\n                }\n                // cache for easy access later in the lifecycle\n                var selectedInterval = isRowHeader ? selectedRegion.rows : selectedRegion.cols;\n                _this.selectedRegionStartIndex = selectedInterval[0];\n                // add 1 because the selected interval is inclusive, which simple subtraction doesn't\n                // account for (e.g. in a FULL_COLUMNS range from 3 to 6, 6 - 3 = 3, but the selection\n                // actually includes four columns: 3, 4, 5, and 6)\n                _this.selectedRegionLength = selectedInterval[1] - selectedInterval[0] + 1;\n            }\n            else {\n                // select the new region to avoid complex and unintuitive UX w/r/t the existing selection\n                _this.maybeSelectRegion(region);\n                var regionRange = isRowHeader ? region.rows : region.cols;\n                _this.selectedRegionStartIndex = regionRange[0];\n                _this.selectedRegionLength = regionRange[1] - regionRange[0] + 1;\n            }\n            return true;\n        };\n        _this.handleDragMove = function (event, coords) {\n            var oldIndex = _this.selectedRegionStartIndex;\n            var guideIndex = _this.props.locateDrag(event, coords);\n            var length = _this.selectedRegionLength;\n            var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n            _this.props.onReordering(oldIndex, reorderedIndex, length);\n        };\n        _this.handleDragEnd = function (event, coords) {\n            var oldIndex = _this.selectedRegionStartIndex;\n            var guideIndex = _this.props.locateDrag(event, coords);\n            var length = _this.selectedRegionLength;\n            var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n            _this.props.onReordered(oldIndex, reorderedIndex, length);\n            // the newly reordered region becomes the only selection\n            var newRegion = _this.props.toRegion(reorderedIndex, reorderedIndex + length - 1);\n            _this.maybeSelectRegion(newRegion);\n            // resetting is not strictly required, but it's cleaner\n            _this.selectedRegionStartIndex = undefined;\n            _this.selectedRegionLength = undefined;\n        };\n        return _this;\n    }\n    DragReorderable.prototype.render = function () {\n        var draggableProps = this.getDraggableProps();\n        return (React.createElement(Draggable, tslib_1.__assign({}, draggableProps, { preventDefault: false }), this.props.children));\n    };\n    DragReorderable.prototype.getDraggableProps = function () {\n        return this.props.onReordered == null\n            ? {}\n            : {\n                onActivate: this.handleActivate,\n                onDragEnd: this.handleDragEnd,\n                onDragMove: this.handleDragMove,\n            };\n    };\n    DragReorderable.prototype.shouldIgnoreMouseDown = function (event) {\n        var disabled = this.props.disabled;\n        var isDisabled = CoreUtils.isFunction(disabled) ? CoreUtils.safeInvoke(disabled, event) : disabled;\n        return !Utils.isLeftClick(event) || isDisabled;\n    };\n    DragReorderable.prototype.maybeSelectRegion = function (region) {\n        var nextSelectedRegions = [region];\n        if (!CoreUtils.deepCompareKeys(nextSelectedRegions, this.props.selectedRegions)) {\n            this.props.onSelection(nextSelectedRegions);\n            // move the focused cell into the newly selected region\n            this.props.onFocusedCell(tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(region), { focusSelectionIndex: 0 }));\n        }\n    };\n    DragReorderable.defaultProps = {\n        selectedRegions: [],\n    };\n    return DragReorderable;\n}(React.PureComponent));\nexport { DragReorderable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { Utils } from \"../common/index\";\nimport { Orientation, ResizeHandle } from \"./resizeHandle\";\nvar Resizable = /** @class */ (function (_super) {\n    tslib_1.__extends(Resizable, _super);\n    function Resizable(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.onResizeMove = function (_offset, delta) {\n            _this.offsetSize(delta);\n            if (_this.props.onSizeChanged != null) {\n                _this.props.onSizeChanged(_this.state.size);\n            }\n        };\n        _this.onResizeEnd = function (_offset) {\n            // reset \"unclamped\" size on end\n            _this.setState({ unclampedSize: _this.state.size });\n            if (_this.props.onResizeEnd != null) {\n                _this.props.onResizeEnd(_this.state.size);\n            }\n        };\n        var size = props.size;\n        _this.state = {\n            size: size,\n            unclampedSize: size,\n        };\n        return _this;\n    }\n    Resizable.prototype.componentWillReceiveProps = function (nextProps) {\n        var size = nextProps.size;\n        this.setState({\n            size: size,\n            unclampedSize: size,\n        });\n    };\n    Resizable.prototype.render = function () {\n        var child = React.Children.only(this.props.children);\n        var style = tslib_1.__assign({}, child.props.style, this.getStyle());\n        if (this.props.isResizable === false) {\n            return React.cloneElement(child, { style: style });\n        }\n        var resizeHandle = this.renderResizeHandle();\n        return React.cloneElement(child, { style: style, resizeHandle: resizeHandle });\n    };\n    Resizable.prototype.renderResizeHandle = function () {\n        var _a = this.props, onLayoutLock = _a.onLayoutLock, onDoubleClick = _a.onDoubleClick, orientation = _a.orientation;\n        return (React.createElement(ResizeHandle, { key: \"resize-handle\", onDoubleClick: onDoubleClick, onLayoutLock: onLayoutLock, onResizeEnd: this.onResizeEnd, onResizeMove: this.onResizeMove, orientation: orientation }));\n    };\n    /**\n     * Returns the CSS style to apply to the child element given the state's\n     * size value.\n     */\n    Resizable.prototype.getStyle = function () {\n        if (this.props.orientation === Orientation.VERTICAL) {\n            return {\n                flexBasis: this.state.size + \"px\",\n                minWidth: \"0px\",\n                width: this.state.size + \"px\",\n            };\n        }\n        else {\n            return {\n                flexBasis: this.state.size + \"px\",\n                height: this.state.size + \"px\",\n                minHeight: \"0px\",\n            };\n        }\n    };\n    Resizable.prototype.offsetSize = function (offset) {\n        var unclampedSize = this.state.unclampedSize + offset;\n        this.setState({\n            size: Utils.clamp(unclampedSize, this.props.minSize, this.props.maxSize),\n            unclampedSize: unclampedSize,\n        });\n    };\n    Resizable.defaultProps = {\n        isResizable: true,\n        minSize: 0,\n    };\n    return Resizable;\n}(React.PureComponent));\nexport { Resizable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"./draggable\";\nexport var Orientation;\n(function (Orientation) {\n    Orientation[Orientation[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\n    Orientation[Orientation[\"VERTICAL\"] = 0] = \"VERTICAL\";\n})(Orientation || (Orientation = {}));\nvar ResizeHandle = /** @class */ (function (_super) {\n    tslib_1.__extends(ResizeHandle, _super);\n    function ResizeHandle() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isDragging: false,\n        };\n        _this.handleActivate = function (event) {\n            _this.setState({ isDragging: true });\n            _this.props.onLayoutLock(true);\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n            return true;\n        };\n        _this.handleDragMove = function (_event, coords) {\n            var orientationIndex = _this.props.orientation;\n            if (_this.props.onResizeMove != null) {\n                _this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n            }\n        };\n        _this.handleDragEnd = function (_event, coords) {\n            var orientationIndex = _this.props.orientation;\n            _this.setState({ isDragging: false });\n            _this.props.onLayoutLock(false);\n            if (_this.props.onResizeMove != null) {\n                _this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n            }\n            if (_this.props.onResizeEnd != null) {\n                _this.props.onResizeEnd(coords.offset[orientationIndex]);\n            }\n        };\n        _this.handleClick = function (_event) {\n            _this.setState({ isDragging: false });\n            _this.props.onLayoutLock(false);\n        };\n        _this.handleDoubleClick = function (_event) {\n            _this.setState({ isDragging: false });\n            _this.props.onLayoutLock(false);\n            if (_this.props.onDoubleClick != null) {\n                _this.props.onDoubleClick();\n            }\n        };\n        return _this;\n    }\n    ResizeHandle.prototype.render = function () {\n        var _a = this.props, onResizeMove = _a.onResizeMove, onResizeEnd = _a.onResizeEnd, onDoubleClick = _a.onDoubleClick, orientation = _a.orientation;\n        if (onResizeMove == null && onResizeEnd == null && onDoubleClick == null) {\n            return undefined;\n        }\n        var targetClasses = classNames(Classes.TABLE_RESIZE_HANDLE_TARGET, (_b = {},\n            _b[Classes.TABLE_DRAGGING] = this.state.isDragging,\n            _b[Classes.TABLE_RESIZE_HORIZONTAL] = orientation === Orientation.HORIZONTAL,\n            _b[Classes.TABLE_RESIZE_VERTICAL] = orientation === Orientation.VERTICAL,\n            _b), this.props.className);\n        var handleClasses = classNames(Classes.TABLE_RESIZE_HANDLE, (_c = {},\n            _c[Classes.TABLE_DRAGGING] = this.state.isDragging,\n            _c));\n        return (React.createElement(Draggable, { onActivate: this.handleActivate, onClick: this.handleClick, onDoubleClick: this.handleDoubleClick, onDragEnd: this.handleDragEnd, onDragMove: this.handleDragMove },\n            React.createElement(\"div\", { className: targetClasses },\n                React.createElement(\"div\", { className: handleClasses }))));\n        var _b, _c;\n    };\n    return ResizeHandle;\n}(React.PureComponent));\nexport { ResizeHandle };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as Classes from \"../common/classes\";\n/**\n * Efficiently detect when an HTMLElement is resized.\n *\n * Attaches an invisible \"resize-sensor\" div to the element. Then it checks\n * the element's offsetWidth and offsetHeight whenever a scroll event is\n * triggered on the \"resize-sensor\" children. These events are further\n * debounced using requestAnimationFrame.\n *\n * Inspired by: https://github.com/marcj/css-element-queries/blob/master/src/ResizeSensor.js\n */\nvar ResizeSensor = /** @class */ (function () {\n    function ResizeSensor() {\n    }\n    ResizeSensor.attach = function (element, callback) {\n        var lifecycle = ResizeSensor.debounce(callback);\n        var resizeSensor = document.createElement(\"div\");\n        resizeSensor.className = Classes.TABLE_RESIZE_SENSOR;\n        resizeSensor.style.cssText = ResizeSensor.RESIZE_SENSOR_STYLE;\n        resizeSensor.innerHTML = ResizeSensor.RESIZE_SENSOR_HTML;\n        element.appendChild(resizeSensor);\n        if (getComputedStyle(element, null).getPropertyValue(\"position\") === \"static\") {\n            element.style.position = \"relative\";\n        }\n        var expand = resizeSensor.childNodes[0];\n        var expandChild = expand.childNodes[0];\n        var shrink = resizeSensor.childNodes[1];\n        var reset = function () {\n            expandChild.style.width = \"100000px\";\n            expandChild.style.height = \"100000px\";\n            expand.scrollLeft = 100000;\n            expand.scrollTop = 100000;\n            shrink.scrollLeft = 100000;\n            shrink.scrollTop = 100000;\n        };\n        reset();\n        var lastWidth;\n        var lastHeight;\n        var onScroll = function () {\n            var currentWidth = element.offsetWidth;\n            var currentHeight = element.offsetHeight;\n            if (currentWidth !== lastWidth || currentHeight !== lastHeight) {\n                lastWidth = currentWidth;\n                lastHeight = currentHeight;\n                lifecycle.trigger();\n            }\n            reset();\n        };\n        expand.addEventListener(\"scroll\", onScroll);\n        shrink.addEventListener(\"scroll\", onScroll);\n        return function () {\n            element.removeChild(resizeSensor);\n            lifecycle.cancelled = true;\n        };\n    };\n    ResizeSensor.debounce = function (callback) {\n        var scope = {\n            cancelled: false,\n            trigger: function () {\n                if (scope.triggered || scope.cancelled) {\n                    return;\n                }\n                scope.triggered = true;\n                requestAnimationFrame(function () {\n                    scope.triggered = false;\n                    if (!scope.cancelled) {\n                        callback();\n                    }\n                });\n            },\n            triggered: false,\n        };\n        return scope;\n    };\n    ResizeSensor.RESIZE_SENSOR_STYLE = \"position: absolute; left: 0; top: 0; right: 0; \" +\n        \"bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n    ResizeSensor.RESIZE_SENSOR_HTML = \"<div class=\\\"\" + Classes.TABLE_RESIZE_SENSOR_EXPAND + \"\\\"\\n        style=\\\"\" + ResizeSensor.RESIZE_SENSOR_STYLE + \"\\\"><div style=\\\"position: absolute; left: 0; top: 0; transition: 0s;\\\"\\n        ></div></div><div class=\\\"\" + Classes.TABLE_RESIZE_SENSOR_SHRINK + \"\\\" style=\\\"\" + ResizeSensor.RESIZE_SENSOR_STYLE + \"\\\"\\n        ><div style=\\\"position: absolute; left: 0; top: 0; transition: 0s; width: 200%; height: 200%;\\\"></div></div>\";\n    return ResizeSensor;\n}());\nexport { ResizeSensor };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as FocusedCellUtils from \"../common/internal/focusedCellUtils\";\nimport * as PlatformUtils from \"../common/internal/platformUtils\";\nimport { Utils } from \"../common/utils\";\nimport { Regions } from \"../regions\";\nimport { DragEvents } from \"./dragEvents\";\nimport { Draggable } from \"./draggable\";\nvar DragSelectable = /** @class */ (function (_super) {\n    tslib_1.__extends(DragSelectable, _super);\n    function DragSelectable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.didExpandSelectionOnActivate = false;\n        _this.handleActivate = function (event) {\n            var _a = _this.props, locateClick = _a.locateClick, selectedRegions = _a.selectedRegions, selectedRegionTransform = _a.selectedRegionTransform;\n            if (_this.shouldIgnoreMouseDown(event)) {\n                return false;\n            }\n            var region = locateClick(event);\n            if (!Regions.isValid(region)) {\n                return false;\n            }\n            if (selectedRegionTransform != null) {\n                region = selectedRegionTransform(region, event);\n            }\n            var foundIndex = Regions.findMatchingRegion(selectedRegions, region);\n            var matchesExistingSelection = foundIndex !== -1;\n            if (matchesExistingSelection && DragEvents.isAdditive(event)) {\n                _this.handleClearSelectionAtIndex(foundIndex);\n                // if we just deselected a selected region, a subsequent drag-move\n                // could reselect it again and *also* clear other selections. that's\n                // quite unintuitive, so ignore subsequent drag-move's.\n                return false;\n            }\n            // we want to listen to subsequent drag-move's in all following cases,\n            // so this mousedown can be the start of a new selection if desired.\n            if (matchesExistingSelection) {\n                _this.handleClearAllSelectionsNotAtIndex(foundIndex);\n            }\n            else if (_this.shouldExpandSelection(event)) {\n                _this.handleExpandSelection(region);\n            }\n            else if (_this.shouldAddDisjointSelection(event)) {\n                _this.handleAddDisjointSelection(region);\n            }\n            else {\n                _this.handleReplaceSelection(region);\n            }\n            return true;\n        };\n        _this.handleDragMove = function (event, coords) {\n            var _a = _this.props, enableMultipleSelection = _a.enableMultipleSelection, focusedCell = _a.focusedCell, locateClick = _a.locateClick, locateDrag = _a.locateDrag, selectedRegions = _a.selectedRegions, selectedRegionTransform = _a.selectedRegionTransform;\n            var region = enableMultipleSelection\n                ? locateDrag(event, coords, /* returnEndOnly? */ _this.didExpandSelectionOnActivate)\n                : locateClick(event);\n            if (!Regions.isValid(region)) {\n                return;\n            }\n            else if (selectedRegionTransform != null) {\n                region = selectedRegionTransform(region, event, coords);\n            }\n            var nextSelectedRegions = _this.didExpandSelectionOnActivate\n                ? _this.expandSelectedRegions(selectedRegions, region, focusedCell)\n                : Regions.update(selectedRegions, region);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            if (!enableMultipleSelection) {\n                // move the focused cell with the selected region\n                var lastIndex = nextSelectedRegions.length - 1;\n                var mostRecentRegion = nextSelectedRegions[lastIndex];\n                _this.invokeOnFocusCallbackForRegion(mostRecentRegion, lastIndex);\n            }\n        };\n        _this.handleDragEnd = function () {\n            _this.finishInteraction();\n        };\n        _this.handleClick = function () {\n            _this.finishInteraction();\n        };\n        // Boolean checks\n        // ==============\n        _this.shouldExpandSelection = function (event) {\n            var enableMultipleSelection = _this.props.enableMultipleSelection;\n            return enableMultipleSelection && event.shiftKey;\n        };\n        _this.shouldAddDisjointSelection = function (event) {\n            var enableMultipleSelection = _this.props.enableMultipleSelection;\n            return enableMultipleSelection && DragEvents.isAdditive(event);\n        };\n        // Update logic\n        // ============\n        _this.handleClearSelectionAtIndex = function (selectedRegionIndex) {\n            var selectedRegions = _this.props.selectedRegions;\n            // remove just the clicked region, leaving other selected regions in place\n            var nextSelectedRegions = selectedRegions.slice();\n            nextSelectedRegions.splice(selectedRegionIndex, 1);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // if there are still any selections, move the focused cell to the\n            // most recent selection. otherwise, don't update it.\n            if (nextSelectedRegions.length > 0) {\n                var lastIndex = nextSelectedRegions.length - 1;\n                _this.invokeOnFocusCallbackForRegion(nextSelectedRegions[lastIndex], lastIndex);\n            }\n        };\n        _this.handleClearAllSelectionsNotAtIndex = function (selectedRegionIndex) {\n            var selectedRegions = _this.props.selectedRegions;\n            var nextSelectedRegion = selectedRegions[selectedRegionIndex];\n            _this.maybeInvokeSelectionCallback([nextSelectedRegion]);\n            _this.invokeOnFocusCallbackForRegion(nextSelectedRegion, 0);\n        };\n        _this.handleExpandSelection = function (region) {\n            var _a = _this.props, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions;\n            _this.didExpandSelectionOnActivate = true;\n            // there should be only one selected region after expanding. do not\n            // update the focused cell.\n            var nextSelectedRegions = _this.expandSelectedRegions(selectedRegions, region, focusedCell);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // move the focused cell into the new region if there were no selections before\n            if (selectedRegions == null || selectedRegions.length === 0) {\n                _this.invokeOnFocusCallbackForRegion(region);\n            }\n        };\n        _this.handleAddDisjointSelection = function (region) {\n            var selectedRegions = _this.props.selectedRegions;\n            // add the new region to the existing selections\n            var nextSelectedRegions = Regions.add(selectedRegions, region);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // put the focused cell in the new region\n            _this.invokeOnFocusCallbackForRegion(region, nextSelectedRegions.length - 1);\n        };\n        _this.handleReplaceSelection = function (region) {\n            // clear all selections and retain only the new one\n            var nextSelectedRegions = [region];\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // move the focused cell into the new selection\n            _this.invokeOnFocusCallbackForRegion(region);\n        };\n        _this.invokeOnFocusCallbackForRegion = function (focusRegion, focusSelectionIndex) {\n            if (focusSelectionIndex === void 0) { focusSelectionIndex = 0; }\n            var onFocusedCell = _this.props.onFocusedCell;\n            var focusedCellCoords = Regions.getFocusCellCoordinatesFromRegion(focusRegion);\n            onFocusedCell(FocusedCellUtils.toFullCoordinates(focusedCellCoords, focusSelectionIndex));\n        };\n        // Other\n        // =====\n        _this.finishInteraction = function () {\n            CoreUtils.safeInvoke(_this.props.onSelectionEnd, _this.props.selectedRegions);\n            _this.didExpandSelectionOnActivate = false;\n            _this.lastEmittedSelectedRegions = null;\n        };\n        return _this;\n    }\n    DragSelectable.prototype.render = function () {\n        var draggableProps = this.getDraggableProps();\n        return (React.createElement(Draggable, tslib_1.__assign({}, draggableProps, { preventDefault: false }), this.props.children));\n    };\n    DragSelectable.prototype.getDraggableProps = function () {\n        return this.props.onSelection == null\n            ? {}\n            : {\n                onActivate: this.handleActivate,\n                onClick: this.handleClick,\n                onDragEnd: this.handleDragEnd,\n                onDragMove: this.handleDragMove,\n            };\n    };\n    DragSelectable.prototype.shouldIgnoreMouseDown = function (event) {\n        var _a = this.props, disabled = _a.disabled, _b = _a.ignoredSelectors, ignoredSelectors = _b === void 0 ? [] : _b;\n        var element = event.target;\n        var isLeftClick = Utils.isLeftClick(event);\n        var isContextMenuTrigger = isLeftClick && event.ctrlKey && PlatformUtils.isMac();\n        var isDisabled = CoreUtils.safeInvokeOrValue(disabled, event);\n        return (!isLeftClick ||\n            isContextMenuTrigger ||\n            isDisabled ||\n            ignoredSelectors.some(function (selector) { return element.closest(selector) != null; }));\n    };\n    // Callbacks\n    // =========\n    DragSelectable.prototype.maybeInvokeSelectionCallback = function (nextSelectedRegions) {\n        var onSelection = this.props.onSelection;\n        // invoke only if the selection changed. this is useful only on\n        // mousemove; there's special handling for mousedown interactions that\n        // target an already-selected region.\n        if (this.lastEmittedSelectedRegions == null ||\n            !CoreUtils.deepCompareKeys(this.lastEmittedSelectedRegions, nextSelectedRegions)) {\n            onSelection(nextSelectedRegions);\n            this.lastEmittedSelectedRegions = nextSelectedRegions;\n        }\n    };\n    /**\n     * Expands the last-selected region to the new region, and replaces the\n     * last-selected region with the expanded region. If a focused cell is provided,\n     * the focused cell will serve as an anchor for the expansion.\n     */\n    DragSelectable.prototype.expandSelectedRegions = function (regions, region, focusedCell) {\n        if (regions.length === 0) {\n            return [region];\n        }\n        else if (focusedCell != null) {\n            var expandedRegion = FocusedCellUtils.expandFocusedRegion(focusedCell, region);\n            return Regions.update(regions, expandedRegion);\n        }\n        else {\n            var expandedRegion = Regions.expandRegion(regions[regions.length - 1], region);\n            return Regions.update(regions, expandedRegion);\n        }\n    };\n    DragSelectable.defaultProps = {\n        disabled: false,\n        enableMultipleSelection: false,\n        selectedRegions: [],\n    };\n    return DragSelectable;\n}(React.PureComponent));\nexport { DragSelectable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nvar GuideLayer = /** @class */ (function (_super) {\n    tslib_1.__extends(GuideLayer, _super);\n    function GuideLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.renderVerticalGuide = function (offset, index) {\n            var style = {\n                left: offset + \"px\",\n            };\n            var className = classNames(Classes.TABLE_OVERLAY, Classes.TABLE_VERTICAL_GUIDE, {\n                \"pt-table-vertical-guide-flush-left\": offset === 0,\n            });\n            return React.createElement(\"div\", { className: className, key: index, style: style });\n        };\n        _this.renderHorizontalGuide = function (offset, index) {\n            var style = {\n                top: offset + \"px\",\n            };\n            var className = classNames(Classes.TABLE_OVERLAY, Classes.TABLE_HORIZONTAL_GUIDE, {\n                \"pt-table-horizontal-guide-flush-top\": offset === 0,\n            });\n            return React.createElement(\"div\", { className: className, key: index, style: style });\n        };\n        return _this;\n    }\n    GuideLayer.prototype.shouldComponentUpdate = function (nextProps) {\n        if (this.props.className !== nextProps.className) {\n            return true;\n        }\n        // shallow-comparing guide arrays leads to tons of unnecessary re-renders, so we check the\n        // array contents explicitly.\n        return (!CoreUtils.arraysEqual(this.props.verticalGuides, nextProps.verticalGuides) ||\n            !CoreUtils.arraysEqual(this.props.horizontalGuides, nextProps.horizontalGuides));\n    };\n    GuideLayer.prototype.render = function () {\n        var _a = this.props, verticalGuides = _a.verticalGuides, horizontalGuides = _a.horizontalGuides, className = _a.className;\n        var verticals = verticalGuides == null ? undefined : verticalGuides.map(this.renderVerticalGuide);\n        var horizontals = horizontalGuides == null ? undefined : horizontalGuides.map(this.renderHorizontalGuide);\n        return (React.createElement(\"div\", { className: classNames(className, Classes.TABLE_OVERLAY_LAYER) },\n            verticals,\n            horizontals));\n    };\n    return GuideLayer;\n}(React.Component));\nexport { GuideLayer };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Regions } from \"../regions\";\n// don't include \"regions\" or \"regionStyles\" in here, because they can't be shallowly compared\nvar UPDATE_PROPS_KEYS = [\"className\"];\nvar RegionLayer = /** @class */ (function (_super) {\n    tslib_1.__extends(RegionLayer, _super);\n    function RegionLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.renderRegion = function (_region, index) {\n            var _a = _this.props, className = _a.className, regionStyles = _a.regionStyles;\n            return (React.createElement(\"div\", { className: classNames(Classes.TABLE_OVERLAY, Classes.TABLE_REGION, className), key: index, style: regionStyles[index] }));\n        };\n        return _this;\n    }\n    RegionLayer.prototype.shouldComponentUpdate = function (nextProps) {\n        // shallowly comparable props like \"className\" tend not to change in the default table\n        // implementation, so do that check last with hope that we return earlier and avoid it\n        // altogether.\n        return (!CoreUtils.arraysEqual(this.props.regions, nextProps.regions, Regions.regionsEqual) ||\n            !CoreUtils.arraysEqual(this.props.regionStyles, nextProps.regionStyles, CoreUtils.shallowCompareKeys) ||\n            !CoreUtils.shallowCompareKeys(this.props, nextProps, { include: UPDATE_PROPS_KEYS }));\n    };\n    RegionLayer.prototype.render = function () {\n        return React.createElement(\"div\", { className: Classes.TABLE_OVERLAY_LAYER }, this.renderRegionChildren());\n    };\n    RegionLayer.prototype.renderRegionChildren = function () {\n        var regions = this.props.regions;\n        if (regions == null) {\n            return undefined;\n        }\n        return regions.map(this.renderRegion);\n    };\n    return RegionLayer;\n}(React.Component));\nexport { RegionLayer };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as Classes from \"./common/classes\";\nimport { Rect } from \"./common/rect\";\nimport { Utils } from \"./common/utils\";\nvar Locator = /** @class */ (function () {\n    function Locator(\n    /* The root table element within which a click is deemed valid and relevant. */\n    tableElement, \n    /* The scrollable element that wraps the cell container. */\n    scrollContainerElement, \n    /* The element containing all body cells in the grid (excluding headers). */\n    cellContainerElement) {\n        var _this = this;\n        this.tableElement = tableElement;\n        this.scrollContainerElement = scrollContainerElement;\n        this.cellContainerElement = cellContainerElement;\n        this.convertCellIndexToClientX = function (index) {\n            return _this.grid.getCumulativeWidthAt(index);\n        };\n        this.convertCellMidpointToClientX = function (index) {\n            var cellLeft = _this.grid.getCumulativeWidthBefore(index);\n            var cellRight = _this.grid.getCumulativeWidthAt(index);\n            return (cellLeft + cellRight) / 2;\n        };\n        this.convertCellIndexToClientY = function (index) {\n            return _this.grid.getCumulativeHeightAt(index);\n        };\n        this.convertCellMidpointToClientY = function (index) {\n            var cellTop = _this.grid.getCumulativeHeightBefore(index);\n            var cellBottom = _this.grid.getCumulativeHeightAt(index);\n            return (cellTop + cellBottom) / 2;\n        };\n        this.toGridX = function (clientX) {\n            var gridOffsetFromPageLeft = _this.cellContainerElement.getBoundingClientRect().left;\n            var scrollOffsetFromGridLeft = _this.scrollContainerElement.scrollLeft;\n            var cursorOffsetFromGridLeft = clientX - (gridOffsetFromPageLeft + scrollOffsetFromGridLeft);\n            var isCursorWithinFrozenColumns = _this.numFrozenColumns != null &&\n                _this.numFrozenColumns > 0 &&\n                cursorOffsetFromGridLeft <= _this.grid.getCumulativeWidthBefore(_this.numFrozenColumns);\n            // the frozen-column region doesn't scroll, so ignore the scroll distance in that case\n            return isCursorWithinFrozenColumns\n                ? cursorOffsetFromGridLeft\n                : cursorOffsetFromGridLeft + scrollOffsetFromGridLeft;\n        };\n        this.toGridY = function (clientY) {\n            var gridOffsetFromPageTop = _this.cellContainerElement.getBoundingClientRect().top;\n            var scrollOffsetFromGridTop = _this.scrollContainerElement.scrollTop;\n            var cursorOffsetFromGridTop = clientY - (gridOffsetFromPageTop + scrollOffsetFromGridTop);\n            var isCursorWithinFrozenRows = _this.numFrozenRows != null &&\n                _this.numFrozenRows > 0 &&\n                cursorOffsetFromGridTop <= _this.grid.getCumulativeHeightBefore(_this.numFrozenRows);\n            return isCursorWithinFrozenRows ? cursorOffsetFromGridTop : cursorOffsetFromGridTop + scrollOffsetFromGridTop;\n        };\n        this.numFrozenRows = 0;\n        this.numFrozenColumns = 0;\n    }\n    // Setters\n    // =======\n    Locator.prototype.setGrid = function (grid) {\n        this.grid = grid;\n        return this;\n    };\n    Locator.prototype.setNumFrozenRows = function (numFrozenRows) {\n        this.numFrozenRows = numFrozenRows;\n        return this;\n    };\n    Locator.prototype.setNumFrozenColumns = function (numFrozenColumns) {\n        this.numFrozenColumns = numFrozenColumns;\n        return this;\n    };\n    // Getters\n    // =======\n    Locator.prototype.getViewportRect = function () {\n        return new Rect(this.scrollContainerElement.scrollLeft, this.scrollContainerElement.scrollTop, this.scrollContainerElement.clientWidth, this.scrollContainerElement.clientHeight);\n    };\n    Locator.prototype.getWidestVisibleCellInColumn = function (columnIndex) {\n        var columnCellSelector = this.getColumnCellSelector(columnIndex);\n        var columnHeaderAndBodyCells = this.tableElement.querySelectorAll(columnCellSelector);\n        var maxWidth = 0;\n        for (var i = 0; i < columnHeaderAndBodyCells.length; i++) {\n            var contentWidth = Utils.measureElementTextContent(columnHeaderAndBodyCells.item(i)).width;\n            var cellWidth = Math.ceil(contentWidth) + Locator.CELL_HORIZONTAL_PADDING * 2;\n            if (cellWidth > maxWidth) {\n                maxWidth = cellWidth;\n            }\n        }\n        return maxWidth;\n    };\n    Locator.prototype.getTallestVisibleCellInColumn = function (columnIndex) {\n        // consider only body cells, hence the extra Classes.TABLE_CELL specificity\n        var columnCellSelector = this.getColumnCellSelector(columnIndex);\n        var columnBodyCells = this.tableElement.querySelectorAll(columnCellSelector + \".\" + Classes.TABLE_CELL);\n        var maxHeight = 0;\n        for (var i = 0; i < columnBodyCells.length; i++) {\n            var cell = columnBodyCells.item(i);\n            var cellValue = cell.querySelector(\".\" + Classes.TABLE_TRUNCATED_VALUE);\n            var cellTruncatedFormatText = cell.querySelector(\".\" + Classes.TABLE_TRUNCATED_FORMAT_TEXT);\n            var cellTruncatedText = cell.querySelector(\".\" + Classes.TABLE_TRUNCATED_TEXT);\n            var height = 0;\n            if (cellValue != null) {\n                height = cellValue.scrollHeight;\n            }\n            else if (cellTruncatedFormatText != null) {\n                height = cellTruncatedFormatText.scrollHeight;\n            }\n            else if (cellTruncatedText != null) {\n                height = cellTruncatedText.scrollHeight;\n            }\n            else {\n                // it's not anything we recognize, just use the current height of the cell\n                height = cell.scrollHeight;\n            }\n            if (height > maxHeight) {\n                maxHeight = height;\n            }\n        }\n        return maxHeight;\n    };\n    // Converters\n    // ==========\n    Locator.prototype.convertPointToColumn = function (clientX, useMidpoint) {\n        var tableRect = this.getTableRect();\n        if (!tableRect.containsX(clientX)) {\n            return -1;\n        }\n        var gridX = this.toGridX(clientX);\n        var limit = useMidpoint ? this.grid.numCols : this.grid.numCols - 1;\n        var lookupFn = useMidpoint ? this.convertCellMidpointToClientX : this.convertCellIndexToClientX;\n        return Utils.binarySearch(gridX, limit, lookupFn);\n    };\n    Locator.prototype.convertPointToRow = function (clientY, useMidpoint) {\n        var tableRect = this.getTableRect();\n        if (!tableRect.containsY(clientY)) {\n            return -1;\n        }\n        var gridY = this.toGridY(clientY);\n        var limit = useMidpoint ? this.grid.numRows : this.grid.numRows - 1;\n        var lookupFn = useMidpoint ? this.convertCellMidpointToClientY : this.convertCellIndexToClientY;\n        return Utils.binarySearch(gridY, limit, lookupFn);\n    };\n    Locator.prototype.convertPointToCell = function (clientX, clientY) {\n        var gridX = this.toGridX(clientX);\n        var gridY = this.toGridY(clientY);\n        var col = Utils.binarySearch(gridX, this.grid.numCols - 1, this.convertCellIndexToClientX);\n        var row = Utils.binarySearch(gridY, this.grid.numRows - 1, this.convertCellIndexToClientY);\n        return { col: col, row: row };\n    };\n    // Private helpers\n    // ===============\n    Locator.prototype.getColumnCellSelector = function (columnIndex) {\n        // measure frozen columns in the LEFT quadrant; otherwise, they might\n        // have been scrolled out of view, leading to wonky measurements (#1561)\n        var isFrozenColumnIndex = columnIndex < this.numFrozenColumns;\n        var quadrantClass = isFrozenColumnIndex ? Classes.TABLE_QUADRANT_LEFT : Classes.TABLE_QUADRANT_MAIN;\n        var cellClass = Classes.columnCellIndexClass(columnIndex);\n        return \".\" + quadrantClass + \" .\" + cellClass;\n    };\n    Locator.prototype.getTableRect = function () {\n        return Rect.wrap(this.tableElement.getBoundingClientRect());\n    };\n    Locator.CELL_HORIZONTAL_PADDING = 10;\n    return Locator;\n}());\nexport { Locator };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractComponent, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport * as Errors from \"../common/errors\";\nexport var QuadrantType;\n(function (QuadrantType) {\n    /**\n     * The main quadrant beneath any frozen rows or columns.\n     */\n    QuadrantType[\"MAIN\"] = \"main\";\n    /**\n     * The top quadrant, containing column headers and frozen rows.\n     */\n    QuadrantType[\"TOP\"] = \"top\";\n    /**\n     * The left quadrant, containing row headers and frozen columns.\n     */\n    QuadrantType[\"LEFT\"] = \"left\";\n    /**\n     * The top-left quadrant, containing the headers and cells common to both\n     * the frozen columns and frozen rows.\n     */\n    QuadrantType[\"TOP_LEFT\"] = \"top-left\";\n})(QuadrantType || (QuadrantType = {}));\nvar TableQuadrant = /** @class */ (function (_super) {\n    tslib_1.__extends(TableQuadrant, _super);\n    function TableQuadrant() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TableQuadrant.prototype.render = function () {\n        var _a = this.props, grid = _a.grid, enableRowHeader = _a.enableRowHeader, quadrantType = _a.quadrantType, bodyRenderer = _a.bodyRenderer;\n        var showFrozenRowsOnly = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n        var showFrozenColumnsOnly = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n        var className = classNames(Classes.TABLE_QUADRANT, this.getQuadrantCssClass(), this.props.className);\n        var maybeMenu = enableRowHeader && CoreUtils.safeInvoke(this.props.menuRenderer);\n        var maybeRowHeader = enableRowHeader && CoreUtils.safeInvoke(this.props.rowHeaderCellRenderer, showFrozenRowsOnly);\n        var maybeColumnHeader = CoreUtils.safeInvoke(this.props.columnHeaderCellRenderer, showFrozenColumnsOnly);\n        var body = quadrantType != null\n            ? bodyRenderer(quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly)\n            : bodyRenderer();\n        // need to set bottom container size to prevent overlay clipping on scroll\n        var bottomContainerStyle = {\n            height: grid.getHeight(),\n            width: grid.getWidth(),\n        };\n        return (React.createElement(\"div\", { className: className, style: this.props.style, ref: this.props.quadrantRef },\n            React.createElement(\"div\", { className: Classes.TABLE_QUADRANT_SCROLL_CONTAINER, ref: this.props.scrollContainerRef, onScroll: this.props.onScroll, onWheel: this.props.onWheel },\n                React.createElement(\"div\", { className: Classes.TABLE_TOP_CONTAINER },\n                    maybeMenu,\n                    maybeColumnHeader),\n                React.createElement(\"div\", { className: Classes.TABLE_BOTTOM_CONTAINER, style: bottomContainerStyle },\n                    maybeRowHeader,\n                    React.createElement(\"div\", { className: Classes.TABLE_QUADRANT_BODY_CONTAINER, ref: this.props.bodyRef }, body)))));\n    };\n    TableQuadrant.prototype.validateProps = function (nextProps) {\n        var quadrantType = nextProps.quadrantType;\n        if (nextProps.onScroll != null && quadrantType != null && quadrantType !== QuadrantType.MAIN) {\n            console.warn(Errors.QUADRANT_ON_SCROLL_UNNECESSARILY_DEFINED);\n        }\n    };\n    TableQuadrant.prototype.getQuadrantCssClass = function () {\n        switch (this.props.quadrantType) {\n            case QuadrantType.MAIN:\n                return Classes.TABLE_QUADRANT_MAIN;\n            case QuadrantType.TOP:\n                return Classes.TABLE_QUADRANT_TOP;\n            case QuadrantType.LEFT:\n                return Classes.TABLE_QUADRANT_LEFT;\n            case QuadrantType.TOP_LEFT:\n                return Classes.TABLE_QUADRANT_TOP_LEFT;\n            default:\n                return undefined;\n        }\n    };\n    // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n    // declaring that and other required props here.\n    TableQuadrant.defaultProps = {\n        enableRowHeader: true,\n    };\n    return TableQuadrant;\n}(AbstractComponent));\nexport { TableQuadrant };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractComponent, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport * as ScrollUtils from \"../common/internal/scrollUtils\";\nimport { Utils } from \"../common/utils\";\nimport { QuadrantType, TableQuadrant } from \"./tableQuadrant\";\nimport { TableQuadrantStackCache } from \"./tableQuadrantStackCache\";\n// when there are no column headers, the header and menu element will\n// confusingly collapse to zero height unless we establish this default.\nvar DEFAULT_COLUMN_HEADER_HEIGHT = 30;\n// the debounce delay for updating the view on scroll. elements will be resized\n// and rejiggered once scroll has ceased for at least this long, but not before.\nvar DEFAULT_VIEW_SYNC_DELAY = 500;\n// if there are no frozen rows or columns, we still want the quadrant to be 1px\n// bigger to reveal the header border. this border leaks into the cell grid to\n// ensure that selection overlay borders (e.g.) will be perfectly flush with it.\nvar QUADRANT_MIN_SIZE = 1;\n// a list of props that trigger layout changes. when these props change,\n// quadrant views need to be explicitly resynchronized.\nvar SYNC_TRIGGER_PROP_KEYS = [\n    \"enableRowHeader\",\n    \"loadingOptions\",\n    \"numFrozenColumns\",\n    \"numFrozenRows\",\n    \"numColumns\",\n    \"numRows\",\n    \"enableColumnInteractionBar\",\n];\nvar TableQuadrantStack = /** @class */ (function (_super) {\n    tslib_1.__extends(TableQuadrantStack, _super);\n    // Public\n    // ======\n    function TableQuadrantStack(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        // Instance variables\n        // ==================\n        _this.quadrantRefs = (_a = {},\n            _a[QuadrantType.MAIN] = {},\n            _a[QuadrantType.TOP] = {},\n            _a[QuadrantType.LEFT] = {},\n            _a[QuadrantType.TOP_LEFT] = {},\n            _a);\n        _this.quadrantRefHandlers = (_b = {},\n            _b[QuadrantType.MAIN] = _this.generateQuadrantRefHandlers(QuadrantType.MAIN),\n            _b[QuadrantType.TOP] = _this.generateQuadrantRefHandlers(QuadrantType.TOP),\n            _b[QuadrantType.LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.LEFT),\n            _b[QuadrantType.TOP_LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.TOP_LEFT),\n            _b);\n        // this flag helps us avoid redundant work in the MAIN quadrant's onScroll callback, if the\n        // callback was triggered from a manual scrollTop/scrollLeft update within an onWheel.\n        _this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n        // Quadrant-specific renderers\n        // ===========================\n        // Menu\n        _this.renderMainQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.MAIN].menu);\n        };\n        _this.renderTopQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.TOP].menu);\n        };\n        _this.renderLeftQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.LEFT].menu);\n        };\n        _this.renderTopLeftQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].menu);\n        };\n        // Column header\n        _this.renderMainQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideMain;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderTopQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideTop;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideLeft;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderTopLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideTopLeft;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        // Row header\n        _this.renderMainQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideMain;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderTopQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideTop;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideLeft;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderTopLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideTopLeft;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        // Event handlers\n        // ==============\n        // Scrolling\n        // ---------\n        _this.handleMainQuadrantScroll = function (event) {\n            if (_this.wasMainQuadrantScrollTriggeredByWheelEvent) {\n                _this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n                return;\n            }\n            // invoke onScroll - which may read current scroll position - before\n            // forcing a reflow with upcoming .scroll{Top,Left} setters.\n            CoreUtils.safeInvoke(_this.props.onScroll, event);\n            // batch DOM reads here. note that onScroll events don't include deltas\n            // like onWheel events do, so we have to read from the DOM directly.\n            var mainScrollContainer = _this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n            var nextScrollLeft = mainScrollContainer.scrollLeft;\n            var nextScrollTop = mainScrollContainer.scrollTop;\n            // with the \"scroll\" event, scroll offsets are updated prior to the\n            // event's firing, so no explicit update needed.\n            _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n            _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop);\n            // sync less important view stuff when scrolling/wheeling stops.\n            _this.syncQuadrantViewsDebounced();\n        };\n        _this.handleWheel = function (event) {\n            // again, let the listener read the current scroll position before we\n            // force a reflow by resizing or repositioning stuff.\n            CoreUtils.safeInvoke(_this.props.onScroll, event);\n            // this helper performs DOM reads, so do them together before the writes below.\n            var nextScrollLeft = _this.getNextScrollOffset(\"horizontal\", event.deltaX);\n            var nextScrollTop = _this.getNextScrollOffset(\"vertical\", event.deltaY);\n            // update this flag before updating the main quadrant scroll offsets,\n            // since we need this set before onScroll fires.\n            if (nextScrollLeft != null || nextScrollTop != null) {\n                _this.wasMainQuadrantScrollTriggeredByWheelEvent = true;\n            }\n            // manually update the affected quadrant's scroll position to make sure\n            // it stays perfectly in sync with dependent quadrants in each frame.\n            // note: these DOM writes are batched together after the reads above.\n            _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollLeft = nextScrollLeft;\n            _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollTop = nextScrollTop;\n            _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n            _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop);\n            // sync less important view stuff when scrolling/wheeling stops.\n            _this.syncQuadrantViewsDebounced();\n        };\n        _this.getNextScrollOffset = function (direction, delta) {\n            var _a = _this.props, grid = _a.grid, isHorizontalScrollDisabled = _a.isHorizontalScrollDisabled, isVerticalScrollDisabled = _a.isVerticalScrollDisabled;\n            var isHorizontal = direction === \"horizontal\";\n            var scrollKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n            var isScrollDisabled = isHorizontal ? isHorizontalScrollDisabled : isVerticalScrollDisabled;\n            if (isScrollDisabled) {\n                return undefined;\n            }\n            // measure client size on the first event of the current wheel gesture,\n            // then grab cached values on successive events to eliminate DOM reads.\n            // requires clearing the cached values in the debounced view-update at\n            // the end of the wheel event.\n            // ASSUMPTION: the client size won't change during the wheel event.\n            var clientSize = isHorizontal\n                ? _this.cache.getScrollContainerClientWidth()\n                : _this.cache.getScrollContainerClientHeight();\n            if (clientSize == null) {\n                // should trigger only on the first scroll of the wheel gesture.\n                // will save client width and height sizes in the cache.\n                clientSize = _this.updateScrollContainerClientSize(isHorizontal);\n            }\n            // by now, the client width and height will have been saved in cache, so\n            // they can't be nully anymore. also, events can only happen after\n            // mount, so we're guaranteed to have measured the header sizes in\n            // syncQuadrantViews() by now too, as it's invoked on mount.\n            var containerSize = isHorizontal\n                ? _this.cache.getScrollContainerClientWidth() - _this.cache.getRowHeaderWidth()\n                : _this.cache.getScrollContainerClientHeight() - _this.cache.getColumnHeaderHeight();\n            var gridSize = isHorizontal ? grid.getWidth() : grid.getHeight();\n            var maxScrollOffset = Math.max(0, gridSize - containerSize);\n            var currScrollOffset = _this.cache.getScrollOffset(scrollKey);\n            var nextScrollOffset = CoreUtils.clamp(currScrollOffset + delta, 0, maxScrollOffset);\n            return nextScrollOffset;\n        };\n        // Resizing\n        // --------\n        // Columns\n        _this.handleColumnResizeGuideMain = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.MAIN);\n        };\n        _this.handleColumnResizeGuideTop = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP);\n        };\n        _this.handleColumnResizeGuideLeft = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.LEFT);\n        };\n        _this.handleColumnResizeGuideTopLeft = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP_LEFT);\n        };\n        _this.invokeColumnResizeHandler = function (verticalGuides, quadrantType) {\n            var adjustedGuides = _this.adjustVerticalGuides(verticalGuides, quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleColumnResizeGuide, adjustedGuides);\n        };\n        // Rows\n        _this.handleRowResizeGuideMain = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.MAIN);\n        };\n        _this.handleRowResizeGuideTop = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP);\n        };\n        _this.handleRowResizeGuideLeft = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.LEFT);\n        };\n        _this.handleRowResizeGuideTopLeft = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP_LEFT);\n        };\n        _this.invokeRowResizeHandler = function (horizontalGuides, quadrantType) {\n            var adjustedGuides = _this.adjustHorizontalGuides(horizontalGuides, quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleRowResizeGuide, adjustedGuides);\n        };\n        // Reordering\n        // ----------\n        // Columns\n        _this.handleColumnsReordering = function (oldIndex, newIndex, length) {\n            var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n            var leftOffset = _this.props.grid.getCumulativeWidthBefore(guideIndex);\n            var quadrantType = guideIndex <= _this.props.numFrozenColumns ? QuadrantType.TOP_LEFT : QuadrantType.TOP;\n            var verticalGuides = _this.adjustVerticalGuides([leftOffset], quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleColumnsReordering, verticalGuides);\n        };\n        // Rows\n        _this.handleRowsReordering = function (oldIndex, newIndex, length) {\n            var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n            var topOffset = _this.props.grid.getCumulativeHeightBefore(guideIndex);\n            var quadrantType = guideIndex <= _this.props.numFrozenRows ? QuadrantType.TOP_LEFT : QuadrantType.LEFT;\n            var horizontalGuides = _this.adjustHorizontalGuides([topOffset], quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleRowsReordering, horizontalGuides);\n        };\n        // Size syncing\n        // ============\n        _this.syncQuadrantViewsDebounced = function () {\n            var viewSyncDelay = _this.props.viewSyncDelay;\n            if (viewSyncDelay < 0) {\n                // update synchronously\n                _this.syncQuadrantViews();\n            }\n            else {\n                // update asynchronously after a debounced delay\n                clearInterval(_this.debouncedViewSyncInterval);\n                _this.debouncedViewSyncInterval = window.setTimeout(_this.syncQuadrantViews, viewSyncDelay);\n            }\n        };\n        _this.syncQuadrantViews = function () {\n            var mainRefs = _this.quadrantRefs[QuadrantType.MAIN];\n            var mainScrollContainer = mainRefs.scrollContainer;\n            //\n            // Reads (batched to avoid DOM thrashing)\n            //\n            var rowHeaderWidth = _this.measureDesiredRowHeaderWidth();\n            var columnHeaderHeight = _this.measureDesiredColumnHeaderHeight();\n            var leftQuadrantGridWidth = _this.getSecondaryQuadrantGridSize(\"width\");\n            var topQuadrantGridHeight = _this.getSecondaryQuadrantGridSize(\"height\");\n            var leftQuadrantWidth = rowHeaderWidth + leftQuadrantGridWidth;\n            var topQuadrantHeight = columnHeaderHeight + topQuadrantGridHeight;\n            var rightScrollBarWidth = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"vertical\");\n            var bottomScrollBarHeight = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"horizontal\");\n            // ensure neither of these measurements confusingly clamps to zero height.\n            var adjustedColumnHeaderHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(columnHeaderHeight);\n            var adjustedTopQuadrantHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(topQuadrantHeight);\n            // Update cache: let's read now whatever values we might need later.\n            // prevents unnecessary reflows in the future.\n            _this.cache.setRowHeaderWidth(rowHeaderWidth);\n            _this.cache.setColumnHeaderHeight(columnHeaderHeight);\n            // ...however, we also clear the cached client size, so we can read it\n            // again when a new scroll begins. not safe to assume this won't change.\n            // TODO: maybe use the ResizeSensor?\n            _this.cache.setScrollContainerClientWidth(undefined);\n            _this.cache.setScrollContainerClientHeight(undefined);\n            //\n            // Writes (batched to avoid DOM thrashing)\n            //\n            // Quadrant-size sync'ing: make the quadrants precisely as big as they\n            // need to be to fit their variable-sized headers and/or frozen areas.\n            _this.maybesSetQuadrantRowHeaderSizes(rowHeaderWidth);\n            _this.maybeSetQuadrantMenuElementSizes(rowHeaderWidth, adjustedColumnHeaderHeight);\n            _this.maybeSetQuadrantSizes(leftQuadrantWidth, adjustedTopQuadrantHeight);\n            // Scrollbar clearance: tweak the quadrant bottom/right offsets to\n            // reveal the MAIN-quadrant scrollbars if they're visible.\n            _this.maybeSetQuadrantPositionOffset(QuadrantType.TOP, \"right\", rightScrollBarWidth);\n            _this.maybeSetQuadrantPositionOffset(QuadrantType.LEFT, \"bottom\", bottomScrollBarHeight);\n            // Scroll syncing: sync the scroll offsets of quadrants that may or may\n            // not have been around prior to this update.\n            _this.maybeSetQuadrantScrollOffset(QuadrantType.LEFT, \"scrollTop\");\n            _this.maybeSetQuadrantScrollOffset(QuadrantType.TOP, \"scrollLeft\");\n        };\n        _this.maybeSetQuadrantSizes = function (width, height) {\n            _this.maybesSetQuadrantSize(QuadrantType.LEFT, \"width\", width);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP, \"height\", height);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"width\", width);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"height\", height);\n        };\n        _this.maybesSetQuadrantSize = function (quadrantType, dimension, value) {\n            var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n            if (quadrant != null) {\n                quadrant.style[dimension] = value + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantPositionOffset = function (quadrantType, side, value) {\n            var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n            if (quadrant != null) {\n                quadrant.style[side] = value + \"px\";\n            }\n        };\n        _this.maybesSetQuadrantRowHeaderSizes = function (width) {\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.MAIN, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.LEFT, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP_LEFT, width);\n        };\n        _this.maybeSetQuadrantRowHeaderSize = function (quadrantType, width) {\n            var rowHeader = _this.quadrantRefs[quadrantType].rowHeader;\n            if (rowHeader != null) {\n                rowHeader.style.width = width + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantMenuElementSizes = function (width, height) {\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.MAIN, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.LEFT, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP_LEFT, width, height);\n        };\n        _this.maybeSetQuadrantMenuElementSize = function (quadrantType, width, height) {\n            var menu = _this.quadrantRefs[quadrantType].menu;\n            if (menu != null) {\n                menu.style.width = width + \"px\";\n                menu.style.height = height + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantScrollOffset = function (quadrantType, scrollKey, newOffset) {\n            var scrollContainer = _this.quadrantRefs[quadrantType].scrollContainer;\n            var scrollOffset = newOffset != null ? newOffset : _this.cache.getScrollOffset(scrollKey);\n            if (scrollContainer != null) {\n                scrollContainer[scrollKey] = scrollOffset;\n            }\n        };\n        _this.handleScrollOffsetChange = function (scrollKey, offset) {\n            _this.cache.setScrollOffset(scrollKey, offset);\n            var dependentQuadrantType = scrollKey === \"scrollLeft\" ? QuadrantType.TOP : QuadrantType.LEFT;\n            _this.maybeSetQuadrantScrollOffset(dependentQuadrantType, scrollKey);\n        };\n        // callbacks trigger too frequently unless we throttle scroll and wheel\n        // events. declare these functions on the component instance since\n        // they're stateful.\n        _this.throttledHandleMainQuadrantScroll = CoreUtils.throttleReactEventCallback(_this.handleMainQuadrantScroll);\n        _this.throttledHandleWheel = CoreUtils.throttleReactEventCallback(_this.handleWheel);\n        _this.cache = new TableQuadrantStackCache();\n        return _this;\n        var _a, _b;\n    }\n    /**\n     * Scroll the main quadrant to the specified scroll offset, keeping all other quadrants in sync.\n     */\n    TableQuadrantStack.prototype.scrollToPosition = function (scrollLeft, scrollTop) {\n        var scrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n        this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n        // this will trigger the main quadrant's scroll callback below\n        scrollContainer.scrollLeft = scrollLeft;\n        scrollContainer.scrollTop = scrollTop;\n        this.syncQuadrantViews();\n    };\n    /**\n     * Synchronizes quadrant sizes and scroll offsets based on the current\n     * column, row, and header sizes. Useful for correcting quadrant sizes after\n     * explicitly resizing columns and rows, for instance.\n     *\n     * Invoking this method imperatively is cheaper than providing columnWidths\n     * or rowHeights array props to TableQuadrantStack and forcing it to run\n     * expensive array diffs upon every update.\n     */\n    TableQuadrantStack.prototype.synchronizeQuadrantViews = function () {\n        this.syncQuadrantViews();\n    };\n    TableQuadrantStack.prototype.componentDidMount = function () {\n        this.emitRefs();\n        this.syncQuadrantViews();\n    };\n    TableQuadrantStack.prototype.componentDidUpdate = function (prevProps) {\n        // sync'ing quadrant views triggers expensive reflows, so we only call\n        // it when layout-affecting props change.\n        if (!CoreUtils.shallowCompareKeys(this.props, prevProps, { include: SYNC_TRIGGER_PROP_KEYS })) {\n            this.emitRefs();\n            this.syncQuadrantViews();\n        }\n    };\n    TableQuadrantStack.prototype.render = function () {\n        var _a = this.props, grid = _a.grid, enableRowHeader = _a.enableRowHeader, bodyRenderer = _a.bodyRenderer, throttleScrolling = _a.throttleScrolling;\n        // use the more generic \"scroll\" event for the main quadrant to capture\n        // *both* scrollbar interactions and trackpad/mousewheel gestures.\n        var onMainQuadrantScroll = throttleScrolling\n            ? this.throttledHandleMainQuadrantScroll\n            : this.handleMainQuadrantScroll;\n        var onWheel = throttleScrolling ? this.throttledHandleWheel : this.handleWheel;\n        var baseProps = {\n            bodyRenderer: bodyRenderer,\n            enableRowHeader: enableRowHeader,\n            grid: grid,\n            onWheel: onWheel,\n        };\n        var shouldRenderLeftQuadrants = this.shouldRenderLeftQuadrants();\n        var maybeLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.LEFT].quadrant, quadrantType: QuadrantType.LEFT, columnHeaderCellRenderer: this.renderLeftQuadrantColumnHeader, menuRenderer: this.renderLeftQuadrantMenu, rowHeaderCellRenderer: this.renderLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.LEFT].scrollContainer }))) : (undefined);\n        var maybeTopLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].quadrant, quadrantType: QuadrantType.TOP_LEFT, columnHeaderCellRenderer: this.renderTopLeftQuadrantColumnHeader, menuRenderer: this.renderTopLeftQuadrantMenu, rowHeaderCellRenderer: this.renderTopLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].scrollContainer }))) : (undefined);\n        return (React.createElement(\"div\", { className: Classes.TABLE_QUADRANT_STACK },\n            React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { bodyRef: this.props.bodyRef, onScroll: onMainQuadrantScroll, quadrantRef: this.quadrantRefHandlers[QuadrantType.MAIN].quadrant, quadrantType: QuadrantType.MAIN, columnHeaderCellRenderer: this.renderMainQuadrantColumnHeader, menuRenderer: this.renderMainQuadrantMenu, rowHeaderCellRenderer: this.renderMainQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.MAIN].scrollContainer })),\n            React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP].quadrant, quadrantType: QuadrantType.TOP, columnHeaderCellRenderer: this.renderTopQuadrantColumnHeader, menuRenderer: this.renderTopQuadrantMenu, rowHeaderCellRenderer: this.renderTopQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP].scrollContainer })),\n            maybeLeftQuadrant,\n            maybeTopLeftQuadrant));\n    };\n    // Ref handlers\n    // ============\n    TableQuadrantStack.prototype.generateQuadrantRefHandlers = function (quadrantType) {\n        var _this = this;\n        var reducer = function (agg, key) {\n            agg[key] = function (ref) { return (_this.quadrantRefs[quadrantType][key] = ref); };\n            return agg;\n        };\n        return [\"columnHeader\", \"menu\", \"quadrant\", \"rowHeader\", \"scrollContainer\"].reduce(reducer, {});\n    };\n    // Emitters\n    // ========\n    TableQuadrantStack.prototype.emitRefs = function () {\n        CoreUtils.safeInvoke(this.props.quadrantRef, this.quadrantRefs[QuadrantType.MAIN].quadrant);\n        CoreUtils.safeInvoke(this.props.rowHeaderRef, this.quadrantRefs[QuadrantType.MAIN].rowHeader);\n        CoreUtils.safeInvoke(this.props.columnHeaderRef, this.quadrantRefs[QuadrantType.MAIN].columnHeader);\n        CoreUtils.safeInvoke(this.props.scrollContainerRef, this.quadrantRefs[QuadrantType.MAIN].scrollContainer);\n    };\n    // this function is named 'update' instead of 'set', because a 'set'\n    // function typically takes the new value as a parameter. we avoid that to\n    // keep the isHorizontal logic tree contained within this function.\n    TableQuadrantStack.prototype.updateScrollContainerClientSize = function (isHorizontal) {\n        var mainScrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n        if (isHorizontal) {\n            this.cache.setScrollContainerClientWidth(mainScrollContainer.clientWidth);\n            return this.cache.getScrollContainerClientWidth();\n        }\n        else {\n            this.cache.setScrollContainerClientHeight(mainScrollContainer.clientHeight);\n            return this.cache.getScrollContainerClientHeight();\n        }\n    };\n    TableQuadrantStack.prototype.maybeIncreaseToDefaultColumnHeaderHeight = function (height) {\n        return height <= QUADRANT_MIN_SIZE ? DEFAULT_COLUMN_HEADER_HEIGHT : height;\n    };\n    // Helpers\n    // =======\n    /**\n     * Returns the width or height of *only the grid* in the secondary quadrants\n     * (TOP, LEFT, TOP_LEFT), based on the number of frozen rows and columns.\n     */\n    TableQuadrantStack.prototype.getSecondaryQuadrantGridSize = function (dimension) {\n        var _a = this.props, grid = _a.grid, numFrozenColumns = _a.numFrozenColumns, numFrozenRows = _a.numFrozenRows;\n        var numFrozen = dimension === \"width\" ? numFrozenColumns : numFrozenRows;\n        var getterFn = dimension === \"width\" ? grid.getCumulativeWidthAt : grid.getCumulativeHeightAt;\n        // both getter functions do O(1) lookups.\n        return numFrozen > 0 ? getterFn(numFrozen - 1) : QUADRANT_MIN_SIZE;\n    };\n    /**\n     * Measures the desired width of the row header based on its tallest\n     * contents.\n     */\n    TableQuadrantStack.prototype.measureDesiredRowHeaderWidth = function () {\n        // the MAIN row header serves as the source of truth\n        var mainRowHeader = this.quadrantRefs[QuadrantType.MAIN].rowHeader;\n        if (mainRowHeader == null) {\n            return 0;\n        }\n        else {\n            // (alas, we must force a reflow to measure the row header's \"desired\" width)\n            mainRowHeader.style.width = \"auto\";\n            var desiredRowHeaderWidth = mainRowHeader.clientWidth;\n            return desiredRowHeaderWidth;\n        }\n    };\n    /**\n     * Measures the desired height of the column header based on its tallest\n     * contents.\n     */\n    TableQuadrantStack.prototype.measureDesiredColumnHeaderHeight = function () {\n        // unlike the row headers, the column headers are in a display-flex\n        // layout and are not actually bound by any fixed `height` that we set,\n        // so they'll grow freely to their necessary size. makes measuring easy!\n        var mainColumnHeader = this.quadrantRefs[QuadrantType.MAIN].columnHeader;\n        return mainColumnHeader == null ? 0 : mainColumnHeader.clientHeight;\n    };\n    TableQuadrantStack.prototype.shouldRenderLeftQuadrants = function (props) {\n        if (props === void 0) { props = this.props; }\n        var enableRowHeader = props.enableRowHeader, numFrozenColumns = props.numFrozenColumns;\n        return enableRowHeader || (numFrozenColumns != null && numFrozenColumns > 0);\n    };\n    // Resizing\n    TableQuadrantStack.prototype.adjustVerticalGuides = function (verticalGuides, quadrantType) {\n        var isFrozenQuadrant = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n        var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollLeft\");\n        var rowHeaderWidth = this.cache.getRowHeaderWidth();\n        var adjustedVerticalGuides = verticalGuides != null\n            ? verticalGuides.map(function (verticalGuide) { return verticalGuide - scrollAmount + rowHeaderWidth; })\n            : verticalGuides;\n        return adjustedVerticalGuides;\n    };\n    TableQuadrantStack.prototype.adjustHorizontalGuides = function (horizontalGuides, quadrantType) {\n        var isFrozenQuadrant = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n        var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollTop\");\n        var columnHeaderHeight = this.cache.getColumnHeaderHeight();\n        var adjustedHorizontalGuides = horizontalGuides != null\n            ? horizontalGuides.map(function (horizontalGuide) { return horizontalGuide - scrollAmount + columnHeaderHeight; })\n            : horizontalGuides;\n        return adjustedHorizontalGuides;\n    };\n    // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n    // declaring that and other required props here.\n    TableQuadrantStack.defaultProps = {\n        enableColumnInteractionBar: undefined,\n        enableRowHeader: true,\n        isHorizontalScrollDisabled: false,\n        isVerticalScrollDisabled: false,\n        throttleScrolling: true,\n        viewSyncDelay: DEFAULT_VIEW_SYNC_DELAY,\n    };\n    return TableQuadrantStack;\n}(AbstractComponent));\nexport { TableQuadrantStack };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar TableQuadrantStackCache = /** @class */ (function () {\n    function TableQuadrantStackCache() {\n        this.reset();\n    }\n    TableQuadrantStackCache.prototype.reset = function () {\n        this.cachedRowHeaderWidth = 0;\n        this.cachedColumnHeaderHeight = 0;\n        this.cachedScrollLeft = 0;\n        this.cachedScrollTop = 0;\n    };\n    // Getters\n    // =======\n    TableQuadrantStackCache.prototype.getScrollOffset = function (scrollKey) {\n        return scrollKey === \"scrollLeft\" ? this.cachedScrollLeft : this.cachedScrollTop;\n    };\n    TableQuadrantStackCache.prototype.getRowHeaderWidth = function () {\n        return this.cachedRowHeaderWidth;\n    };\n    TableQuadrantStackCache.prototype.getColumnHeaderHeight = function () {\n        return this.cachedColumnHeaderHeight;\n    };\n    TableQuadrantStackCache.prototype.getScrollContainerClientWidth = function () {\n        return this.cachedScrollContainerClientWidth;\n    };\n    TableQuadrantStackCache.prototype.getScrollContainerClientHeight = function () {\n        return this.cachedScrollContainerClientHeight;\n    };\n    // Setters\n    // =======\n    TableQuadrantStackCache.prototype.setColumnHeaderHeight = function (height) {\n        this.cachedColumnHeaderHeight = height;\n    };\n    TableQuadrantStackCache.prototype.setRowHeaderWidth = function (width) {\n        this.cachedRowHeaderWidth = width;\n    };\n    TableQuadrantStackCache.prototype.setScrollOffset = function (scrollKey, offset) {\n        if (scrollKey === \"scrollLeft\") {\n            this.cachedScrollLeft = offset;\n        }\n        else {\n            this.cachedScrollTop = offset;\n        }\n    };\n    TableQuadrantStackCache.prototype.setScrollContainerClientWidth = function (clientWidth) {\n        this.cachedScrollContainerClientWidth = clientWidth;\n    };\n    TableQuadrantStackCache.prototype.setScrollContainerClientHeight = function (clientHeight) {\n        this.cachedScrollContainerClientHeight = clientHeight;\n    };\n    return TableQuadrantStackCache;\n}());\nexport { TableQuadrantStackCache };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as Classes from \"./common/classes\";\nimport { Utils } from \"./common/utils\";\n/**\n * `Region`s contain sets of cells. Additionally, a distinction is drawn, for\n * example, between all cells within a column and the whole column itself.\n * The `RegionCardinality` enum represents these distinct types of `Region`s.\n */\nexport var RegionCardinality;\n(function (RegionCardinality) {\n    /**\n     * A region that contains a finite rectangular group of table cells\n     */\n    RegionCardinality[\"CELLS\"] = \"cells\";\n    /**\n     * A region that represents all cells within 1 or more rows.\n     */\n    RegionCardinality[\"FULL_ROWS\"] = \"full-rows\";\n    /**\n     * A region that represents all cells within 1 or more columns.\n     */\n    RegionCardinality[\"FULL_COLUMNS\"] = \"full-columns\";\n    /**\n     * A region that represents all cells in the table.\n     */\n    RegionCardinality[\"FULL_TABLE\"] = \"full-table\";\n})(RegionCardinality || (RegionCardinality = {}));\n/**\n * A convenience object for subsets of `RegionCardinality` that are commonly\n * used as the `selectionMode` prop of the `<Table>`.\n */\nexport var SelectionModes = {\n    ALL: [\n        RegionCardinality.FULL_TABLE,\n        RegionCardinality.FULL_COLUMNS,\n        RegionCardinality.FULL_ROWS,\n        RegionCardinality.CELLS,\n    ],\n    COLUMNS_AND_CELLS: [RegionCardinality.FULL_COLUMNS, RegionCardinality.CELLS],\n    COLUMNS_ONLY: [RegionCardinality.FULL_COLUMNS],\n    NONE: [],\n    ROWS_AND_CELLS: [RegionCardinality.FULL_ROWS, RegionCardinality.CELLS],\n    ROWS_ONLY: [RegionCardinality.FULL_ROWS],\n};\nexport var ColumnLoadingOption;\n(function (ColumnLoadingOption) {\n    ColumnLoadingOption[\"CELLS\"] = \"cells\";\n    ColumnLoadingOption[\"HEADER\"] = \"column-header\";\n})(ColumnLoadingOption || (ColumnLoadingOption = {}));\nexport var RowLoadingOption;\n(function (RowLoadingOption) {\n    RowLoadingOption[\"CELLS\"] = \"cells\";\n    RowLoadingOption[\"HEADER\"] = \"row-header\";\n})(RowLoadingOption || (RowLoadingOption = {}));\nexport var TableLoadingOption;\n(function (TableLoadingOption) {\n    TableLoadingOption[\"CELLS\"] = \"cells\";\n    TableLoadingOption[\"COLUMN_HEADERS\"] = \"column-header\";\n    TableLoadingOption[\"ROW_HEADERS\"] = \"row-header\";\n})(TableLoadingOption || (TableLoadingOption = {}));\nvar Regions = /** @class */ (function () {\n    function Regions() {\n    }\n    /**\n     * Determines the cardinality of a region. We use null values to indicate\n     * an unbounded interval. Therefore, an example of a region containing the\n     * second and third columns would be:\n     *\n     * ```js\n     * { rows: null, cols: [1, 2] }\n     * ```\n     *\n     * In this case, this method would return `RegionCardinality.FULL_COLUMNS`.\n     *\n     * If both rows and columns are unbounded, then the region covers the\n     * entire table. Therefore, a region like this:\n     *\n     * ```js\n     * { rows: null, cols: null }\n     * ```\n     *\n     * will return `RegionCardinality.FULL_TABLE`.\n     *\n     * An example of a region containing a single cell in the table would be:\n     *\n     * ```js\n     * { rows: [5, 5], cols: [2, 2] }\n     * ```\n     *\n     * In this case, this method would return `RegionCardinality.CELLS`.\n     */\n    Regions.getRegionCardinality = function (region) {\n        if (region.cols != null && region.rows != null) {\n            return RegionCardinality.CELLS;\n        }\n        else if (region.cols != null) {\n            return RegionCardinality.FULL_COLUMNS;\n        }\n        else if (region.rows != null) {\n            return RegionCardinality.FULL_ROWS;\n        }\n        else {\n            return RegionCardinality.FULL_TABLE;\n        }\n    };\n    Regions.getFocusCellCoordinatesFromRegion = function (region) {\n        var regionCardinality = Regions.getRegionCardinality(region);\n        switch (regionCardinality) {\n            case RegionCardinality.FULL_TABLE:\n                return { col: 0, row: 0 };\n            case RegionCardinality.FULL_COLUMNS:\n                return { col: region.cols[0], row: 0 };\n            case RegionCardinality.FULL_ROWS:\n                return { col: 0, row: region.rows[0] };\n            case RegionCardinality.CELLS:\n                return { col: region.cols[0], row: region.rows[0] };\n            default:\n                return null;\n        }\n    };\n    /**\n     * Returns a deep copy of the provided region.\n     */\n    Regions.copy = function (region) {\n        var cardinality = Regions.getRegionCardinality(region);\n        // we need to be careful not to explicitly spell out `rows: undefined`\n        // (e.g.) if the \"rows\" key is completely absent, otherwise\n        // deep-equality checks will fail.\n        if (cardinality === RegionCardinality.CELLS) {\n            return Regions.cell(region.rows[0], region.cols[0], region.rows[1], region.cols[1]);\n        }\n        else if (cardinality === RegionCardinality.FULL_COLUMNS) {\n            return Regions.column(region.cols[0], region.cols[1]);\n        }\n        else if (cardinality === RegionCardinality.FULL_ROWS) {\n            return Regions.row(region.rows[0], region.rows[1]);\n        }\n        else {\n            return Regions.table();\n        }\n    };\n    /**\n     * Returns a region containing one or more cells.\n     */\n    Regions.cell = function (row, col, row2, col2) {\n        return {\n            cols: this.normalizeInterval(col, col2),\n            rows: this.normalizeInterval(row, row2),\n        };\n    };\n    /**\n     * Returns a region containing one or more full rows.\n     */\n    Regions.row = function (row, row2) {\n        return { rows: this.normalizeInterval(row, row2) };\n    };\n    /**\n     * Returns a region containing one or more full columns.\n     */\n    Regions.column = function (col, col2) {\n        return { cols: this.normalizeInterval(col, col2) };\n    };\n    /**\n     * Returns a region containing the entire table.\n     */\n    Regions.table = function () {\n        return {};\n    };\n    /**\n     * Adds the region to the end of a cloned copy of the supplied region\n     * array.\n     */\n    Regions.add = function (regions, region) {\n        var copy = regions.slice();\n        copy.push(region);\n        return copy;\n    };\n    /**\n     * Replaces the region at the end of a cloned copy of the supplied region\n     * array, or at the specific index if one is provided.\n     */\n    Regions.update = function (regions, region, index) {\n        var copy = regions.slice();\n        if (index != null) {\n            copy.splice(index, 1, region);\n        }\n        else {\n            copy.pop();\n            copy.push(region);\n        }\n        return copy;\n    };\n    /**\n     * Clamps the region's start and end indices between 0 and the provided\n     * maximum values.\n     */\n    Regions.clampRegion = function (region, maxRowIndex, maxColumnIndex) {\n        var nextRegion = Regions.copy(region);\n        if (region.rows != null) {\n            nextRegion.rows[0] = Utils.clamp(region.rows[0], 0, maxRowIndex);\n            nextRegion.rows[1] = Utils.clamp(region.rows[1], 0, maxRowIndex);\n        }\n        if (region.cols != null) {\n            nextRegion.cols[0] = Utils.clamp(region.cols[0], 0, maxColumnIndex);\n            nextRegion.cols[1] = Utils.clamp(region.cols[1], 0, maxColumnIndex);\n        }\n        return nextRegion;\n    };\n    /**\n     * Returns true iff the specified region is equal to the last region in\n     * the region list. This allows us to avoid immediate additive re-selection.\n     */\n    Regions.lastRegionIsEqual = function (regions, region) {\n        if (regions == null || regions.length === 0) {\n            return false;\n        }\n        var lastRegion = regions[regions.length - 1];\n        return Regions.regionsEqual(lastRegion, region);\n    };\n    /**\n     * Returns the index of the region that is equal to the supplied\n     * parameter. Returns -1 if no such region is found.\n     */\n    Regions.findMatchingRegion = function (regions, region) {\n        if (regions == null) {\n            return -1;\n        }\n        for (var i = 0; i < regions.length; i++) {\n            if (Regions.regionsEqual(regions[i], region)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Returns the index of the region that wholly contains the supplied\n     * parameter. Returns -1 if no such region is found.\n     */\n    Regions.findContainingRegion = function (regions, region) {\n        if (regions == null) {\n            return -1;\n        }\n        for (var i = 0; i < regions.length; i++) {\n            if (Regions.regionContains(regions[i], region)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Returns true if the regions contain a region that has FULL_COLUMNS\n     * cardinality and contains the specified column index.\n     */\n    Regions.hasFullColumn = function (regions, col) {\n        if (regions == null) {\n            return false;\n        }\n        for (var _i = 0, regions_1 = regions; _i < regions_1.length; _i++) {\n            var region = regions_1[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            if (cardinality === RegionCardinality.FULL_TABLE) {\n                return true;\n            }\n            if (cardinality === RegionCardinality.FULL_COLUMNS && Regions.intervalContainsIndex(region.cols, col)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns true if the regions contain a region that has FULL_ROWS\n     * cardinality and contains the specified row index.\n     */\n    Regions.hasFullRow = function (regions, row) {\n        if (regions == null) {\n            return false;\n        }\n        for (var _i = 0, regions_2 = regions; _i < regions_2.length; _i++) {\n            var region = regions_2[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            if (cardinality === RegionCardinality.FULL_TABLE) {\n                return true;\n            }\n            if (cardinality === RegionCardinality.FULL_ROWS && Regions.intervalContainsIndex(region.rows, row)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns true if the regions contain a region that has FULL_TABLE cardinality\n     */\n    Regions.hasFullTable = function (regions) {\n        if (regions == null) {\n            return false;\n        }\n        for (var _i = 0, regions_3 = regions; _i < regions_3.length; _i++) {\n            var region = regions_3[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            if (cardinality === RegionCardinality.FULL_TABLE) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns true if the regions fully contain the query region.\n     */\n    Regions.containsRegion = function (regions, query) {\n        return Regions.overlapsRegion(regions, query, false);\n    };\n    /**\n     * Returns true if the regions at least partially overlap the query region.\n     */\n    Regions.overlapsRegion = function (regions, query, allowPartialOverlap) {\n        if (allowPartialOverlap === void 0) { allowPartialOverlap = false; }\n        var intervalCompareFn = allowPartialOverlap ? Regions.intervalOverlaps : Regions.intervalContains;\n        if (regions == null || query == null) {\n            return false;\n        }\n        for (var _i = 0, regions_4 = regions; _i < regions_4.length; _i++) {\n            var region = regions_4[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    return true;\n                case RegionCardinality.FULL_COLUMNS:\n                    if (intervalCompareFn(region.cols, query.cols)) {\n                        return true;\n                    }\n                    continue;\n                case RegionCardinality.FULL_ROWS:\n                    if (intervalCompareFn(region.rows, query.rows)) {\n                        return true;\n                    }\n                    continue;\n                case RegionCardinality.CELLS:\n                    if (intervalCompareFn(region.cols, query.cols) && intervalCompareFn(region.rows, query.rows)) {\n                        return true;\n                    }\n                    continue;\n                default:\n                    break;\n            }\n        }\n        return false;\n    };\n    Regions.eachUniqueFullColumn = function (regions, iteratee) {\n        if (regions == null || regions.length === 0 || iteratee == null) {\n            return;\n        }\n        var seen = {};\n        regions.forEach(function (region) {\n            if (Regions.getRegionCardinality(region) === RegionCardinality.FULL_COLUMNS) {\n                var _a = region.cols, start = _a[0], end = _a[1];\n                for (var col = start; col <= end; col++) {\n                    if (!seen[col]) {\n                        seen[col] = true;\n                        iteratee(col);\n                    }\n                }\n            }\n        });\n    };\n    Regions.eachUniqueFullRow = function (regions, iteratee) {\n        if (regions == null || regions.length === 0 || iteratee == null) {\n            return;\n        }\n        var seen = {};\n        regions.forEach(function (region) {\n            if (Regions.getRegionCardinality(region) === RegionCardinality.FULL_ROWS) {\n                var _a = region.rows, start = _a[0], end = _a[1];\n                for (var row = start; row <= end; row++) {\n                    if (!seen[row]) {\n                        seen[row] = true;\n                        iteratee(row);\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Using the supplied array of non-contiguous `IRegion`s, this method\n     * returns an ordered array of every unique cell that exists in those\n     * regions.\n     */\n    Regions.enumerateUniqueCells = function (regions, numRows, numCols) {\n        if (regions == null || regions.length === 0) {\n            return [];\n        }\n        var seen = {};\n        var list = [];\n        for (var _i = 0, regions_5 = regions; _i < regions_5.length; _i++) {\n            var region = regions_5[_i];\n            Regions.eachCellInRegion(region, numRows, numCols, function (row, col) {\n                // add to list if not seen\n                var key = row + \"-\" + col;\n                if (seen[key] !== true) {\n                    seen[key] = true;\n                    list.push([row, col]);\n                }\n            });\n        }\n        // sort list by rows then columns\n        list.sort(Regions.rowFirstComparator);\n        return list;\n    };\n    /**\n     * Using the supplied region, returns an \"equivalent\" region of\n     * type CELLS that define the bounds of the given region\n     */\n    Regions.getCellRegionFromRegion = function (region, numRows, numCols) {\n        var regionCardinality = Regions.getRegionCardinality(region);\n        switch (regionCardinality) {\n            case RegionCardinality.FULL_TABLE:\n                return Regions.cell(0, 0, numRows - 1, numCols - 1);\n            case RegionCardinality.FULL_COLUMNS:\n                return Regions.cell(0, region.cols[0], numRows - 1, region.cols[1]);\n            case RegionCardinality.FULL_ROWS:\n                return Regions.cell(region.rows[0], 0, region.rows[1], numCols - 1);\n            case RegionCardinality.CELLS:\n                return Regions.cell(region.rows[0], region.cols[0], region.rows[1], region.cols[1]);\n            default:\n                return null;\n        }\n    };\n    /**\n     * Maps a dense array of cell coordinates to a sparse 2-dimensional array\n     * of cell values.\n     *\n     * We create a new 2-dimensional array representing the smallest single\n     * contiguous `IRegion` that contains all cells in the supplied array. We\n     * invoke the mapper callback only on the cells in the supplied coordinate\n     * array and store the result. Returns the resulting 2-dimensional array.\n     */\n    Regions.sparseMapCells = function (cells, mapper) {\n        var bounds = Regions.getBoundingRegion(cells);\n        if (bounds == null) {\n            return null;\n        }\n        var numRows = bounds.rows[1] + 1 - bounds.rows[0];\n        var numCols = bounds.cols[1] + 1 - bounds.cols[0];\n        var result = Utils.times(numRows, function () { return new Array(numCols); });\n        cells.forEach(function (_a) {\n            var row = _a[0], col = _a[1];\n            result[row - bounds.rows[0]][col - bounds.cols[0]] = mapper(row, col);\n        });\n        return result;\n    };\n    /**\n     * Returns the smallest single contiguous `IRegion` that contains all cells in the\n     * supplied array.\n     */\n    Regions.getBoundingRegion = function (cells) {\n        var minRow;\n        var maxRow;\n        var minCol;\n        var maxCol;\n        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n            var _a = cells_1[_i], row = _a[0], col = _a[1];\n            minRow = minRow == null || row < minRow ? row : minRow;\n            maxRow = maxRow == null || row > maxRow ? row : maxRow;\n            minCol = minCol == null || col < minCol ? col : minCol;\n            maxCol = maxCol == null || col > maxCol ? col : maxCol;\n        }\n        if (minRow == null) {\n            return null;\n        }\n        return {\n            cols: [minCol, maxCol],\n            rows: [minRow, maxRow],\n        };\n    };\n    Regions.isValid = function (region) {\n        if (region == null) {\n            return false;\n        }\n        if (region.rows != null && (region.rows[0] < 0 || region.rows[1] < 0)) {\n            return false;\n        }\n        if (region.cols != null && (region.cols[0] < 0 || region.cols[1] < 0)) {\n            return false;\n        }\n        return true;\n    };\n    Regions.isRegionValidForTable = function (region, numRows, numCols) {\n        if (numRows === 0 || numCols === 0) {\n            return false;\n        }\n        else if (region.rows != null && !intervalInRangeInclusive(region.rows, 0, numRows - 1)) {\n            return false;\n        }\n        else if (region.cols != null && !intervalInRangeInclusive(region.cols, 0, numCols - 1)) {\n            return false;\n        }\n        return true;\n    };\n    Regions.joinStyledRegionGroups = function (selectedRegions, otherRegions, focusedCell) {\n        var regionGroups = [];\n        if (otherRegions != null) {\n            regionGroups = regionGroups.concat(otherRegions);\n        }\n        if (selectedRegions != null && selectedRegions.length > 0) {\n            regionGroups.push({\n                className: Classes.TABLE_SELECTION_REGION,\n                regions: selectedRegions,\n            });\n        }\n        if (focusedCell != null) {\n            regionGroups.push({\n                className: Classes.TABLE_FOCUS_REGION,\n                regions: [Regions.cell(focusedCell.row, focusedCell.col)],\n            });\n        }\n        return regionGroups;\n    };\n    Regions.regionsEqual = function (regionA, regionB) {\n        return Regions.intervalsEqual(regionA.rows, regionB.rows) && Regions.intervalsEqual(regionA.cols, regionB.cols);\n    };\n    /**\n     * Expands an old region to the minimal bounding region that also contains\n     * the new region. If the regions have different cardinalities, then the new\n     * region is returned. Useful for expanding a selected region on\n     * shift+click, for instance.\n     */\n    Regions.expandRegion = function (oldRegion, newRegion) {\n        var oldRegionCardinality = Regions.getRegionCardinality(oldRegion);\n        var newRegionCardinality = Regions.getRegionCardinality(newRegion);\n        if (newRegionCardinality !== oldRegionCardinality) {\n            return newRegion;\n        }\n        switch (newRegionCardinality) {\n            case RegionCardinality.FULL_ROWS: {\n                var rowStart = Math.min(oldRegion.rows[0], newRegion.rows[0]);\n                var rowEnd = Math.max(oldRegion.rows[1], newRegion.rows[1]);\n                return Regions.row(rowStart, rowEnd);\n            }\n            case RegionCardinality.FULL_COLUMNS: {\n                var colStart = Math.min(oldRegion.cols[0], newRegion.cols[0]);\n                var colEnd = Math.max(oldRegion.cols[1], newRegion.cols[1]);\n                return Regions.column(colStart, colEnd);\n            }\n            case RegionCardinality.CELLS: {\n                var rowStart = Math.min(oldRegion.rows[0], newRegion.rows[0]);\n                var colStart = Math.min(oldRegion.cols[0], newRegion.cols[0]);\n                var rowEnd = Math.max(oldRegion.rows[1], newRegion.rows[1]);\n                var colEnd = Math.max(oldRegion.cols[1], newRegion.cols[1]);\n                return Regions.cell(rowStart, colStart, rowEnd, colEnd);\n            }\n            default:\n                return Regions.table();\n        }\n    };\n    /**\n     * Iterates over the cells within an `IRegion`, invoking the callback with\n     * each cell's coordinates.\n     */\n    Regions.eachCellInRegion = function (region, numRows, numCols, iteratee) {\n        var cardinality = Regions.getRegionCardinality(region);\n        switch (cardinality) {\n            case RegionCardinality.FULL_TABLE:\n                for (var row = 0; row < numRows; row++) {\n                    for (var col = 0; col < numCols; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            case RegionCardinality.FULL_COLUMNS:\n                for (var row = 0; row < numRows; row++) {\n                    for (var col = region.cols[0]; col <= region.cols[1]; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            case RegionCardinality.FULL_ROWS:\n                for (var row = region.rows[0]; row <= region.rows[1]; row++) {\n                    for (var col = 0; col < numCols; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            case RegionCardinality.CELLS:\n                for (var row = region.rows[0]; row <= region.rows[1]; row++) {\n                    for (var col = region.cols[0]; col <= region.cols[1]; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    };\n    Regions.regionContains = function (regionA, regionB) {\n        // containsRegion expects an array of regions as the first param\n        return Regions.overlapsRegion([regionA], regionB, false);\n    };\n    Regions.intervalsEqual = function (ivalA, ivalB) {\n        if (ivalA == null) {\n            return ivalB == null;\n        }\n        else if (ivalB == null) {\n            return false;\n        }\n        else {\n            return ivalA[0] === ivalB[0] && ivalA[1] === ivalB[1];\n        }\n    };\n    Regions.intervalContainsIndex = function (interval, index) {\n        if (interval == null) {\n            return false;\n        }\n        return interval[0] <= index && interval[1] >= index;\n    };\n    Regions.intervalContains = function (ivalA, ivalB) {\n        if (ivalA == null || ivalB == null) {\n            return false;\n        }\n        return ivalA[0] <= ivalB[0] && ivalB[1] <= ivalA[1];\n    };\n    Regions.intervalOverlaps = function (ivalA, ivalB) {\n        if (ivalA == null || ivalB == null) {\n            return false;\n        }\n        if (ivalA[1] < ivalB[0] || ivalA[0] > ivalB[1]) {\n            return false;\n        }\n        return true;\n    };\n    Regions.rowFirstComparator = function (a, b) {\n        var rowDiff = a[0] - b[0];\n        return rowDiff === 0 ? a[1] - b[1] : rowDiff;\n    };\n    Regions.numericalComparator = function (a, b) {\n        return a - b;\n    };\n    Regions.normalizeInterval = function (coord, coord2) {\n        if (coord2 == null) {\n            coord2 = coord;\n        }\n        var interval = [coord, coord2];\n        interval.sort(Regions.numericalComparator);\n        return interval;\n    };\n    return Regions;\n}());\nexport { Regions };\nfunction intervalInRangeInclusive(interval, minInclusive, maxInclusive) {\n    return (inRangeInclusive(interval[0], minInclusive, maxInclusive) &&\n        inRangeInclusive(interval[1], minInclusive, maxInclusive));\n}\nfunction inRangeInclusive(value, minInclusive, maxInclusive) {\n    return value >= minInclusive && value <= maxInclusive;\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractComponent, Hotkey, Hotkeys, HotkeysTarget, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Column } from \"./column\";\nimport * as Classes from \"./common/classes\";\nimport { Clipboard } from \"./common/clipboard\";\nimport { columnInteractionBarContextTypes } from \"./common/context\";\nimport { Direction } from \"./common/direction\";\nimport * as Errors from \"./common/errors\";\nimport { Grid } from \"./common/grid\";\nimport * as FocusedCellUtils from \"./common/internal/focusedCellUtils\";\nimport * as ScrollUtils from \"./common/internal/scrollUtils\";\nimport * as SelectionUtils from \"./common/internal/selectionUtils\";\nimport { Rect } from \"./common/rect\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { Utils } from \"./common/utils\";\nimport { ColumnHeader } from \"./headers/columnHeader\";\nimport { ColumnHeaderCell } from \"./headers/columnHeaderCell\";\nimport { renderDefaultRowHeader, RowHeader } from \"./headers/rowHeader\";\nimport { ResizeSensor } from \"./interactions/resizeSensor\";\nimport { GuideLayer } from \"./layers/guides\";\nimport { RegionLayer } from \"./layers/regions\";\nimport { Locator } from \"./locator\";\nimport { QuadrantType } from \"./quadrants/tableQuadrant\";\nimport { TableQuadrantStack } from \"./quadrants/tableQuadrantStack\";\nimport { ColumnLoadingOption, RegionCardinality, Regions, SelectionModes, TableLoadingOption, } from \"./regions\";\nimport { TableBody } from \"./tableBody\";\nvar Table = /** @class */ (function (_super) {\n    tslib_1.__extends(Table, _super);\n    function Table(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.refHandlers = {\n            cellContainer: function (ref) { return (_this.cellContainerElement = ref); },\n            columnHeader: function (ref) { return (_this.columnHeaderElement = ref); },\n            mainQuadrant: function (ref) { return (_this.mainQuadrantElement = ref); },\n            quadrantStack: function (ref) { return (_this.quadrantStackInstance = ref); },\n            rootTable: function (ref) { return (_this.rootTableElement = ref); },\n            rowHeader: function (ref) { return (_this.rowHeaderElement = ref); },\n            scrollContainer: function (ref) { return (_this.scrollContainerElement = ref); },\n        };\n        // when true, we'll need to imperatively synchronize quadrant views after\n        // the update. this variable lets us avoid expensively diff'ing columnWidths\n        // and rowHeights in <TableQuadrantStack> on each update.\n        _this.didUpdateColumnOrRowSizes = false;\n        // this value is set to `true` when all cells finish mounting for the first\n        // time. it serves as a signal that we can switch to batch rendering.\n        _this.didCompletelyMount = false;\n        // Selection resize\n        // ----------------\n        _this.handleSelectionResizeUp = function (e) { return _this.handleSelectionResize(e, Direction.UP); };\n        _this.handleSelectionResizeDown = function (e) { return _this.handleSelectionResize(e, Direction.DOWN); };\n        _this.handleSelectionResizeLeft = function (e) { return _this.handleSelectionResize(e, Direction.LEFT); };\n        _this.handleSelectionResizeRight = function (e) { return _this.handleSelectionResize(e, Direction.RIGHT); };\n        _this.handleSelectionResize = function (e, direction) {\n            e.preventDefault();\n            e.stopPropagation();\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions;\n            if (selectedRegions.length === 0) {\n                return;\n            }\n            var index = FocusedCellUtils.getFocusedOrLastSelectedIndex(selectedRegions, focusedCell);\n            var region = selectedRegions[index];\n            var nextRegion = SelectionUtils.resizeRegion(region, direction, focusedCell);\n            _this.updateSelectedRegionAtIndex(nextRegion, index);\n        };\n        _this.handleCopy = function (e) {\n            var _a = _this.props, getCellClipboardData = _a.getCellClipboardData, onCopy = _a.onCopy;\n            var selectedRegions = _this.state.selectedRegions;\n            if (getCellClipboardData == null) {\n                return;\n            }\n            // prevent \"real\" copy from being called\n            e.preventDefault();\n            e.stopPropagation();\n            var cells = Regions.enumerateUniqueCells(selectedRegions, _this.grid.numRows, _this.grid.numCols);\n            var sparse = Regions.sparseMapCells(cells, getCellClipboardData);\n            if (sparse != null) {\n                var success = Clipboard.copyCells(sparse);\n                CoreUtils.safeInvoke(onCopy, success);\n            }\n        };\n        _this.renderMenu = function (refHandler) {\n            var classes = classNames(Classes.TABLE_MENU, (_a = {},\n                _a[Classes.TABLE_SELECTION_ENABLED] = _this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE),\n                _a));\n            return (React.createElement(\"div\", { className: classes, ref: refHandler, onMouseDown: _this.handleMenuMouseDown }, _this.maybeRenderRegions(_this.styleMenuRegion)));\n            var _a;\n        };\n        _this.handleMenuMouseDown = function (e) {\n            // the shift+click interaction expands the region from the focused cell.\n            // thus, if shift is pressed we shouldn't move the focused cell.\n            _this.selectAll(!e.shiftKey);\n        };\n        _this.selectAll = function (shouldUpdateFocusedCell) {\n            var selectionHandler = _this.getEnabledSelectionHandler(RegionCardinality.FULL_TABLE);\n            // clicking on upper left hand corner sets selection to \"all\"\n            // regardless of current selection state (clicking twice does not deselect table)\n            selectionHandler([Regions.table()]);\n            if (shouldUpdateFocusedCell) {\n                var newFocusedCellCoordinates = Regions.getFocusCellCoordinatesFromRegion(Regions.table());\n                _this.handleFocus(FocusedCellUtils.toFullCoordinates(newFocusedCellCoordinates));\n            }\n        };\n        _this.handleSelectAllHotkey = function (e) {\n            // prevent \"real\" select all from happening as well\n            e.preventDefault();\n            e.stopPropagation();\n            // selecting-all via the keyboard should not move the focused cell.\n            _this.selectAll(false);\n        };\n        _this.columnHeaderCellRenderer = function (columnIndex) {\n            var props = _this.getColumnProps(columnIndex);\n            var id = props.id, loadingOptions = props.loadingOptions, cellRenderer = props.cellRenderer, columnHeaderCellRenderer = props.columnHeaderCellRenderer, spreadableProps = tslib_1.__rest(props, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\"]);\n            var columnLoading = _this.hasLoadingOption(loadingOptions, ColumnLoadingOption.HEADER);\n            if (columnHeaderCellRenderer != null) {\n                var columnHeaderCell = columnHeaderCellRenderer(columnIndex);\n                var columnHeaderCellLoading = columnHeaderCell.props.loading;\n                var columnHeaderCellProps = {\n                    loading: columnHeaderCellLoading != null ? columnHeaderCellLoading : columnLoading,\n                };\n                return React.cloneElement(columnHeaderCell, columnHeaderCellProps);\n            }\n            var baseProps = tslib_1.__assign({ index: columnIndex, loading: columnLoading }, spreadableProps);\n            if (props.name != null) {\n                return React.createElement(ColumnHeaderCell, tslib_1.__assign({}, baseProps));\n            }\n            else {\n                return React.createElement(ColumnHeaderCell, tslib_1.__assign({}, baseProps, { name: Utils.toBase26Alpha(columnIndex) }));\n            }\n        };\n        _this.renderColumnHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly) {\n            if (showFrozenColumnsOnly === void 0) { showFrozenColumnsOnly = false; }\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions, viewportRect = _a.viewportRect;\n            var _b = _this.props, enableMultipleSelection = _b.enableMultipleSelection, enableGhostCells = _b.enableGhostCells, enableColumnReordering = _b.enableColumnReordering, enableColumnResizing = _b.enableColumnResizing, loadingOptions = _b.loadingOptions, maxColumnWidth = _b.maxColumnWidth, minColumnWidth = _b.minColumnWidth, selectedRegionTransform = _b.selectedRegionTransform;\n            var classes = classNames(Classes.TABLE_COLUMN_HEADERS, (_c = {},\n                _c[Classes.TABLE_SELECTION_ENABLED] = _this.isSelectionModeEnabled(RegionCardinality.FULL_COLUMNS),\n                _c));\n            var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n            var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart;\n            var columnIndexEnd = showFrozenColumnsOnly ? _this.getMaxFrozenColumnIndex() : columnIndices.columnIndexEnd;\n            return (React.createElement(\"div\", { className: classes },\n                React.createElement(ColumnHeader, { enableMultipleSelection: enableMultipleSelection, cellRenderer: _this.columnHeaderCellRenderer, focusedCell: focusedCell, grid: _this.grid, isReorderable: enableColumnReordering, isResizable: enableColumnResizing, loading: _this.hasLoadingOption(loadingOptions, TableLoadingOption.COLUMN_HEADERS), locator: _this.locator, maxColumnWidth: maxColumnWidth, measurableElementRef: refHandler, minColumnWidth: minColumnWidth, onColumnWidthChanged: _this.handleColumnWidthChanged, onFocusedCell: _this.handleFocus, onLayoutLock: _this.handleLayoutLock, onReordered: _this.handleColumnsReordered, onReordering: reorderingHandler, onResizeGuide: resizeHandler, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_COLUMNS), selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, columnIndexStart: columnIndexStart, columnIndexEnd: columnIndexEnd }, _this.props.children),\n                _this.maybeRenderRegions(_this.styleColumnHeaderRegion)));\n            var _c;\n        };\n        _this.renderRowHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly) {\n            if (showFrozenRowsOnly === void 0) { showFrozenRowsOnly = false; }\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions, viewportRect = _a.viewportRect;\n            var _b = _this.props, enableMultipleSelection = _b.enableMultipleSelection, enableGhostCells = _b.enableGhostCells, enableRowReordering = _b.enableRowReordering, enableRowResizing = _b.enableRowResizing, loadingOptions = _b.loadingOptions, maxRowHeight = _b.maxRowHeight, minRowHeight = _b.minRowHeight, rowHeaderCellRenderer = _b.rowHeaderCellRenderer, selectedRegionTransform = _b.selectedRegionTransform;\n            var classes = classNames(Classes.TABLE_ROW_HEADERS, (_c = {},\n                _c[Classes.TABLE_SELECTION_ENABLED] = _this.isSelectionModeEnabled(RegionCardinality.FULL_ROWS),\n                _c));\n            var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n            var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart;\n            var rowIndexEnd = showFrozenRowsOnly ? _this.getMaxFrozenRowIndex() : rowIndices.rowIndexEnd;\n            return (React.createElement(\"div\", { className: classes, ref: refHandler },\n                React.createElement(RowHeader, { enableMultipleSelection: enableMultipleSelection, focusedCell: focusedCell, grid: _this.grid, locator: _this.locator, isReorderable: enableRowReordering, isResizable: enableRowResizing, loading: _this.hasLoadingOption(loadingOptions, TableLoadingOption.ROW_HEADERS), maxRowHeight: maxRowHeight, minRowHeight: minRowHeight, onFocusedCell: _this.handleFocus, onLayoutLock: _this.handleLayoutLock, onResizeGuide: resizeHandler, onReordered: _this.handleRowsReordered, onReordering: reorderingHandler, onRowHeightChanged: _this.handleRowHeightChanged, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_ROWS), rowHeaderCellRenderer: rowHeaderCellRenderer, selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, rowIndexStart: rowIndexStart, rowIndexEnd: rowIndexEnd }),\n                _this.maybeRenderRegions(_this.styleRowHeaderRegion)));\n            var _c;\n        };\n        _this.bodyCellRenderer = function (rowIndex, columnIndex) {\n            var _a = _this.getColumnProps(columnIndex), id = _a.id, loadingOptions = _a.loadingOptions, cellRenderer = _a.cellRenderer, columnHeaderCellRenderer = _a.columnHeaderCellRenderer, name = _a.name, nameRenderer = _a.nameRenderer, restColumnProps = tslib_1.__rest(_a, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\", \"name\", \"nameRenderer\"]);\n            var cell = cellRenderer(rowIndex, columnIndex);\n            var _b = cell.props.loading, loading = _b === void 0 ? _this.hasLoadingOption(loadingOptions, ColumnLoadingOption.CELLS) : _b;\n            var cellProps = tslib_1.__assign({}, restColumnProps, { loading: loading });\n            return React.cloneElement(cell, cellProps);\n        };\n        _this.renderBody = function (quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly) {\n            if (showFrozenRowsOnly === void 0) { showFrozenRowsOnly = false; }\n            if (showFrozenColumnsOnly === void 0) { showFrozenColumnsOnly = false; }\n            var _a = _this.state, focusedCell = _a.focusedCell, numFrozenColumns = _a.numFrozenColumnsClamped, numFrozenRows = _a.numFrozenRowsClamped, selectedRegions = _a.selectedRegions, viewportRect = _a.viewportRect;\n            var _b = _this.props, enableMultipleSelection = _b.enableMultipleSelection, enableGhostCells = _b.enableGhostCells, loadingOptions = _b.loadingOptions, bodyContextMenuRenderer = _b.bodyContextMenuRenderer, selectedRegionTransform = _b.selectedRegionTransform;\n            var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n            var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n            // start beyond the frozen area if rendering unrelated quadrants, so we\n            // don't render duplicate cells underneath the frozen ones.\n            var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart + numFrozenColumns;\n            var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart + numFrozenRows;\n            // if rendering frozen rows/columns, subtract one to convert to\n            // 0-indexing. if the 1-indexed value is 0, this sets the end index\n            // to -1, which avoids rendering absent frozen rows/columns at all.\n            var columnIndexEnd = showFrozenColumnsOnly ? numFrozenColumns - 1 : columnIndices.columnIndexEnd;\n            var rowIndexEnd = showFrozenRowsOnly ? numFrozenRows - 1 : rowIndices.rowIndexEnd;\n            // the main quadrant contains all cells in the table, so listen only to that quadrant\n            var onCompleteRender = quadrantType === QuadrantType.MAIN ? _this.handleCompleteRender : undefined;\n            return (React.createElement(\"div\", null,\n                React.createElement(TableBody, { enableMultipleSelection: enableMultipleSelection, cellRenderer: _this.bodyCellRenderer, focusedCell: focusedCell, grid: _this.grid, loading: _this.hasLoadingOption(loadingOptions, TableLoadingOption.CELLS), locator: _this.locator, onCompleteRender: onCompleteRender, onFocusedCell: _this.handleFocus, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.CELLS), bodyContextMenuRenderer: bodyContextMenuRenderer, renderMode: _this.getNormalizedRenderMode(), selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, viewportRect: viewportRect, columnIndexStart: columnIndexStart, columnIndexEnd: columnIndexEnd, rowIndexStart: rowIndexStart, rowIndexEnd: rowIndexEnd, numFrozenColumns: showFrozenColumnsOnly ? numFrozenColumns : undefined, numFrozenRows: showFrozenRowsOnly ? numFrozenRows : undefined }),\n                _this.maybeRenderRegions(_this.styleBodyRegion, quadrantType)));\n        };\n        _this.handleCompleteRender = function () {\n            // the first onCompleteRender is triggered before the viewportRect is\n            // defined and the second after the viewportRect has been set. the cells\n            // will only actually render once the viewportRect is defined though, so\n            // we defer invoking onCompleteRender until that check passes.\n            if (_this.state.viewportRect != null) {\n                CoreUtils.safeInvoke(_this.props.onCompleteRender);\n                _this.didCompletelyMount = true;\n            }\n        };\n        _this.handleFocusMoveLeft = function (e) { return _this.handleFocusMove(e, \"left\"); };\n        _this.handleFocusMoveLeftInternal = function (e) { return _this.handleFocusMoveInternal(e, \"left\"); };\n        _this.handleFocusMoveRight = function (e) { return _this.handleFocusMove(e, \"right\"); };\n        _this.handleFocusMoveRightInternal = function (e) { return _this.handleFocusMoveInternal(e, \"right\"); };\n        _this.handleFocusMoveUp = function (e) { return _this.handleFocusMove(e, \"up\"); };\n        _this.handleFocusMoveUpInternal = function (e) { return _this.handleFocusMoveInternal(e, \"up\"); };\n        _this.handleFocusMoveDown = function (e) { return _this.handleFocusMove(e, \"down\"); };\n        _this.handleFocusMoveDownInternal = function (e) { return _this.handleFocusMoveInternal(e, \"down\"); };\n        _this.styleBodyRegion = function (region, quadrantType) {\n            var numFrozenColumns = _this.props.numFrozenColumns;\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            // ensure we're not showing borders at the boundary of the frozen-columns area\n            var canHideRightBorder = (quadrantType === QuadrantType.TOP_LEFT || quadrantType === QuadrantType.LEFT) &&\n                numFrozenColumns != null &&\n                numFrozenColumns > 0;\n            var fixedHeight = _this.grid.getHeight();\n            var fixedWidth = _this.grid.getWidth();\n            // include a correction in some cases to hide borders along quadrant boundaries\n            var alignmentCorrection = 1;\n            var alignmentCorrectionString = \"-\" + alignmentCorrection + \"px\";\n            switch (cardinality) {\n                case RegionCardinality.CELLS:\n                    return style;\n                case RegionCardinality.FULL_COLUMNS:\n                    style.top = alignmentCorrectionString;\n                    style.height = fixedHeight + alignmentCorrection;\n                    return style;\n                case RegionCardinality.FULL_ROWS:\n                    style.left = alignmentCorrectionString;\n                    style.width = fixedWidth + alignmentCorrection;\n                    if (canHideRightBorder) {\n                        style.right = alignmentCorrectionString;\n                    }\n                    return style;\n                case RegionCardinality.FULL_TABLE:\n                    style.left = alignmentCorrectionString;\n                    style.top = alignmentCorrectionString;\n                    style.width = fixedWidth + alignmentCorrection;\n                    style.height = fixedHeight + alignmentCorrection;\n                    if (canHideRightBorder) {\n                        style.right = alignmentCorrectionString;\n                    }\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleMenuRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.right = \"0px\";\n                    style.bottom = \"0px\";\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.borderBottom = \"none\";\n                    style.borderRight = \"none\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleColumnHeaderRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.left = \"-1px\";\n                    style.borderLeft = \"none\";\n                    style.bottom = \"-1px\";\n                    return style;\n                case RegionCardinality.FULL_COLUMNS:\n                    style.bottom = \"-1px\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleRowHeaderRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.top = \"-1px\";\n                    style.borderTop = \"none\";\n                    style.right = \"-1px\";\n                    return style;\n                case RegionCardinality.FULL_ROWS:\n                    style.right = \"-1px\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.handleColumnWidthChanged = function (columnIndex, width) {\n            var selectedRegions = _this.state.selectedRegions;\n            var columnWidths = _this.state.columnWidths.slice();\n            if (Regions.hasFullTable(selectedRegions)) {\n                for (var col = 0; col < columnWidths.length; col++) {\n                    columnWidths[col] = width;\n                }\n            }\n            if (Regions.hasFullColumn(selectedRegions, columnIndex)) {\n                Regions.eachUniqueFullColumn(selectedRegions, function (col) {\n                    columnWidths[col] = width;\n                });\n            }\n            else {\n                columnWidths[columnIndex] = width;\n            }\n            _this.invalidateGrid();\n            _this.didUpdateColumnOrRowSizes = true;\n            _this.setState({ columnWidths: columnWidths });\n            var onColumnWidthChanged = _this.props.onColumnWidthChanged;\n            if (onColumnWidthChanged != null) {\n                onColumnWidthChanged(columnIndex, width);\n            }\n        };\n        _this.handleRowHeightChanged = function (rowIndex, height) {\n            var selectedRegions = _this.state.selectedRegions;\n            var rowHeights = _this.state.rowHeights.slice();\n            if (Regions.hasFullTable(selectedRegions)) {\n                for (var row = 0; row < rowHeights.length; row++) {\n                    rowHeights[row] = height;\n                }\n            }\n            if (Regions.hasFullRow(selectedRegions, rowIndex)) {\n                Regions.eachUniqueFullRow(selectedRegions, function (row) {\n                    rowHeights[row] = height;\n                });\n            }\n            else {\n                rowHeights[rowIndex] = height;\n            }\n            _this.invalidateGrid();\n            _this.didUpdateColumnOrRowSizes = true;\n            _this.setState({ rowHeights: rowHeights });\n            var onRowHeightChanged = _this.props.onRowHeightChanged;\n            if (onRowHeightChanged != null) {\n                onRowHeightChanged(rowIndex, height);\n            }\n        };\n        _this.handleRootScroll = function (_event) {\n            // Bug #211 - Native browser text selection events can cause the root\n            // element to scroll even though it has a overflow:hidden style. The\n            // only viable solution to this is to unscroll the element after the\n            // browser scrolls it.\n            if (_this.rootTableElement != null) {\n                _this.rootTableElement.scrollLeft = 0;\n                _this.rootTableElement.scrollTop = 0;\n            }\n        };\n        _this.handleBodyScroll = function (event) {\n            // Prevent the event from propagating to avoid a resize event on the\n            // resize sensor.\n            event.stopPropagation();\n            if (_this.locator != null && !_this.state.isLayoutLocked) {\n                var viewportRect = _this.locator.getViewportRect();\n                _this.updateViewportRect(viewportRect);\n            }\n        };\n        _this.clearSelection = function (_selectedRegions) {\n            _this.handleSelection([]);\n        };\n        // no good way to call arrow-key keyboard events from tests\n        /* istanbul ignore next */\n        _this.handleFocusMove = function (e, direction) {\n            e.preventDefault();\n            e.stopPropagation();\n            var focusedCell = _this.state.focusedCell;\n            if (focusedCell == null) {\n                // halt early if we have a selectedRegionTransform or something else in play that nixes\n                // the focused cell.\n                return;\n            }\n            var newFocusedCell = { col: focusedCell.col, row: focusedCell.row, focusSelectionIndex: 0 };\n            switch (direction) {\n                case \"up\":\n                    newFocusedCell.row -= 1;\n                    break;\n                case \"down\":\n                    newFocusedCell.row += 1;\n                    break;\n                case \"left\":\n                    newFocusedCell.col -= 1;\n                    break;\n                case \"right\":\n                    newFocusedCell.col += 1;\n                    break;\n                default:\n                    break;\n            }\n            if (newFocusedCell.row < 0 ||\n                newFocusedCell.row >= _this.grid.numRows ||\n                newFocusedCell.col < 0 ||\n                newFocusedCell.col >= _this.grid.numCols) {\n                return;\n            }\n            // change selection to match new focus cell location\n            var newSelectionRegions = [Regions.cell(newFocusedCell.row, newFocusedCell.col)];\n            _this.handleSelection(newSelectionRegions);\n            _this.handleFocus(newFocusedCell);\n            // keep the focused cell in view\n            _this.scrollBodyToFocusedCell(newFocusedCell);\n        };\n        // no good way to call arrow-key keyboard events from tests\n        /* istanbul ignore next */\n        _this.handleFocusMoveInternal = function (e, direction) {\n            e.preventDefault();\n            e.stopPropagation();\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions;\n            if (focusedCell == null) {\n                // halt early if we have a selectedRegionTransform or something else in play that nixes\n                // the focused cell.\n                return;\n            }\n            var newFocusedCell = {\n                col: focusedCell.col,\n                focusSelectionIndex: focusedCell.focusSelectionIndex,\n                row: focusedCell.row,\n            };\n            // if we're not in any particular focus cell region, and one exists, go to the first cell of the first one\n            if (focusedCell.focusSelectionIndex == null && selectedRegions.length > 0) {\n                var focusCellRegion = Regions.getCellRegionFromRegion(selectedRegions[0], _this.grid.numRows, _this.grid.numCols);\n                newFocusedCell = {\n                    col: focusCellRegion.cols[0],\n                    focusSelectionIndex: 0,\n                    row: focusCellRegion.rows[0],\n                };\n            }\n            else {\n                if (selectedRegions.length === 0) {\n                    _this.handleFocusMove(e, direction);\n                    return;\n                }\n                var focusCellRegion = Regions.getCellRegionFromRegion(selectedRegions[focusedCell.focusSelectionIndex], _this.grid.numRows, _this.grid.numCols);\n                if (focusCellRegion.cols[0] === focusCellRegion.cols[1] &&\n                    focusCellRegion.rows[0] === focusCellRegion.rows[1] &&\n                    selectedRegions.length === 1) {\n                    _this.handleFocusMove(e, direction);\n                    return;\n                }\n                switch (direction) {\n                    case \"up\":\n                        newFocusedCell = _this.moveFocusCell(\"row\", \"col\", true, newFocusedCell, focusCellRegion);\n                        break;\n                    case \"left\":\n                        newFocusedCell = _this.moveFocusCell(\"col\", \"row\", true, newFocusedCell, focusCellRegion);\n                        break;\n                    case \"down\":\n                        newFocusedCell = _this.moveFocusCell(\"row\", \"col\", false, newFocusedCell, focusCellRegion);\n                        break;\n                    case \"right\":\n                        newFocusedCell = _this.moveFocusCell(\"col\", \"row\", false, newFocusedCell, focusCellRegion);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (newFocusedCell.row < 0 ||\n                newFocusedCell.row >= _this.grid.numRows ||\n                newFocusedCell.col < 0 ||\n                newFocusedCell.col >= _this.grid.numCols) {\n                return;\n            }\n            _this.handleFocus(newFocusedCell);\n            // keep the focused cell in view\n            _this.scrollBodyToFocusedCell(newFocusedCell);\n        };\n        _this.scrollBodyToFocusedCell = function (focusedCell) {\n            var row = focusedCell.row, col = focusedCell.col;\n            var viewportRect = _this.state.viewportRect;\n            // sort keys in normal CSS position order (per the trusty TRBL/\"trouble\" acronym)\n            // tslint:disable:object-literal-sort-keys\n            var viewportBounds = {\n                top: viewportRect.top,\n                right: viewportRect.left + viewportRect.width,\n                bottom: viewportRect.top + viewportRect.height,\n                left: viewportRect.left,\n            };\n            var focusedCellBounds = {\n                top: _this.grid.getCumulativeHeightBefore(row),\n                right: _this.grid.getCumulativeWidthAt(col),\n                bottom: _this.grid.getCumulativeHeightAt(row),\n                left: _this.grid.getCumulativeWidthBefore(col),\n            };\n            // tslint:enable:object-literal-sort-keys\n            var focusedCellWidth = focusedCellBounds.right - focusedCellBounds.left;\n            var focusedCellHeight = focusedCellBounds.bottom - focusedCellBounds.top;\n            var isFocusedCellWiderThanViewport = focusedCellWidth > viewportRect.width;\n            var isFocusedCellTallerThanViewport = focusedCellHeight > viewportRect.height;\n            var nextScrollTop = viewportRect.top;\n            var nextScrollLeft = viewportRect.left;\n            // keep the top end of an overly tall focused cell in view when moving left and right\n            // (without this OR check, the body seesaws to fit the top end, then the bottom end, etc.)\n            if (focusedCellBounds.top < viewportBounds.top || isFocusedCellTallerThanViewport) {\n                // scroll up (minus one pixel to avoid clipping the focused-cell border)\n                nextScrollTop = Math.max(0, focusedCellBounds.top - 1);\n            }\n            else if (focusedCellBounds.bottom > viewportBounds.bottom) {\n                // scroll down\n                var scrollDelta = focusedCellBounds.bottom - viewportBounds.bottom;\n                nextScrollTop = viewportBounds.top + scrollDelta;\n            }\n            // keep the left end of an overly wide focused cell in view when moving up and down\n            if (focusedCellBounds.left < viewportBounds.left || isFocusedCellWiderThanViewport) {\n                // scroll left (again minus one additional pixel)\n                nextScrollLeft = Math.max(0, focusedCellBounds.left - 1);\n            }\n            else if (focusedCellBounds.right > viewportBounds.right) {\n                // scroll right\n                var scrollDelta = focusedCellBounds.right - viewportBounds.right;\n                nextScrollLeft = viewportBounds.left + scrollDelta;\n            }\n            _this.syncViewportPosition(nextScrollLeft, nextScrollTop);\n        };\n        _this.handleFocus = function (focusedCell) {\n            if (!_this.props.enableFocusedCell) {\n                // don't set focus state if focus is not allowed\n                return;\n            }\n            // only set focused cell state if not specified in props\n            if (_this.props.focusedCell == null) {\n                _this.setState({ focusedCell: focusedCell });\n            }\n            CoreUtils.safeInvoke(_this.props.onFocusedCell, focusedCell);\n        };\n        _this.handleSelection = function (selectedRegions) {\n            // only set selectedRegions state if not specified in props\n            if (_this.props.selectedRegions == null) {\n                _this.setState({ selectedRegions: selectedRegions });\n            }\n            var onSelection = _this.props.onSelection;\n            if (onSelection != null) {\n                onSelection(selectedRegions);\n            }\n        };\n        _this.handleColumnsReordering = function (verticalGuides) {\n            _this.setState({ isReordering: true, verticalGuides: verticalGuides });\n        };\n        _this.handleColumnsReordered = function (oldIndex, newIndex, length) {\n            _this.setState({ isReordering: false, verticalGuides: undefined });\n            CoreUtils.safeInvoke(_this.props.onColumnsReordered, oldIndex, newIndex, length);\n        };\n        _this.handleRowsReordering = function (horizontalGuides) {\n            _this.setState({ isReordering: true, horizontalGuides: horizontalGuides });\n        };\n        _this.handleRowsReordered = function (oldIndex, newIndex, length) {\n            _this.setState({ isReordering: false, horizontalGuides: undefined });\n            CoreUtils.safeInvoke(_this.props.onRowsReordered, oldIndex, newIndex, length);\n        };\n        _this.handleLayoutLock = function (isLayoutLocked) {\n            if (isLayoutLocked === void 0) { isLayoutLocked = false; }\n            _this.setState({ isLayoutLocked: isLayoutLocked });\n        };\n        _this.hasLoadingOption = function (loadingOptions, loadingOption) {\n            if (loadingOptions == null) {\n                return undefined;\n            }\n            return loadingOptions.indexOf(loadingOption) >= 0;\n        };\n        _this.updateViewportRect = function (nextViewportRect) {\n            var viewportRect = _this.state.viewportRect;\n            _this.setState({ viewportRect: nextViewportRect });\n            var didViewportChange = (viewportRect != null && !viewportRect.equals(nextViewportRect)) ||\n                (viewportRect == null && nextViewportRect != null);\n            if (didViewportChange) {\n                _this.invokeOnVisibleCellsChangeCallback(nextViewportRect);\n            }\n        };\n        _this.getMaxFrozenColumnIndex = function () {\n            var numFrozenColumns = _this.state.numFrozenColumnsClamped;\n            return numFrozenColumns != null ? numFrozenColumns - 1 : undefined;\n        };\n        _this.getMaxFrozenRowIndex = function () {\n            var numFrozenRows = _this.state.numFrozenRowsClamped;\n            return numFrozenRows != null ? numFrozenRows - 1 : undefined;\n        };\n        _this.handleColumnResizeGuide = function (verticalGuides) {\n            _this.setState({ verticalGuides: verticalGuides });\n        };\n        _this.handleRowResizeGuide = function (horizontalGuides) {\n            _this.setState({ horizontalGuides: horizontalGuides });\n        };\n        var _a = _this.props, children = _a.children, columnWidths = _a.columnWidths, defaultRowHeight = _a.defaultRowHeight, defaultColumnWidth = _a.defaultColumnWidth, numRows = _a.numRows, rowHeights = _a.rowHeights;\n        _this.childrenArray = React.Children.toArray(children);\n        _this.columnIdToIndex = Table_1.createColumnIdIndex(_this.childrenArray);\n        // Create height/width arrays using the lengths from props and\n        // children, the default values from props, and finally any sparse\n        // arrays passed into props.\n        var newColumnWidths = _this.childrenArray.map(function () { return defaultColumnWidth; });\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        var newRowHeights = Utils.times(numRows, function () { return defaultRowHeight; });\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n        var selectedRegions = props.selectedRegions == null ? [] : props.selectedRegions;\n        var focusedCell = FocusedCellUtils.getInitialFocusedCell(props.enableFocusedCell, props.focusedCell, undefined, selectedRegions);\n        _this.state = {\n            columnWidths: newColumnWidths,\n            focusedCell: focusedCell,\n            isLayoutLocked: false,\n            isReordering: false,\n            numFrozenColumnsClamped: clampNumFrozenColumns(props),\n            numFrozenRowsClamped: clampNumFrozenRows(props),\n            rowHeights: newRowHeights,\n            selectedRegions: selectedRegions,\n        };\n        return _this;\n    }\n    Table_1 = Table;\n    Table.createColumnIdIndex = function (children) {\n        var columnIdToIndex = {};\n        for (var i = 0; i < children.length; i++) {\n            var key = children[i].props.id;\n            if (key != null) {\n                columnIdToIndex[String(key)] = i;\n            }\n        }\n        return columnIdToIndex;\n    };\n    // Instance methods\n    // ================\n    /**\n     * __Experimental!__ Resizes all rows in the table to the approximate\n     * maximum height of wrapped cell content in each row. Works best when each\n     * cell contains plain text of a consistent font style (though font style\n     * may vary between cells). Since this function uses approximate\n     * measurements, results may not be perfect.\n     *\n     * Approximation parameters can be configured for the entire table or on a\n     * per-cell basis. Default values are fine-tuned to work well with default\n     * Table font styles.\n     */\n    Table.prototype.resizeRowsByApproximateHeight = function (getCellText, options) {\n        var numRows = this.props.numRows;\n        var columnWidths = this.state.columnWidths;\n        var numColumns = columnWidths.length;\n        var rowHeights = [];\n        for (var rowIndex = 0; rowIndex < numRows; rowIndex++) {\n            var maxCellHeightInRow = 0;\n            // iterate through each cell in the row\n            for (var columnIndex = 0; columnIndex < numColumns; columnIndex++) {\n                // resolve all parameters to raw values\n                var _a = this.resolveResizeRowsByApproximateHeightOptions(options, rowIndex, columnIndex), approxCharWidth = _a.getApproximateCharWidth, approxLineHeight = _a.getApproximateLineHeight, horizontalPadding = _a.getCellHorizontalPadding, numBufferLines = _a.getNumBufferLines;\n                var cellText = getCellText(rowIndex, columnIndex);\n                var approxCellHeight = Utils.getApproxCellHeight(cellText, columnWidths[columnIndex], approxCharWidth, approxLineHeight, horizontalPadding, numBufferLines);\n                if (approxCellHeight > maxCellHeightInRow) {\n                    maxCellHeightInRow = approxCellHeight;\n                }\n            }\n            rowHeights.push(maxCellHeightInRow);\n        }\n        this.invalidateGrid();\n        this.didUpdateColumnOrRowSizes = true;\n        this.setState({ rowHeights: rowHeights });\n    };\n    /**\n     * Resize all rows in the table to the height of the tallest visible cell in the specified columns.\n     * If no indices are provided, default to using the tallest visible cell from all columns in view.\n     */\n    Table.prototype.resizeRowsByTallestCell = function (columnIndices) {\n        var _this = this;\n        var tallest = 0;\n        if (columnIndices == null) {\n            // Consider all columns currently in viewport\n            var viewportColumnIndices = this.grid.getColumnIndicesInRect(this.state.viewportRect);\n            for (var col = viewportColumnIndices.columnIndexStart; col <= viewportColumnIndices.columnIndexEnd; col++) {\n                tallest = Math.max(tallest, this.locator.getTallestVisibleCellInColumn(col));\n            }\n        }\n        else {\n            var columnIndicesArray = Array.isArray(columnIndices) ? columnIndices : [columnIndices];\n            var tallestByColumns = columnIndicesArray.map(function (col) { return _this.locator.getTallestVisibleCellInColumn(col); });\n            tallest = Math.max.apply(Math, tallestByColumns);\n        }\n        var rowHeights = Array(this.state.rowHeights.length).fill(tallest);\n        this.invalidateGrid();\n        this.didUpdateColumnOrRowSizes = true;\n        this.setState({ rowHeights: rowHeights });\n    };\n    /**\n     * Scrolls the table to the target region in a fashion appropriate to the target region's\n     * cardinality:\n     *\n     * - CELLS: Scroll the top-left cell in the target region to the top-left corner of the viewport.\n     * - FULL_ROWS: Scroll the top-most row in the target region to the top of the viewport.\n     * - FULL_COLUMNS: Scroll the left-most column in the target region to the left side of the viewport.\n     * - FULL_TABLE: Scroll the top-left cell in the table to the top-left corner of the viewport.\n     *\n     * If there are active frozen rows and/or columns, the target region will be positioned in the\n     * top-left corner of the non-frozen area (unless the target region itself is in the frozen\n     * area).\n     *\n     * If the target region is close to the bottom-right corner of the table, this function will\n     * simply scroll the target region as close to the top-left as possible until the bottom-right\n     * corner is reached.\n     */\n    Table.prototype.scrollToRegion = function (region) {\n        var _a = this.state, numFrozenColumns = _a.numFrozenColumnsClamped, numFrozenRows = _a.numFrozenRowsClamped;\n        var _b = this.state.viewportRect, currScrollLeft = _b.left, currScrollTop = _b.top;\n        var _c = ScrollUtils.getScrollPositionForRegion(region, currScrollLeft, currScrollTop, this.grid.getCumulativeWidthBefore, this.grid.getCumulativeHeightBefore, numFrozenRows, numFrozenColumns), scrollLeft = _c.scrollLeft, scrollTop = _c.scrollTop;\n        var correctedScrollLeft = this.shouldDisableHorizontalScroll() ? 0 : scrollLeft;\n        var correctedScrollTop = this.shouldDisableVerticalScroll() ? 0 : scrollTop;\n        // defer to the quadrant stack to keep all quadrant positions in sync\n        this.quadrantStackInstance.scrollToPosition(correctedScrollLeft, correctedScrollTop);\n    };\n    // React lifecycle\n    // ===============\n    Table.prototype.getChildContext = function () {\n        return {\n            enableColumnInteractionBar: this.props.enableColumnInteractionBar,\n        };\n    };\n    Table.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var propKeysBlacklist = { exclude: Table_1.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST };\n        var stateKeysBlacklist = { exclude: Table_1.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST };\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, propKeysBlacklist) ||\n            !CoreUtils.shallowCompareKeys(this.state, nextState, stateKeysBlacklist) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, Table_1.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST) ||\n            !CoreUtils.deepCompareKeys(this.state, nextState, Table_1.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST));\n    };\n    Table.prototype.componentWillReceiveProps = function (nextProps) {\n        var _this = this;\n        // calls validateProps\n        _super.prototype.componentWillReceiveProps.call(this, nextProps);\n        var children = nextProps.children, columnWidths = nextProps.columnWidths, defaultColumnWidth = nextProps.defaultColumnWidth, defaultRowHeight = nextProps.defaultRowHeight, enableFocusedCell = nextProps.enableFocusedCell, focusedCell = nextProps.focusedCell, numRows = nextProps.numRows, rowHeights = nextProps.rowHeights, selectedRegions = nextProps.selectedRegions, selectionModes = nextProps.selectionModes;\n        var newChildArray = React.Children.toArray(children);\n        var numCols = newChildArray.length;\n        // Try to maintain widths of columns by looking up the width of the\n        // column that had the same `ID` prop. If none is found, use the\n        // previous width at the same index.\n        var previousColumnWidths = newChildArray.map(function (child, index) {\n            var mappedIndex = _this.columnIdToIndex[child.props.id];\n            return _this.state.columnWidths[mappedIndex != null ? mappedIndex : index];\n        });\n        // Make sure the width/height arrays have the correct length, but keep\n        // as many existing widths/heights when possible. Also, apply the\n        // sparse width/heights from props.\n        var newColumnWidths = this.state.columnWidths;\n        newColumnWidths = Utils.arrayOfLength(newColumnWidths, numCols, defaultColumnWidth);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, previousColumnWidths);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        var newRowHeights = this.state.rowHeights;\n        newRowHeights = Utils.arrayOfLength(newRowHeights, numRows, defaultRowHeight);\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n        var newSelectedRegions = selectedRegions;\n        if (selectedRegions == null) {\n            // if we're in uncontrolled mode, filter out all selected regions that don't\n            // fit in the current new table dimensions\n            newSelectedRegions = this.state.selectedRegions.filter(function (region) {\n                var regionCardinality = Regions.getRegionCardinality(region);\n                return (_this.isSelectionModeEnabled(regionCardinality, selectionModes) &&\n                    Regions.isRegionValidForTable(region, numRows, numCols));\n            });\n        }\n        var newFocusedCell = FocusedCellUtils.getInitialFocusedCell(enableFocusedCell, focusedCell, this.state.focusedCell, newSelectedRegions);\n        this.childrenArray = newChildArray;\n        this.columnIdToIndex = Table_1.createColumnIdIndex(this.childrenArray);\n        this.invalidateGrid();\n        this.setState({\n            columnWidths: newColumnWidths,\n            focusedCell: newFocusedCell,\n            numFrozenColumnsClamped: clampNumFrozenColumns(nextProps),\n            numFrozenRowsClamped: clampNumFrozenRows(nextProps),\n            rowHeights: newRowHeights,\n            selectedRegions: newSelectedRegions,\n        });\n    };\n    Table.prototype.render = function () {\n        var _a = this.props, children = _a.children, className = _a.className, enableRowHeader = _a.enableRowHeader, loadingOptions = _a.loadingOptions, numRows = _a.numRows, enableColumnInteractionBar = _a.enableColumnInteractionBar;\n        var _b = this.state, horizontalGuides = _b.horizontalGuides, numFrozenColumnsClamped = _b.numFrozenColumnsClamped, numFrozenRowsClamped = _b.numFrozenRowsClamped, verticalGuides = _b.verticalGuides;\n        this.validateGrid();\n        var classes = classNames(Classes.TABLE_CONTAINER, (_c = {},\n            _c[Classes.TABLE_REORDERING] = this.state.isReordering,\n            _c[Classes.TABLE_NO_VERTICAL_SCROLL] = this.shouldDisableVerticalScroll(),\n            _c[Classes.TABLE_NO_HORIZONTAL_SCROLL] = this.shouldDisableHorizontalScroll(),\n            _c[Classes.TABLE_SELECTION_ENABLED] = this.isSelectionModeEnabled(RegionCardinality.CELLS),\n            _c[Classes.TABLE_NO_ROWS] = numRows === 0,\n            _c), className);\n        return (React.createElement(\"div\", { className: classes, ref: this.refHandlers.rootTable, onScroll: this.handleRootScroll },\n            React.createElement(TableQuadrantStack, { bodyRef: this.refHandlers.cellContainer, bodyRenderer: this.renderBody, columnHeaderCellRenderer: this.renderColumnHeader, columnHeaderRef: this.refHandlers.columnHeader, enableColumnInteractionBar: enableColumnInteractionBar, enableRowHeader: enableRowHeader, grid: this.grid, handleColumnResizeGuide: this.handleColumnResizeGuide, handleColumnsReordering: this.handleColumnsReordering, handleRowResizeGuide: this.handleRowResizeGuide, handleRowsReordering: this.handleRowsReordering, isHorizontalScrollDisabled: this.shouldDisableHorizontalScroll(), isVerticalScrollDisabled: this.shouldDisableVerticalScroll(), loadingOptions: loadingOptions, numColumns: React.Children.count(children), numFrozenColumns: numFrozenColumnsClamped, numFrozenRows: numFrozenRowsClamped, numRows: numRows, onScroll: this.handleBodyScroll, quadrantRef: this.refHandlers.mainQuadrant, ref: this.refHandlers.quadrantStack, menuRenderer: this.renderMenu, rowHeaderCellRenderer: this.renderRowHeader, rowHeaderRef: this.refHandlers.rowHeader, scrollContainerRef: this.refHandlers.scrollContainer }),\n            React.createElement(\"div\", { className: classNames(Classes.TABLE_OVERLAY_LAYER, Classes.TABLE_OVERLAY_REORDERING_CURSOR) }),\n            React.createElement(GuideLayer, { className: Classes.TABLE_RESIZE_GUIDES, verticalGuides: verticalGuides, horizontalGuides: horizontalGuides })));\n        var _c;\n    };\n    Table.prototype.renderHotkeys = function () {\n        var hotkeys = [\n            this.maybeRenderCopyHotkey(),\n            this.maybeRenderSelectAllHotkey(),\n            this.maybeRenderFocusHotkeys(),\n            this.maybeRenderSelectionResizeHotkeys(),\n        ];\n        return React.createElement(Hotkeys, null, hotkeys.filter(function (element) { return element !== undefined; }));\n    };\n    /**\n     * When the component mounts, the HTML Element refs will be available, so\n     * we constructor the Locator, which queries the elements' bounding\n     * ClientRects.\n     */\n    Table.prototype.componentDidMount = function () {\n        var _this = this;\n        this.validateGrid();\n        this.locator = new Locator(this.rootTableElement, this.scrollContainerElement, this.cellContainerElement);\n        this.updateLocator();\n        this.updateViewportRect(this.locator.getViewportRect());\n        this.resizeSensorDetach = ResizeSensor.attach(this.rootTableElement, function () {\n            if (!_this.state.isLayoutLocked) {\n                _this.updateViewportRect(_this.locator.getViewportRect());\n            }\n        });\n    };\n    Table.prototype.componentWillUnmount = function () {\n        if (this.resizeSensorDetach != null) {\n            this.resizeSensorDetach();\n            delete this.resizeSensorDetach;\n        }\n        this.didCompletelyMount = false;\n    };\n    Table.prototype.componentDidUpdate = function () {\n        if (this.locator != null) {\n            this.validateGrid();\n            this.updateLocator();\n        }\n        if (this.didUpdateColumnOrRowSizes) {\n            this.quadrantStackInstance.synchronizeQuadrantViews();\n            this.didUpdateColumnOrRowSizes = false;\n        }\n        this.maybeScrollTableIntoView();\n    };\n    Table.prototype.validateProps = function (props) {\n        var children = props.children, columnWidths = props.columnWidths, numFrozenColumns = props.numFrozenColumns, numFrozenRows = props.numFrozenRows, numRows = props.numRows, rowHeights = props.rowHeights;\n        var numColumns = React.Children.count(children);\n        // do cheap error-checking first.\n        if (numRows != null && numRows < 0) {\n            throw new Error(Errors.TABLE_NUM_ROWS_NEGATIVE);\n        }\n        if (numFrozenRows != null && numFrozenRows < 0) {\n            throw new Error(Errors.TABLE_NUM_FROZEN_ROWS_NEGATIVE);\n        }\n        if (numFrozenColumns != null && numFrozenColumns < 0) {\n            throw new Error(Errors.TABLE_NUM_FROZEN_COLUMNS_NEGATIVE);\n        }\n        if (numRows != null && rowHeights != null && rowHeights.length !== numRows) {\n            throw new Error(Errors.TABLE_NUM_ROWS_ROW_HEIGHTS_MISMATCH);\n        }\n        if (numColumns != null && columnWidths != null && columnWidths.length !== numColumns) {\n            throw new Error(Errors.TABLE_NUM_COLUMNS_COLUMN_WIDTHS_MISMATCH);\n        }\n        React.Children.forEach(children, function (child) {\n            // save as a variable so that union type narrowing works\n            var childType = child.type;\n            // the second part of this conditional will never be true, but it\n            // informs the TS compiler that we won't be invoking\n            // childType.prototype on a \"string\" element.\n            if (typeof child === \"string\" || typeof childType === \"string\") {\n                throw new Error(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n            }\n            else {\n                var isColumn = childType.prototype === Column.prototype || Column.prototype.isPrototypeOf(childType);\n                if (!isColumn) {\n                    throw new Error(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n                }\n            }\n        });\n        // these are recoverable scenarios, so just print a warning.\n        if (numFrozenRows != null && numRows != null && numFrozenRows > numRows) {\n            console.warn(Errors.TABLE_NUM_FROZEN_ROWS_BOUND_WARNING);\n        }\n        if (numFrozenColumns != null && numFrozenColumns > numColumns) {\n            console.warn(Errors.TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING);\n        }\n    };\n    // Hotkeys\n    // =======\n    Table.prototype.maybeRenderCopyHotkey = function () {\n        var getCellClipboardData = this.props.getCellClipboardData;\n        if (getCellClipboardData != null) {\n            return (React.createElement(Hotkey, { key: \"copy-hotkey\", label: \"Copy selected table cells\", group: \"Table\", combo: \"mod+c\", onKeyDown: this.handleCopy }));\n        }\n        else {\n            return undefined;\n        }\n    };\n    Table.prototype.maybeRenderSelectionResizeHotkeys = function () {\n        var _a = this.props, enableMultipleSelection = _a.enableMultipleSelection, selectionModes = _a.selectionModes;\n        var isSomeSelectionModeEnabled = selectionModes.length > 0;\n        if (enableMultipleSelection && isSomeSelectionModeEnabled) {\n            return [\n                React.createElement(Hotkey, { key: \"resize-selection-up\", label: \"Resize selection upward\", group: \"Table\", combo: \"shift+up\", onKeyDown: this.handleSelectionResizeUp }),\n                React.createElement(Hotkey, { key: \"resize-selection-down\", label: \"Resize selection downward\", group: \"Table\", combo: \"shift+down\", onKeyDown: this.handleSelectionResizeDown }),\n                React.createElement(Hotkey, { key: \"resize-selection-left\", label: \"Resize selection leftward\", group: \"Table\", combo: \"shift+left\", onKeyDown: this.handleSelectionResizeLeft }),\n                React.createElement(Hotkey, { key: \"resize-selection-right\", label: \"Resize selection rightward\", group: \"Table\", combo: \"shift+right\", onKeyDown: this.handleSelectionResizeRight }),\n            ];\n        }\n        else {\n            return undefined;\n        }\n    };\n    Table.prototype.maybeRenderFocusHotkeys = function () {\n        var enableFocusedCell = this.props.enableFocusedCell;\n        if (enableFocusedCell != null) {\n            return [\n                React.createElement(Hotkey, { key: \"move left\", label: \"Move focus cell left\", group: \"Table\", combo: \"left\", onKeyDown: this.handleFocusMoveLeft }),\n                React.createElement(Hotkey, { key: \"move right\", label: \"Move focus cell right\", group: \"Table\", combo: \"right\", onKeyDown: this.handleFocusMoveRight }),\n                React.createElement(Hotkey, { key: \"move up\", label: \"Move focus cell up\", group: \"Table\", combo: \"up\", onKeyDown: this.handleFocusMoveUp }),\n                React.createElement(Hotkey, { key: \"move down\", label: \"Move focus cell down\", group: \"Table\", combo: \"down\", onKeyDown: this.handleFocusMoveDown }),\n                React.createElement(Hotkey, { key: \"move tab\", label: \"Move focus cell tab\", group: \"Table\", combo: \"tab\", onKeyDown: this.handleFocusMoveRightInternal, allowInInput: true }),\n                React.createElement(Hotkey, { key: \"move shift-tab\", label: \"Move focus cell shift tab\", group: \"Table\", combo: \"shift+tab\", onKeyDown: this.handleFocusMoveLeftInternal, allowInInput: true }),\n                React.createElement(Hotkey, { key: \"move enter\", label: \"Move focus cell enter\", group: \"Table\", combo: \"enter\", onKeyDown: this.handleFocusMoveDownInternal, allowInInput: true }),\n                React.createElement(Hotkey, { key: \"move shift-enter\", label: \"Move focus cell shift enter\", group: \"Table\", combo: \"shift+enter\", onKeyDown: this.handleFocusMoveUpInternal, allowInInput: true }),\n            ];\n        }\n        else {\n            return [];\n        }\n    };\n    Table.prototype.maybeRenderSelectAllHotkey = function () {\n        if (this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE)) {\n            return (React.createElement(Hotkey, { key: \"select-all-hotkey\", label: \"Select all\", group: \"Table\", combo: \"mod+a\", onKeyDown: this.handleSelectAllHotkey }));\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Replaces the selected region at the specified array index, with the\n     * region provided.\n     */\n    Table.prototype.updateSelectedRegionAtIndex = function (region, index) {\n        var _a = this.props, children = _a.children, numRows = _a.numRows;\n        var selectedRegions = this.state.selectedRegions;\n        var numColumns = React.Children.count(children);\n        var maxRowIndex = Math.max(0, numRows - 1);\n        var maxColumnIndex = Math.max(0, numColumns - 1);\n        var clampedNextRegion = Regions.clampRegion(region, maxRowIndex, maxColumnIndex);\n        var nextSelectedRegions = Regions.update(selectedRegions, clampedNextRegion, index);\n        this.handleSelection(nextSelectedRegions);\n    };\n    // Quadrant refs\n    // =============\n    Table.prototype.moveFocusCell = function (primaryAxis, secondaryAxis, isUpOrLeft, newFocusedCell, focusCellRegion) {\n        var selectedRegions = this.state.selectedRegions;\n        var primaryAxisPlural = primaryAxis === \"row\" ? \"rows\" : \"cols\";\n        var secondaryAxisPlural = secondaryAxis === \"row\" ? \"rows\" : \"cols\";\n        var movementDirection = isUpOrLeft ? -1 : +1;\n        var regionIntervalIndex = isUpOrLeft ? 1 : 0;\n        // try moving the cell in the direction along the primary axis\n        newFocusedCell[primaryAxis] += movementDirection;\n        var isPrimaryIndexOutOfBounds = isUpOrLeft\n            ? newFocusedCell[primaryAxis] < focusCellRegion[primaryAxisPlural][0]\n            : newFocusedCell[primaryAxis] > focusCellRegion[primaryAxisPlural][1];\n        if (isPrimaryIndexOutOfBounds) {\n            // if we moved outside the bounds of selection region,\n            // move to the start (or end) of the primary axis, and move one along the secondary\n            newFocusedCell[primaryAxis] = focusCellRegion[primaryAxisPlural][regionIntervalIndex];\n            newFocusedCell[secondaryAxis] += movementDirection;\n            var isSecondaryIndexOutOfBounds = isUpOrLeft\n                ? newFocusedCell[secondaryAxis] < focusCellRegion[secondaryAxisPlural][0]\n                : newFocusedCell[secondaryAxis] > focusCellRegion[secondaryAxisPlural][1];\n            if (isSecondaryIndexOutOfBounds) {\n                // if moving along the secondary also moves us outside\n                // go to the start (or end) of the next (or previous region)\n                // (note that if there's only one region you'll be moving to the opposite corner, which is fine)\n                var newFocusCellSelectionIndex = newFocusedCell.focusSelectionIndex + movementDirection;\n                // newFocusCellSelectionIndex should be one more (or less), unless we need to wrap around\n                if (isUpOrLeft ? newFocusCellSelectionIndex < 0 : newFocusCellSelectionIndex >= selectedRegions.length) {\n                    newFocusCellSelectionIndex = isUpOrLeft ? selectedRegions.length - 1 : 0;\n                }\n                var newFocusCellRegion = Regions.getCellRegionFromRegion(selectedRegions[newFocusCellSelectionIndex], this.grid.numRows, this.grid.numCols);\n                newFocusedCell = {\n                    col: newFocusCellRegion.cols[regionIntervalIndex],\n                    focusSelectionIndex: newFocusCellSelectionIndex,\n                    row: newFocusCellRegion.rows[regionIntervalIndex],\n                };\n            }\n        }\n        return newFocusedCell;\n    };\n    Table.prototype.shouldDisableVerticalScroll = function () {\n        var enableGhostCells = this.props.enableGhostCells;\n        var viewportRect = this.state.viewportRect;\n        var rowIndices = this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n        var isViewportUnscrolledVertically = viewportRect != null && viewportRect.top === 0;\n        var areRowHeadersLoading = this.hasLoadingOption(this.props.loadingOptions, TableLoadingOption.ROW_HEADERS);\n        var areGhostRowsVisible = enableGhostCells && this.grid.isGhostIndex(rowIndices.rowIndexEnd, 0);\n        return areGhostRowsVisible && (isViewportUnscrolledVertically || areRowHeadersLoading);\n    };\n    Table.prototype.shouldDisableHorizontalScroll = function () {\n        var enableGhostCells = this.props.enableGhostCells;\n        var viewportRect = this.state.viewportRect;\n        var columnIndices = this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n        var isViewportUnscrolledHorizontally = viewportRect != null && viewportRect.left === 0;\n        var areGhostColumnsVisible = enableGhostCells && this.grid.isGhostIndex(0, columnIndices.columnIndexEnd);\n        var areColumnHeadersLoading = this.hasLoadingOption(this.props.loadingOptions, TableLoadingOption.COLUMN_HEADERS);\n        return areGhostColumnsVisible && (isViewportUnscrolledHorizontally || areColumnHeadersLoading);\n    };\n    Table.prototype.maybeScrollTableIntoView = function () {\n        var viewportRect = this.state.viewportRect;\n        var tableBottom = this.grid.getCumulativeHeightAt(this.grid.numRows - 1);\n        var tableRight = this.grid.getCumulativeWidthAt(this.grid.numCols - 1);\n        var nextScrollTop = tableBottom < viewportRect.top + viewportRect.height\n            ? // scroll the last row into view\n                Math.max(0, tableBottom - viewportRect.height)\n            : viewportRect.top;\n        var nextScrollLeft = tableRight < viewportRect.left + viewportRect.width\n            ? // scroll the last column into view\n                Math.max(0, tableRight - viewportRect.width)\n            : viewportRect.left;\n        this.syncViewportPosition(nextScrollLeft, nextScrollTop);\n    };\n    Table.prototype.getColumnProps = function (columnIndex) {\n        var column = this.childrenArray[columnIndex];\n        return column.props;\n    };\n    Table.prototype.isGuidesShowing = function () {\n        return this.state.verticalGuides != null || this.state.horizontalGuides != null;\n    };\n    Table.prototype.isSelectionModeEnabled = function (selectionMode, selectionModes) {\n        if (selectionModes === void 0) { selectionModes = this.props.selectionModes; }\n        var _a = this.props, children = _a.children, numRows = _a.numRows;\n        var numColumns = React.Children.count(children);\n        return selectionModes.indexOf(selectionMode) >= 0 && numRows > 0 && numColumns > 0;\n    };\n    Table.prototype.getEnabledSelectionHandler = function (selectionMode) {\n        if (!this.isSelectionModeEnabled(selectionMode)) {\n            // If the selection mode isn't enabled, return a callback that\n            // will clear the selection. For example, if row selection is\n            // disabled, clicking on the row header will clear the table's\n            // selection. If all selection modes are enabled, clicking on the\n            // same region twice will clear the selection.\n            return this.clearSelection;\n        }\n        else {\n            return this.handleSelection;\n        }\n    };\n    Table.prototype.invalidateGrid = function () {\n        this.grid = null;\n    };\n    Table.prototype.validateGrid = function () {\n        if (this.grid == null) {\n            var _a = this.props, defaultRowHeight = _a.defaultRowHeight, defaultColumnWidth = _a.defaultColumnWidth;\n            var _b = this.state, rowHeights = _b.rowHeights, columnWidths = _b.columnWidths;\n            this.grid = new Grid(rowHeights, columnWidths, Grid.DEFAULT_BLEED, defaultRowHeight, defaultColumnWidth);\n            this.invokeOnVisibleCellsChangeCallback(this.state.viewportRect);\n        }\n    };\n    /**\n     * Renders a `RegionLayer`, applying styles to the regions using the\n     * supplied `IRegionStyler`. `RegionLayer` is a `PureRender` component, so\n     * the `IRegionStyler` should be a new instance on every render if we\n     * intend to redraw the region layer.\n     */\n    Table.prototype.maybeRenderRegions = function (getRegionStyle, quadrantType) {\n        if (this.isGuidesShowing() && !this.state.isReordering) {\n            // we want to show guides *and* the selection styles when reordering rows or columns\n            return undefined;\n        }\n        var regionGroups = Regions.joinStyledRegionGroups(this.state.selectedRegions, this.props.styledRegionGroups, this.state.focusedCell);\n        return regionGroups.map(function (regionGroup, index) {\n            var regionStyles = regionGroup.regions.map(function (region) { return getRegionStyle(region, quadrantType); });\n            return (React.createElement(RegionLayer, { className: classNames(regionGroup.className), key: index, regions: regionGroup.regions, regionStyles: regionStyles }));\n        });\n    };\n    Table.prototype.syncViewportPosition = function (nextScrollLeft, nextScrollTop) {\n        var viewportRect = this.state.viewportRect;\n        var didScrollTopChange = nextScrollTop !== viewportRect.top;\n        var didScrollLeftChange = nextScrollLeft !== viewportRect.left;\n        if (didScrollTopChange || didScrollLeftChange) {\n            // we need to modify the scroll container explicitly for the viewport to shift. in so\n            // doing, we add the size of the header elements, which are not technically part of the\n            // \"grid\" concept (the grid only consists of body cells at present).\n            if (didScrollTopChange) {\n                var topCorrection = this.shouldDisableVerticalScroll() ? 0 : this.columnHeaderElement.clientHeight;\n                this.scrollContainerElement.scrollTop = nextScrollTop + topCorrection;\n            }\n            if (didScrollLeftChange) {\n                var leftCorrection = this.shouldDisableHorizontalScroll() || this.rowHeaderElement == null\n                    ? 0\n                    : this.rowHeaderElement.clientWidth;\n                this.scrollContainerElement.scrollLeft = nextScrollLeft + leftCorrection;\n            }\n            var nextViewportRect = new Rect(nextScrollLeft, nextScrollTop, viewportRect.width, viewportRect.height);\n            this.updateViewportRect(nextViewportRect);\n        }\n    };\n    Table.prototype.updateLocator = function () {\n        this.locator\n            .setGrid(this.grid)\n            .setNumFrozenRows(this.state.numFrozenRowsClamped)\n            .setNumFrozenColumns(this.state.numFrozenColumnsClamped);\n    };\n    Table.prototype.invokeOnVisibleCellsChangeCallback = function (viewportRect) {\n        var columnIndices = this.grid.getColumnIndicesInRect(viewportRect);\n        var rowIndices = this.grid.getRowIndicesInRect(viewportRect);\n        CoreUtils.safeInvoke(this.props.onVisibleCellsChange, rowIndices, columnIndices);\n    };\n    /**\n     * Normalizes RenderMode.BATCH_ON_UPDATE into RenderMode.{BATCH,NONE}. We do\n     * this because there are actually multiple updates required before the\n     * <Table> is considered fully \"mounted,\" and adding that knowledge to child\n     * components would lead to tight coupling. Thus, keep it simple for them.\n     */\n    Table.prototype.getNormalizedRenderMode = function () {\n        var renderMode = this.props.renderMode;\n        var shouldBatchRender = renderMode === RenderMode.BATCH || (renderMode === RenderMode.BATCH_ON_UPDATE && this.didCompletelyMount);\n        return shouldBatchRender ? RenderMode.BATCH : RenderMode.NONE;\n    };\n    /**\n     * Returns an object with option keys mapped to their resolved values\n     * (falling back to default values as necessary).\n     */\n    Table.prototype.resolveResizeRowsByApproximateHeightOptions = function (options, rowIndex, columnIndex) {\n        var optionKeys = Object.keys(Table_1.resizeRowsByApproximateHeightDefaults);\n        var optionReducer = function (agg, key) {\n            agg[key] =\n                options != null && options[key] != null\n                    ? CoreUtils.safeInvokeOrValue(options[key], rowIndex, columnIndex)\n                    : Table_1.resizeRowsByApproximateHeightDefaults[key];\n            return agg;\n        };\n        var resolvedOptions = optionKeys.reduce(optionReducer, {});\n        return resolvedOptions;\n    };\n    Table.defaultProps = {\n        defaultColumnWidth: 150,\n        defaultRowHeight: 20,\n        enableFocusedCell: false,\n        enableGhostCells: false,\n        enableMultipleSelection: true,\n        enableRowHeader: true,\n        loadingOptions: [],\n        minColumnWidth: 50,\n        minRowHeight: 20,\n        numFrozenColumns: 0,\n        numFrozenRows: 0,\n        numRows: 0,\n        renderMode: RenderMode.BATCH_ON_UPDATE,\n        rowHeaderCellRenderer: renderDefaultRowHeader,\n        selectionModes: SelectionModes.ALL,\n    };\n    Table.childContextTypes = columnInteractionBarContextTypes;\n    // these default values for `resizeRowsByApproximateHeight` have been\n    // fine-tuned to work well with default Table font styles.\n    Table.resizeRowsByApproximateHeightDefaults = {\n        getApproximateCharWidth: 8,\n        getApproximateLineHeight: 18,\n        getCellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n        getNumBufferLines: 1,\n    };\n    Table.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST = [\n        \"selectedRegions\",\n    ];\n    Table.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST = [\n        \"selectedRegions\",\n        \"viewportRect\",\n    ];\n    Table = Table_1 = tslib_1.__decorate([\n        HotkeysTarget\n    ], Table);\n    return Table;\n    var Table_1;\n}(AbstractComponent));\nexport { Table };\nfunction clampNumFrozenColumns(props) {\n    var numFrozenColumns = props.numFrozenColumns;\n    var numColumns = React.Children.count(props.children);\n    return clampPotentiallyNullValue(numFrozenColumns, numColumns);\n}\nfunction clampNumFrozenRows(props) {\n    var numFrozenRows = props.numFrozenRows, numRows = props.numRows;\n    return clampPotentiallyNullValue(numFrozenRows, numRows);\n}\n// add explicit `| null | undefined`, because the params make more sense in this\n// order, and you can't have an optional param precede a required param.\nfunction clampPotentiallyNullValue(value, max) {\n    return value == null ? 0 : Utils.clamp(value, 0, max);\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"./common/classes\";\nimport { ContextMenuTargetWrapper } from \"./common/contextMenuTargetWrapper\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { MenuContext } from \"./interactions/menus\";\nimport { DragSelectable } from \"./interactions/selectable\";\nimport { Regions } from \"./regions\";\nimport { cellClassNames, TableBodyCells } from \"./tableBodyCells\";\nvar DEEP_COMPARE_KEYS = [\"selectedRegions\"];\nvar TableBody = /** @class */ (function (_super) {\n    tslib_1.__extends(TableBody, _super);\n    function TableBody() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.renderContextMenu = function (e) {\n            var _a = _this.props, grid = _a.grid, onFocusedCell = _a.onFocusedCell, onSelection = _a.onSelection, bodyContextMenuRenderer = _a.bodyContextMenuRenderer, selectedRegions = _a.selectedRegions;\n            var numRows = grid.numRows, numCols = grid.numCols;\n            if (bodyContextMenuRenderer == null) {\n                return undefined;\n            }\n            var targetRegion = _this.locateClick(e.nativeEvent);\n            var nextSelectedRegions = selectedRegions;\n            // if the event did not happen within a selected region, clear all\n            // selections and select the right-clicked cell.\n            var foundIndex = Regions.findContainingRegion(selectedRegions, targetRegion);\n            if (foundIndex < 0) {\n                nextSelectedRegions = [targetRegion];\n                onSelection(nextSelectedRegions);\n                // move the focused cell to the new region.\n                var nextFocusedCell = tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(targetRegion), { focusSelectionIndex: 0 });\n                onFocusedCell(nextFocusedCell);\n            }\n            var menuContext = new MenuContext(targetRegion, nextSelectedRegions, numRows, numCols);\n            var contextMenu = bodyContextMenuRenderer(menuContext);\n            return contextMenu == null ? undefined : contextMenu;\n        };\n        // Callbacks\n        // =========\n        _this.handleSelectionEnd = function () {\n            _this.activationCell = null; // not strictly required, but good practice\n        };\n        _this.locateClick = function (event) {\n            _this.activationCell = _this.props.locator.convertPointToCell(event.clientX, event.clientY);\n            return Regions.cell(_this.activationCell.row, _this.activationCell.col);\n        };\n        _this.locateDrag = function (_event, coords, returnEndOnly) {\n            if (returnEndOnly === void 0) { returnEndOnly = false; }\n            var start = _this.activationCell;\n            var end = _this.props.locator.convertPointToCell(coords.current[0], coords.current[1]);\n            return returnEndOnly ? Regions.cell(end.row, end.col) : Regions.cell(start.row, start.col, end.row, end.col);\n        };\n        return _this;\n    }\n    // TODO: Does this method need to be public?\n    // (see: https://github.com/palantir/blueprint/issues/1617)\n    TableBody.cellClassNames = function (rowIndex, columnIndex) {\n        return cellClassNames(rowIndex, columnIndex);\n    };\n    TableBody.prototype.shouldComponentUpdate = function (nextProps) {\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: DEEP_COMPARE_KEYS }) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, DEEP_COMPARE_KEYS));\n    };\n    TableBody.prototype.render = function () {\n        var _a = this.props, grid = _a.grid, numFrozenColumns = _a.numFrozenColumns, numFrozenRows = _a.numFrozenRows;\n        var defaultStyle = grid.getRect().sizeStyle();\n        var style = {\n            height: numFrozenRows != null ? grid.getCumulativeHeightAt(numFrozenRows - 1) : defaultStyle.height,\n            width: numFrozenColumns != null ? grid.getCumulativeWidthAt(numFrozenColumns - 1) : defaultStyle.width,\n        };\n        return (React.createElement(DragSelectable, { enableMultipleSelection: this.props.enableMultipleSelection, focusedCell: this.props.focusedCell, locateClick: this.locateClick, locateDrag: this.locateDrag, onFocusedCell: this.props.onFocusedCell, onSelection: this.props.onSelection, onSelectionEnd: this.handleSelectionEnd, selectedRegions: this.props.selectedRegions, selectedRegionTransform: this.props.selectedRegionTransform },\n            React.createElement(ContextMenuTargetWrapper, { className: classNames(Classes.TABLE_BODY_VIRTUAL_CLIENT, Classes.TABLE_CELL_CLIENT), renderContextMenu: this.renderContextMenu, style: style },\n                React.createElement(TableBodyCells, { cellRenderer: this.props.cellRenderer, focusedCell: this.props.focusedCell, grid: grid, loading: this.props.loading, onCompleteRender: this.props.onCompleteRender, renderMode: this.props.renderMode, columnIndexStart: this.props.columnIndexStart, columnIndexEnd: this.props.columnIndexEnd, rowIndexStart: this.props.rowIndexStart, rowIndexEnd: this.props.rowIndexEnd, viewportRect: this.props.viewportRect }))));\n    };\n    TableBody.defaultProps = {\n        loading: false,\n        renderMode: RenderMode.BATCH,\n    };\n    return TableBody;\n}(React.Component));\nexport { TableBody };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { emptyCellRenderer } from \"./cell/cell\";\nimport { Batcher } from \"./common/batcher\";\nimport * as Classes from \"./common/classes\";\nimport { Rect } from \"./common/rect\";\nimport { RenderMode } from \"./common/renderMode\";\nvar SHALLOW_COMPARE_BLACKLIST = [\"viewportRect\"];\n/**\n * We don't want to reset the batcher when this set of keys changes. Any other\n * changes should reset the batcher's internal cache.\n */\nvar BATCHER_RESET_PROP_KEYS_BLACKLIST = [\n    \"columnIndexEnd\",\n    \"columnIndexStart\",\n    \"rowIndexEnd\",\n    \"rowIndexStart\",\n];\nvar TableBodyCells = /** @class */ (function (_super) {\n    tslib_1.__extends(TableBodyCells, _super);\n    function TableBodyCells() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.batcher = new Batcher();\n        // Cell renderers\n        // ==============\n        _this.renderNewCell = function (rowIndex, columnIndex) {\n            var _a = _this.props, columnIndexEnd = _a.columnIndexEnd, grid = _a.grid, rowIndexEnd = _a.rowIndexEnd;\n            var extremaClasses = grid.getExtremaClasses(rowIndex, columnIndex, rowIndexEnd, columnIndexEnd);\n            var isGhost = grid.isGhostIndex(rowIndex, columnIndex);\n            return _this.renderCell(rowIndex, columnIndex, extremaClasses, isGhost);\n        };\n        _this.renderCell = function (rowIndex, columnIndex, extremaClasses, isGhost) {\n            var _a = _this.props, cellRenderer = _a.cellRenderer, focusedCell = _a.focusedCell, loading = _a.loading, grid = _a.grid;\n            var baseCell = isGhost ? emptyCellRenderer() : cellRenderer(rowIndex, columnIndex);\n            var className = classNames(cellClassNames(rowIndex, columnIndex), extremaClasses, (_b = {},\n                _b[Classes.TABLE_CELL_GHOST] = isGhost,\n                _b[Classes.TABLE_CELL_LEDGER_ODD] = rowIndex % 2 === 1,\n                _b[Classes.TABLE_CELL_LEDGER_EVEN] = rowIndex % 2 === 0,\n                _b), baseCell.props.className);\n            var key = TableBodyCells.cellReactKey(rowIndex, columnIndex);\n            var rect = isGhost ? grid.getGhostCellRect(rowIndex, columnIndex) : grid.getCellRect(rowIndex, columnIndex);\n            var cellLoading = baseCell.props.loading != null ? baseCell.props.loading : loading;\n            var style = tslib_1.__assign({}, baseCell.props.style, Rect.style(rect));\n            var isFocused = focusedCell != null && focusedCell.row === rowIndex && focusedCell.col === columnIndex;\n            return React.cloneElement(baseCell, { className: className, key: key, isFocused: isFocused, loading: cellLoading, style: style });\n            var _b;\n        };\n        // Other\n        // =====\n        _this.didViewportRectChange = function (nextViewportRect, currViewportRect) {\n            if (nextViewportRect == null && currViewportRect == null) {\n                return false;\n            }\n            else if (nextViewportRect == null || currViewportRect == null) {\n                return true;\n            }\n            else {\n                return !nextViewportRect.equals(currViewportRect);\n            }\n        };\n        return _this;\n    }\n    TableBodyCells.cellReactKey = function (rowIndex, columnIndex) {\n        return \"cell-\" + rowIndex + \"-\" + columnIndex;\n    };\n    TableBodyCells.prototype.componentDidMount = function () {\n        this.maybeInvokeOnCompleteRender();\n    };\n    TableBodyCells.prototype.shouldComponentUpdate = function (nextProps) {\n        return (!CoreUtils.shallowCompareKeys(nextProps, this.props, { exclude: SHALLOW_COMPARE_BLACKLIST }) ||\n            // \"viewportRect\" is not a plain object, so we can't just deep\n            // compare; we need custom logic.\n            this.didViewportRectChange(nextProps.viewportRect, this.props.viewportRect));\n    };\n    TableBodyCells.prototype.componentWillUpdate = function (nextProps) {\n        var resetKeysBlacklist = { exclude: BATCHER_RESET_PROP_KEYS_BLACKLIST };\n        var shouldResetBatcher = !CoreUtils.shallowCompareKeys(this.props, nextProps, resetKeysBlacklist);\n        if (shouldResetBatcher) {\n            this.batcher.reset();\n        }\n    };\n    TableBodyCells.prototype.componentDidUpdate = function () {\n        this.maybeInvokeOnCompleteRender();\n    };\n    TableBodyCells.prototype.componentWillUnmount = function () {\n        this.batcher.cancelOutstandingCallback();\n    };\n    TableBodyCells.prototype.render = function () {\n        var renderMode = this.props.renderMode;\n        var cells = renderMode === RenderMode.BATCH ? this.renderBatchedCells() : this.renderAllCells();\n        return React.createElement(\"div\", { className: \"pt-table-body-cells\" }, cells);\n    };\n    // Render modes\n    // ============\n    TableBodyCells.prototype.renderBatchedCells = function () {\n        var _this = this;\n        var _a = this.props, columnIndexEnd = _a.columnIndexEnd, columnIndexStart = _a.columnIndexStart, rowIndexEnd = _a.rowIndexEnd, rowIndexStart = _a.rowIndexStart;\n        // render cells in batches\n        this.batcher.startNewBatch();\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n                this.batcher.addArgsToBatch(rowIndex, columnIndex);\n            }\n        }\n        this.batcher.removeOldAddNew(this.renderNewCell);\n        if (!this.batcher.isDone()) {\n            this.batcher.idleCallback(function () { return _this.forceUpdate(); });\n        }\n        var cells = this.batcher.getList();\n        return cells;\n    };\n    TableBodyCells.prototype.renderAllCells = function () {\n        var _a = this.props, columnIndexEnd = _a.columnIndexEnd, columnIndexStart = _a.columnIndexStart, rowIndexEnd = _a.rowIndexEnd, rowIndexStart = _a.rowIndexStart;\n        var cells = [];\n        var cellsArgs = [];\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n                cells.push(this.renderNewCell(rowIndex, columnIndex));\n                cellsArgs.push([rowIndex, columnIndex]);\n            }\n        }\n        // pretend we did an entire rendering pass using the batcher. that way,\n        // if we switch from `RenderMode.NONE` to `RenderMode.BATCH`, we don't\n        // have to re-paint every cell still in view.\n        this.batcher.setList(cellsArgs, cells);\n        return cells;\n    };\n    // Callbacks\n    // =========\n    TableBodyCells.prototype.maybeInvokeOnCompleteRender = function () {\n        var _a = this.props, onCompleteRender = _a.onCompleteRender, renderMode = _a.renderMode;\n        if (renderMode === RenderMode.NONE || (renderMode === RenderMode.BATCH && this.batcher.isDone())) {\n            CoreUtils.safeInvoke(onCompleteRender);\n        }\n    };\n    TableBodyCells.defaultProps = {\n        renderMode: RenderMode.BATCH,\n    };\n    return TableBodyCells;\n}(React.Component));\nexport { TableBodyCells };\n/**\n * Returns the array of class names that must be applied to each table\n * cell so that we can locate any cell based on its coordinate.\n */\nexport function cellClassNames(rowIndex, columnIndex) {\n    return [Classes.rowCellIndexClass(rowIndex), Classes.columnCellIndexClass(columnIndex)];\n}\n","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|accept|acceptCharset|accessKey|action|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class)|(on[A-Z].*)|((data|aria)-.*))$/i;\nvar index = memoize(RegExp.prototype.test.bind(reactPropsRegex));\n\nexport default index;\n//# sourceMappingURL=is-prop-valid.esm.js.map\n","function memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n//# sourceMappingURL=memoize.esm.js.map\n","import PropTypes from 'prop-types';\nimport isPropValid from '@emotion/is-prop-valid';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar channel = '__EMOTION_THEMING__';\n\n// https://github.com/styled-components/styled-components/blob/e05b3fe247e9d956bcde786cec376e32afb85bca/src/utils/create-broadcast.js\n\nvar _contextTypes;\nvar contextTypes = (_contextTypes = {}, _contextTypes[channel] = PropTypes.object, _contextTypes);\n\nfunction setTheme(theme) {\n  this.setState({\n    theme: theme\n  });\n}\nvar testPickPropsOnStringTag = isPropValid;\nvar testPickPropsOnComponent = function testPickPropsOnComponent(key) {\n  return key !== 'theme' && key !== 'innerRef';\n};\nvar testAlwaysTrue = function testAlwaysTrue() {\n  return true;\n};\nvar pickAssign = function pickAssign(testFn, target) {\n  var i = 2;\n  var length = arguments.length;\n\n  for (; i < length; i++) {\n    var source = arguments[i];\n\n    var _key = void 0;\n\n    for (_key in source) {\n      if (testFn(_key)) {\n        target[_key] = source[_key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction createEmotionStyled(emotion, view) {\n  var _createStyled = function createStyled(tag, options) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (tag === undefined) {\n        throw new Error('You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.');\n      }\n    }\n\n    var staticClassName;\n    var identifierName;\n    var stableClassName;\n    var shouldForwardProp;\n\n    if (options !== undefined) {\n      staticClassName = options.e;\n      identifierName = options.label;\n      stableClassName = options.target;\n      shouldForwardProp = tag.__emotion_forwardProp && options.shouldForwardProp ? function (propName) {\n        return tag.__emotion_forwardProp(propName) && // $FlowFixMe\n        options.shouldForwardProp(propName);\n      } : options.shouldForwardProp;\n    }\n\n    var isReal = tag.__emotion_real === tag;\n    var baseTag = staticClassName === undefined ? isReal && tag.__emotion_base || tag : tag;\n\n    if (typeof shouldForwardProp !== 'function') {\n      shouldForwardProp = typeof baseTag === 'string' && baseTag.charAt(0) === baseTag.charAt(0).toLowerCase() ? testPickPropsOnStringTag : testPickPropsOnComponent;\n    }\n\n    return function () {\n      var args = arguments;\n      var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];\n\n      if (identifierName !== undefined) {\n        styles.push(\"label:\" + identifierName + \";\");\n      }\n\n      if (staticClassName === undefined) {\n        if (args[0] == null || args[0].raw === undefined) {\n          styles.push.apply(styles, args);\n        } else {\n          styles.push(args[0][0]);\n          var len = args.length;\n          var i = 1;\n\n          for (; i < len; i++) {\n            styles.push(args[i], args[0][i]);\n          }\n        }\n      }\n\n      var Styled =\n      /*#__PURE__*/\n      function (_view$Component) {\n        _inheritsLoose(Styled, _view$Component);\n\n        function Styled() {\n          return _view$Component.apply(this, arguments) || this;\n        }\n\n        var _proto = Styled.prototype;\n\n        _proto.componentWillMount = function componentWillMount() {\n          if (this.context[channel] !== undefined) {\n            this.unsubscribe = this.context[channel].subscribe(setTheme.bind(this));\n          }\n        };\n\n        _proto.componentWillUnmount = function componentWillUnmount() {\n          if (this.unsubscribe !== undefined) {\n            this.context[channel].unsubscribe(this.unsubscribe);\n          }\n        };\n\n        _proto.render = function render() {\n          var props = this.props,\n              state = this.state;\n          this.mergedProps = pickAssign(testAlwaysTrue, {}, props, {\n            theme: state !== null && state.theme || props.theme || {}\n          });\n          var className = '';\n          var classInterpolations = [];\n\n          if (props.className) {\n            if (staticClassName === undefined) {\n              className += emotion.getRegisteredStyles(classInterpolations, props.className);\n            } else {\n              className += props.className + \" \";\n            }\n          }\n\n          if (staticClassName === undefined) {\n            className += emotion.css.apply(this, styles.concat(classInterpolations));\n          } else {\n            className += staticClassName;\n          }\n\n          if (stableClassName !== undefined) {\n            className += \" \" + stableClassName;\n          }\n\n          return view.createElement(baseTag, // $FlowFixMe\n          pickAssign(shouldForwardProp, {}, props, {\n            className: className,\n            ref: props.innerRef\n          }));\n        };\n\n        return Styled;\n      }(view.Component);\n\n      Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + \")\";\n\n      if (tag.defaultProps !== undefined) {\n        // $FlowFixMe\n        Styled.defaultProps = tag.defaultProps;\n      }\n\n      Styled.contextTypes = contextTypes;\n      Styled.__emotion_styles = styles;\n      Styled.__emotion_base = baseTag;\n      Styled.__emotion_real = Styled;\n      Styled.__emotion_forwardProp = shouldForwardProp;\n      Object.defineProperty(Styled, 'toString', {\n        enumerable: false,\n        value: function value() {\n          if (process.env.NODE_ENV !== 'production' && stableClassName === undefined) {\n            return 'NO_COMPONENT_SELECTOR';\n          } // $FlowFixMe\n\n\n          return \".\" + stableClassName;\n        }\n      });\n\n      Styled.withComponent = function (nextTag, nextOptions) {\n        return _createStyled(nextTag, nextOptions !== undefined ? // $FlowFixMe\n        pickAssign(testAlwaysTrue, {}, options, nextOptions) : options).apply(void 0, styles);\n      };\n\n      return Styled;\n    };\n  };\n\n  if (process.env.NODE_ENV !== 'production' && typeof Proxy !== 'undefined') {\n    _createStyled = new Proxy(_createStyled, {\n      get: function get(target, property) {\n        switch (property) {\n          // react-hot-loader tries to access this stuff\n          case '__proto__':\n          case 'name':\n          case 'prototype':\n          case 'displayName':\n            {\n              return target[property];\n            }\n\n          default:\n            {\n              throw new Error(\"You're trying to use the styled shorthand without babel-plugin-emotion.\" + (\"\\nPlease install and setup babel-plugin-emotion or use the function call syntax(`styled('\" + property + \"')` instead of `styled.\" + property + \"`)\"));\n            }\n        }\n      }\n    });\n  }\n\n  return _createStyled;\n}\n\nexport default createEmotionStyled;\n//# sourceMappingURL=index.esm.js.map\n","import React from 'react';\nimport * as emotion from 'emotion';\nexport * from 'emotion';\nimport createEmotionStyled from 'create-emotion-styled';\n\nvar index = createEmotionStyled(emotion, React);\n\nexport default index;\n//# sourceMappingURL=index.esm.js.map\n"],"sourceRoot":""}