{"version":3,"sources":["webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/cell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/editableCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/formats/jsonFormat.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/cell/formats/truncatedFormat.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/column.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/batcher.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/classes.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/clipboard.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/context.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/contextMenuTargetWrapper.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/direction.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/errors.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/grid.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/index.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/directionUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/focusedCellUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/platformUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/scrollUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/internal/selectionUtils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/loadableContent.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/rect.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/renderMode.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/requestIdleCallback.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/common/utils.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/columnHeader.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/columnHeaderCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/editableName.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/header.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/headerCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/rowHeader.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/headers/rowHeaderCell.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/index.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/dragEvents.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/draggable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/menus/copyCellsMenuItem.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/menus/index.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/menus/menuContext.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/reorderable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/resizable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/resizeHandle.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/resizeSensor.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/interactions/selectable.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/layers/guides.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/layers/regions.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/locator.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/quadrants/tableQuadrant.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/quadrants/tableQuadrantStack.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/quadrants/tableQuadrantStackCache.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/regions.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/table.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/tableBody.js","webpack:///./node_modules/@blueprintjs/table/lib/esm/tableBodyCells.js","webpack:///./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.esm.js","webpack:///./node_modules/@emotion/memoize/dist/memoize.esm.js","webpack:///./node_modules/create-emotion-styled/dist/index.esm.js","webpack:///./node_modules/react-emotion/dist/index.esm.js"],"names":["_formats_truncatedFormat__WEBPACK_IMPORTED_MODULE_7__","__webpack_require__","emptyCellRenderer","react__WEBPACK_IMPORTED_MODULE_2__","Cell","_super","apply","this","arguments","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","shouldComponentUpdate","nextProps","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_4__","shallowCompareKeys","props","exclude","deepCompareKeys","style","render","_b","_c","_a","cellRef","tabIndex","onKeyDown","onKeyUp","onKeyPress","intent","interactive","loading","tooltip","truncated","className","wrapText","classes","classnames__WEBPACK_IMPORTED_MODULE_1___default","_common_classes__WEBPACK_IMPORTED_MODULE_3__","intentClass","LOADING","textClasses","modifiedChildren","map","children","child","childType","type","isPrototypeOf","_formats_jsonFormat__WEBPACK_IMPORTED_MODULE_6__","parentCellHeight","parseInt","height","parentCellWidth","width","content","title","ref","_common_loadableContent__WEBPACK_IMPORTED_MODULE_5__","variableLength","defaultProps","_cell__WEBPACK_IMPORTED_MODULE_6__","EditableCell","context","_this","call","refHandlers","cell","handleKeyPress","state","isEditing","isFocused","setState","dirtyValue","savedValue","handleEdit","handleCancel","value","undefined","invokeCallback","onCancel","handleChange","onChange","handleConfirm","onConfirm","handleCellActivate","_event","handleCellDoubleClick","componentDidMount","checkShouldFocus","componentDidUpdate","nextState","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_3__","componentWillReceiveProps","spreadableProps","cellContents","_common_classes__WEBPACK_IMPORTED_MODULE_4__","minWidth","onEdit","placeholder","selectAllOnFocus","_interactions_draggable__WEBPACK_IMPORTED_MODULE_5__","onActivate","onDoubleClick","preventDefault","stopPropagation","renderHotkeys","key","label","group","combo","focus","callback","rowIndex","columnIndex","safeInvoke","_truncatedFormat__WEBPACK_IMPORTED_MODULE_4__","JSONFormat","omitQuotesOnStrings","stringify","showPopover","isNully","NEVER","displayValue","obj","JSON","TruncatedPopoverMode","_locator__WEBPACK_IMPORTED_MODULE_6__","TruncatedFormat","isPopoverOpen","isTruncated","handleContentDivRef","contentDiv","handlePopoverOpen","handlePopoverClose","setTruncationState","detectTruncation","truncateLength","truncationSuffix","cellContent","length","substring","shouldShowPopover","classnames__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_3__","renderPopover","preformatted","popoverClasses","popoverContent","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_1__","modifiers","preventOverflow","boundariesElement","position","BOTTOM","isOpen","onClose","icon","onClick","measureByApproxOptions","ALWAYS","WHEN_TRUNCATED","WHEN_TRUNCATED_APPROX","approximateCharWidth","approximateLineHeight","cellHorizontalPadding","numBufferLines","cellWidth","_common_utils__WEBPACK_IMPORTED_MODULE_5__","getApproxCellHeight","containerHeight","clientHeight","containerWidth","clientWidth","actualContentHeight","scrollHeight","contentWidth","scrollWidth","actualContentWidth","shouldTruncate","CELL_HORIZONTAL_PADDING","_cell_cell__WEBPACK_IMPORTED_MODULE_2__","Column","cellRenderer","react__WEBPACK_IMPORTED_MODULE_1__","_requestIdleCallback__WEBPACK_IMPORTED_MODULE_1__","Batcher","currentObjects","oldObjects","batchArgs","done","handleIdleCallback","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_0__","mapCurrentObjectKey","reset","startNewBatch","addArgsToBatch","args","_i","getKey","removeOldAddNew","addNewLimit","removeOldLimit","updateLimit","DEFAULT_ADD_LIMIT","DEFAULT_REMOVE_LIMIT","DEFAULT_UPDATE_LIMIT","setKeysDifference","forEach","Object","keys","setKeysIntersection","setHasSameKeys","isDone","getList","idleCallback","cancelOutstandingCallback","setList","objectsArgs","objects","i","join","ARG_DELIMITER","a","b","limit","setKeysOperation","operation","result","aKeys","push","bKeys","aKeys_1","d","__webpack_exports__","rowCellIndexClass","TABLE_BODY","TABLE_BODY_SCROLL_CLIENT","TABLE_BODY_VIRTUAL_CLIENT","TABLE_BOTTOM_CONTAINER","TABLE_CELL","TABLE_CELL_CLIENT","TABLE_CELL_GHOST","TABLE_CELL_INTERACTIVE","TABLE_CELL_LEDGER_EVEN","TABLE_CELL_LEDGER_ODD","TABLE_COLUMN_HEADER_TR","TABLE_COLUMN_HEADERS","TABLE_COLUMN_HEADER_CELL","TABLE_COLUMN_NAME","TABLE_COLUMN_NAME_TEXT","TABLE_CONTAINER","TABLE_DRAGGING","TABLE_EDITABLE_NAME","TABLE_EDITABLE_TEXT","TABLE_FOCUS_REGION","TABLE_HAS_INTERACTION_BAR","TABLE_HAS_REORDER_HANDLE","TABLE_HEADER","TABLE_HEADER_ACTIVE","TABLE_HEADER_CONTENT","TABLE_HEADER_REORDERABLE","TABLE_HEADER_SELECTED","TABLE_HORIZONTAL_CELL_DIVIDER","TABLE_HORIZONTAL_GUIDE","TABLE_INTERACTION_BAR","TABLE_LAST_IN_COLUMN","TABLE_LAST_IN_ROW","TABLE_MENU","TABLE_NO_HORIZONTAL_SCROLL","TABLE_NO_LAYOUT","TABLE_NO_ROWS","TABLE_NO_VERTICAL_SCROLL","TABLE_NO_WRAP_TEXT","TABLE_NULL","TABLE_OVERLAY","TABLE_OVERLAY_LAYER","TABLE_OVERLAY_REORDERING_CURSOR","TABLE_POPOVER_WHITESPACE_NORMAL","TABLE_POPOVER_WHITESPACE_PRE","TABLE_QUADRANT","TABLE_QUADRANT_BODY_CONTAINER","TABLE_QUADRANT_LEFT","TABLE_QUADRANT_MAIN","TABLE_QUADRANT_SCROLL_CONTAINER","TABLE_QUADRANT_STACK","TABLE_QUADRANT_TOP","TABLE_QUADRANT_TOP_LEFT","TABLE_REGION","TABLE_REORDER_HANDLE","TABLE_REORDER_HANDLE_TARGET","TABLE_REORDERING","TABLE_RESIZE_GUIDES","TABLE_RESIZE_HANDLE","TABLE_RESIZE_HANDLE_TARGET","TABLE_RESIZE_HORIZONTAL","TABLE_RESIZE_SENSOR","TABLE_RESIZE_SENSOR_EXPAND","TABLE_RESIZE_SENSOR_SHRINK","TABLE_RESIZE_VERTICAL","TABLE_ROUNDED_LAYOUT","TABLE_ROW_HEADERS","TABLE_ROW_HEADERS_CELLS_CONTAINER","TABLE_ROW_NAME","TABLE_ROW_NAME_TEXT","TABLE_SELECTION_ENABLED","TABLE_SELECTION_REGION","TABLE_TH_MENU","TABLE_TH_MENU_CONTAINER","TABLE_TH_MENU_CONTAINER_BACKGROUND","TABLE_TH_MENU_OPEN","TABLE_THEAD","TABLE_TOP_CONTAINER","TABLE_TRUNCATED_CELL","TABLE_TRUNCATED_FORMAT","TABLE_TRUNCATED_FORMAT_TEXT","TABLE_TRUNCATED_POPOVER","TABLE_TRUNCATED_POPOVER_TARGET","TABLE_TRUNCATED_TEXT","TABLE_TRUNCATED_VALUE","TABLE_VERTICAL_GUIDE","dimensionIndexClass","classPrefix","index","indexOf","columnIndexClass","rowIndexClass","columnCellIndexClass","Clipboard","applySelectableStyles","elem","overflow","setProperty","copyCells","cells","table","document","createElement","cells_1","row","tr","appendChild","row_1","textContent","tsv","copyElement","copyString","text","plaintext","isCopySupported","body","window","getSelection","selectAllChildren","addEventListener","e","clipboardData","setData","outerHTML","execCommand","err","removeChild","queryCommandSupported","prop_types__WEBPACK_IMPORTED_MODULE_0__","columnInteractionBarContextTypes","enableColumnInteractionBar","ContextMenuTargetWrapper","renderContextMenu","Direction","TABLE_NUM_COLUMNS_COLUMN_WIDTHS_MISMATCH","ns","QUADRANT_ON_SCROLL_UNNECESSARILY_DEFINED","TABLE_EXPAND_FOCUSED_REGION_MULTI_COLUMN_REGION","TABLE_EXPAND_FOCUSED_REGION_MULTI_ROW_REGION","TABLE_NON_COLUMN_CHILDREN_WARNING","TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING","TABLE_NUM_FROZEN_COLUMNS_NEGATIVE","TABLE_NUM_FROZEN_ROWS_BOUND_WARNING","TABLE_NUM_FROZEN_ROWS_NEGATIVE","TABLE_NUM_ROWS_ROW_HEIGHTS_MISMATCH","TABLE_NUM_ROWS_NEGATIVE","_utils__WEBPACK_IMPORTED_MODULE_4__","Grid","rowHeights","columnWidths","bleed","ghostHeight","ghostWidth","DEFAULT_BLEED","DEFAULT_GHOST_HEIGHT","DEFAULT_GHOST_WIDTH","getCumulativeWidthBefore","getCumulativeWidthAt","numCols","cumulativeColumnWidths","getCumulativeHeightBefore","getCumulativeHeightAt","numRows","cumulativeRowHeights","accumulate","getCellRect","top","left","_rect__WEBPACK_IMPORTED_MODULE_3__","getGhostCellRect","getHeight","getWidth","getRowRect","getColumnRect","getRect","mapCellsInRect","rect","results","getRowIndicesInRect","rowIndexStart","rowIndexEnd","getColumnIndicesInRect","columnIndexStart","columnIndexEnd","mapRowsInRect","mapColumnsInRect","includeGhostCells","DEFAULT_MAX_ROWS","searchEnd","Math","max","getIndicesInInterval","start","end","DEFAULT_MAX_COLUMNS","isGhostIndex","getExtremaClasses","rowEnd","columnEnd","_classes__WEBPACK_IMPORTED_MODULE_2__","getRegionStyle","region","_regions__WEBPACK_IMPORTED_MODULE_1__","getRegionCardinality","CELLS","rows","rowStart","cols","colStart","colEnd","display","cellRect0","cellRect1","offsetLeft","offsetTop","union","FULL_COLUMNS","bottom","FULL_ROWS","_d","right","FULL_TABLE","min","count","useEndBleed","lookup","binarySearch","_direction__WEBPACK_IMPORTED_MODULE_0__","directionToDelta","direction","UP","DOWN","LEFT","RIGHT","_errors__WEBPACK_IMPORTED_MODULE_2__","getFocusedOrLastSelectedIndex","selectedRegions","focusedCell","focusSelectionIndex","getInitialFocusedCell","enableFocusedCell","focusedCellFromProps","focusedCellFromState","lastIndex","getFocusCellCoordinatesFromRegion","col","isFocusedCellAtRegionTop","isFocusedCellAtRegionBottom","isFocusedCellAtRegionLeft","isFocusedCellAtRegionRight","toFullCoordinates","cellCoords","expandFocusedRegion","newRegion","getExpandedRegionIndices","indexStart","indexEnd","column","colIndexStart","colIndexEnd","focusedCellDimension","regionDimension","sourceIndex","destinationIndex","Error","isMac","platformOverride","platformActual","navigator","platform","test","isModKeyPressed","event","isMacPlatform","metaKey","ctrlKey","_regions__WEBPACK_IMPORTED_MODULE_0__","getScrollPositionForRegion","currScrollLeft","currScrollTop","getLeftOffset","getTopOffset","numFrozenRows","numFrozenColumns","cardinality","scrollTop","scrollLeft","frozenColumnsCumulativeWidth","frozenRowsCumulativeHeight","topOffset","leftOffset","getClampedScrollPosition","measureScrollBarThickness","element","offsetHeight","offsetWidth","scrollOffset","frozenRegionCumulativeSize","_focusedCellUtils__WEBPACK_IMPORTED_MODULE_3__","resizeRegion","nextRegion","copy","affectedRowIndex","affectedColumnIndex","isAtTop","isAtBottom","isAtLeft","isAtRight","_direction__WEBPACK_IMPORTED_MODULE_1__","delta","_directionUtils__WEBPACK_IMPORTED_MODULE_2__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_2__","LoadableContent","calculateStyle","SKELETON","only","floor","random","Rect","anyRect0","anyRect1","rect0","wrap","rect1","subtractOrigin","anyRect","sizeStyle","containsX","clientX","containsY","clientY","equals","ORIGIN","RenderMode","requestIdleCallback","IDLE_STATE","callbacks","triggered","source","data","shift","triggerIdleFrame","requestAnimationFrame","postMessage","Utils","CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT","CSS_FONT_PROPERTIES","times","n","Array","numbers","sum","numbers_1","toBase26Alpha","num","str","letter","String","fromCharCode","toBase26CellName","high","low","mid","arrayOfLength","array","fillValue","slice","assignSparseValues","defaults","sparseOverrides","override","measureElementTextContent","getContext","getComputedStyle","font","prop","getPropertyValue","removedElementParent","removedElementNextSibling","elementToExclude","querySelector","parentElement","nextSibling","metrics","measureText","insertBefore","measureTextContentWithExclusions","clamp","guideIndexToReorderedIndex","oldIndex","newIndex","reorderedIndexToGuideIndex","reorderArray","from","to","before","within","after","w","isLeftClick","button","cellText","columnWidth","approxCharWidth","approxLineHeight","horizontalPadding","numCharsInCell","approxCharsPerLine","ceil","_header__WEBPACK_IMPORTED_MODULE_8__","ColumnHeader","wrapCells","tableWidth","grid","scrollLeftCorrection","transform","measurableElementRef","convertPointToColumn","clientXOrY","useMidpoint","locator","getCellExtremaClasses","getColumnWidth","getDragCoordinate","clientCoords","getMouseCoordinate","handleResizeEnd","size","onResizeGuide","onColumnWidthChanged","handleResizeDoubleClick","minColumnWidth","maxColumnWidth","getWidestVisibleCellInColumn","clampedWidth","_common_index__WEBPACK_IMPORTED_MODULE_4__","handleSizeChanged","isCellSelected","_regions__WEBPACK_IMPORTED_MODULE_6__","hasFullColumn","renderGhostCell","extremaClasses","flexBasis","_columnHeaderCell__WEBPACK_IMPORTED_MODULE_7__","toRegion","index1","index2","renderHeaderCell","minSize","maxSize","defaultColumnWidth","convertPointToIndex","fullRegionCardinality","getCellIndexClass","getCellSize","getIndexClass","ghostCellRenderer","headerCellIsReorderablePropName","headerCellIsSelectedPropName","headerCellRenderer","resizeOrientation","_interactions_resizeHandle__WEBPACK_IMPORTED_MODULE_5__","VERTICAL","isReorderable","isResizable","_headerCell__WEBPACK_IMPORTED_MODULE_7__","HorizontalCellDivider","ColumnHeaderCell","isActive","handlePopoverDidOpen","handlePopoverWillClose","isHeaderMouseTarget","target","classList","contains","enableColumnReordering","isColumnSelected","menuIcon","name","nameRenderer","reorderHandle","isSelected","renderName","maybeRenderContent","resizeHandle","dropdownMenu","maybeRenderDropdownMenu","defaultName","nameComponent","_common_loadableContent__WEBPACK_IMPORTED_MODULE_6__","menuRenderer","isFunction","popoverDidOpen","popoverWillClose","contextTypes","_common_context__WEBPACK_IMPORTED_MODULE_5__","EditableName","dirtyName","savedName","defaultValue","_regions__WEBPACK_IMPORTED_MODULE_9__","SHALLOW_COMPARE_PROP_KEYS_BLACKLIST","Header","convertEventToIndex","coord","locateClick","activationIndex","locateDragForSelection","coords","returnEndOnly","current","locateDragForReordering","guideIndex","renderCells","renderNewCell","renderCell","isLoading","isEntireCellTargetReorderable","cellProps","maybeRenderReorderHandle","baseChildren","_interactions_selectable__WEBPACK_IMPORTED_MODULE_8__","enableMultipleSelection","disabled","isDragSelectableDisabled","ignoredSelectors","locateDrag","onFocusedCell","onSelection","handleDragSelectableSelection","onSelectionEnd","handleDragSelectableSelectionEnd","selectedRegionTransform","_interactions_resizable__WEBPACK_IMPORTED_MODULE_7__","onLayoutLock","onResizeEnd","onSizeChanged","orientation","isReorderHandleEnabled","wrapInDragReorderable","isDragReorderableDisabled","hasValidSelection","_interactions_dragEvents__WEBPACK_IMPORTED_MODULE_5__","isAdditive","cellIndex","isSelectedRegionsControlledAndNonEmpty","isColumnHeader","_interactions_reorderable__WEBPACK_IMPORTED_MODULE_6__","onReordered","onReordering","HeaderCell","_rowHeaderCell__WEBPACK_IMPORTED_MODULE_7__","RowHeader","tableHeight","scrollTopCorrection","convertPointToRow","getRowHeight","onRowHeightChanged","_regions__WEBPACK_IMPORTED_MODULE_5__","hasFullRow","rowHeaderCellRenderer","minRowHeight","maxRowHeight","defaultRowHeight","_header__WEBPACK_IMPORTED_MODULE_6__","_interactions_resizeHandle__WEBPACK_IMPORTED_MODULE_4__","HORIZONTAL","renderDefaultRowHeader","_headerCell__WEBPACK_IMPORTED_MODULE_5__","RowHeaderCell","enableRowReordering","isRowSelected","_common_loadableContent__WEBPACK_IMPORTED_MODULE_4__","_table__WEBPACK_IMPORTED_MODULE_14__","DragEvents","handleMouseDown","initCoordinateData","handler","isActivated","maybeAlterEventChain","detachDocumentEventListeners","attachDocumentEventListeners","handleMouseMove","isDragging","updateCoordinateData","onDragMove","handleMouseUp","onDragEnd","doubleClickTimeoutToken","setTimeout","DOUBLE_CLICK_TIMEOUT_MSEC","clearTimeout","attach","detach","isValidDragHandler","removeEventListener","activationCoordinates","lastCoordinates","currentCoordinates","deltaCoordinates","offsetCoordinates","activation","last","offset","_dragEvents__WEBPACK_IMPORTED_MODULE_4__","REATTACH_PROPS_KEYS","Draggable","prevProps","propsWhitelist","include","events","react_dom__WEBPACK_IMPORTED_MODULE_3__","componentWillUnmount","_regions__WEBPACK_IMPORTED_MODULE_4__","CopyCellsMenuItem","handleClick","getCellData","onCopy","getUniqueCells","sparse","sparseMapCells","success","_common_clipboard__WEBPACK_IMPORTED_MODULE_3__","menuItemProps","_menuContext__WEBPACK_IMPORTED_MODULE_1__","MenuContext","regions","overlapsRegion","getTarget","getSelectedRegions","getRegions","enumerateUniqueCells","_draggable__WEBPACK_IMPORTED_MODULE_5__","DragReorderable","handleActivate","shouldIgnoreMouseDown","isValid","isRowHeader","selectedRegionIndex","findContainingRegion","selectedRegion","selectedInterval","selectedRegionStartIndex","selectedRegionLength","maybeSelectRegion","regionRange","handleDragMove","reorderedIndex","_common_utils__WEBPACK_IMPORTED_MODULE_3__","handleDragEnd","draggableProps","getDraggableProps","isDisabled","nextSelectedRegions","_resizeHandle__WEBPACK_IMPORTED_MODULE_3__","Resizable","onResizeMove","_offset","offsetSize","unclampedSize","getStyle","renderResizeHandle","minHeight","_common_index__WEBPACK_IMPORTED_MODULE_2__","Orientation","_draggable__WEBPACK_IMPORTED_MODULE_4__","ResizeHandle","stopImmediatePropagation","orientationIndex","handleDoubleClick","targetClasses","handleClasses","_common_classes__WEBPACK_IMPORTED_MODULE_0__","ResizeSensor","lifecycle","debounce","resizeSensor","cssText","RESIZE_SENSOR_STYLE","innerHTML","RESIZE_SENSOR_HTML","lastWidth","lastHeight","expand","childNodes","expandChild","shrink","onScroll","currentWidth","currentHeight","trigger","cancelled","scope","_draggable__WEBPACK_IMPORTED_MODULE_8__","DragSelectable","didExpandSelectionOnActivate","foundIndex","findMatchingRegion","matchesExistingSelection","_dragEvents__WEBPACK_IMPORTED_MODULE_7__","handleClearSelectionAtIndex","handleClearAllSelectionsNotAtIndex","shouldExpandSelection","handleExpandSelection","shouldAddDisjointSelection","handleAddDisjointSelection","handleReplaceSelection","expandSelectedRegions","update","maybeInvokeSelectionCallback","mostRecentRegion","invokeOnFocusCallbackForRegion","finishInteraction","shiftKey","splice","nextSelectedRegion","add","focusRegion","focusedCellCoords","_common_internal_focusedCellUtils__WEBPACK_IMPORTED_MODULE_3__","lastEmittedSelectedRegions","isContextMenuTrigger","_common_internal_platformUtils__WEBPACK_IMPORTED_MODULE_4__","safeInvokeOrValue","some","selector","closest","expandedRegion","expandRegion","GuideLayer","renderVerticalGuide","pt-table-vertical-guide-flush-left","renderHorizontalGuide","pt-table-horizontal-guide-flush-top","arraysEqual","verticalGuides","horizontalGuides","verticals","horizontals","UPDATE_PROPS_KEYS","RegionLayer","renderRegion","_region","regionStyles","regionsEqual","renderRegionChildren","_common_utils__WEBPACK_IMPORTED_MODULE_2__","Locator","tableElement","scrollContainerElement","cellContainerElement","convertCellIndexToClientX","convertCellMidpointToClientX","convertCellIndexToClientY","convertCellMidpointToClientY","toGridX","gridOffsetFromPageLeft","getBoundingClientRect","scrollOffsetFromGridLeft","cursorOffsetFromGridLeft","toGridY","gridOffsetFromPageTop","scrollOffsetFromGridTop","cursorOffsetFromGridTop","setGrid","setNumFrozenRows","setNumFrozenColumns","getViewportRect","_common_rect__WEBPACK_IMPORTED_MODULE_1__","columnCellSelector","getColumnCellSelector","columnHeaderAndBodyCells","querySelectorAll","maxWidth","item","getTallestVisibleCellInColumn","columnBodyCells","maxHeight","cellValue","cellTruncatedFormatText","cellTruncatedText","getTableRect","gridX","lookupFn","gridY","convertPointToCell","QuadrantType","_common_errors__WEBPACK_IMPORTED_MODULE_5__","TableQuadrant","enableRowHeader","quadrantType","bodyRenderer","showFrozenRowsOnly","TOP","TOP_LEFT","showFrozenColumnsOnly","getQuadrantCssClass","maybeMenu","maybeRowHeader","maybeColumnHeader","columnHeaderCellRenderer","bottomContainerStyle","quadrantRef","scrollContainerRef","onWheel","bodyRef","validateProps","MAIN","console","warn","_tableQuadrantStackCache__WEBPACK_IMPORTED_MODULE_7__","SYNC_TRIGGER_PROP_KEYS","TableQuadrantStack","quadrantRefs","_tableQuadrant__WEBPACK_IMPORTED_MODULE_6__","quadrantRefHandlers","generateQuadrantRefHandlers","wasMainQuadrantScrollTriggeredByWheelEvent","renderMainQuadrantMenu","menu","renderTopQuadrantMenu","renderLeftQuadrantMenu","renderTopLeftQuadrantMenu","renderMainQuadrantColumnHeader","refHandler","columnHeader","resizeHandler","handleColumnResizeGuideMain","reorderingHandler","handleColumnsReordering","renderTopQuadrantColumnHeader","handleColumnResizeGuideTop","renderLeftQuadrantColumnHeader","handleColumnResizeGuideLeft","renderTopLeftQuadrantColumnHeader","handleColumnResizeGuideTopLeft","renderMainQuadrantRowHeader","rowHeader","handleRowResizeGuideMain","handleRowsReordering","renderTopQuadrantRowHeader","handleRowResizeGuideTop","renderLeftQuadrantRowHeader","handleRowResizeGuideLeft","renderTopLeftQuadrantRowHeader","handleRowResizeGuideTopLeft","handleMainQuadrantScroll","mainScrollContainer","scrollContainer","nextScrollLeft","nextScrollTop","handleScrollOffsetChange","syncQuadrantViewsDebounced","handleWheel","getNextScrollOffset","deltaX","deltaY","isHorizontalScrollDisabled","isVerticalScrollDisabled","isHorizontal","scrollKey","clientSize","cache","getScrollContainerClientWidth","getScrollContainerClientHeight","updateScrollContainerClientSize","containerSize","getRowHeaderWidth","getColumnHeaderHeight","gridSize","maxScrollOffset","currScrollOffset","getScrollOffset","invokeColumnResizeHandler","adjustedGuides","adjustVerticalGuides","handleColumnResizeGuide","invokeRowResizeHandler","adjustHorizontalGuides","handleRowResizeGuide","viewSyncDelay","syncQuadrantViews","clearInterval","debouncedViewSyncInterval","rowHeaderWidth","measureDesiredRowHeaderWidth","columnHeaderHeight","measureDesiredColumnHeaderHeight","leftQuadrantWidth","getSecondaryQuadrantGridSize","topQuadrantHeight","rightScrollBarWidth","_common_internal_scrollUtils__WEBPACK_IMPORTED_MODULE_4__","bottomScrollBarHeight","adjustedColumnHeaderHeight","maybeIncreaseToDefaultColumnHeaderHeight","adjustedTopQuadrantHeight","setRowHeaderWidth","setColumnHeaderHeight","setScrollContainerClientWidth","setScrollContainerClientHeight","maybesSetQuadrantRowHeaderSizes","maybeSetQuadrantMenuElementSizes","maybeSetQuadrantSizes","maybeSetQuadrantPositionOffset","maybeSetQuadrantScrollOffset","maybesSetQuadrantSize","dimension","quadrant","side","maybeSetQuadrantRowHeaderSize","maybeSetQuadrantMenuElementSize","newOffset","setScrollOffset","dependentQuadrantType","throttledHandleMainQuadrantScroll","throttleReactEventCallback","throttledHandleWheel","scrollToPosition","synchronizeQuadrantViews","emitRefs","throttleScrolling","onMainQuadrantScroll","baseProps","shouldRenderLeftQuadrants","maybeLeftQuadrant","maybeTopLeftQuadrant","reduce","agg","rowHeaderRef","columnHeaderRef","numFrozen","getterFn","mainRowHeader","mainColumnHeader","scrollAmount","verticalGuide","horizontalGuide","TableQuadrantStackCache","cachedRowHeaderWidth","cachedColumnHeaderHeight","cachedScrollLeft","cachedScrollTop","cachedScrollContainerClientWidth","cachedScrollContainerClientHeight","RegionCardinality","_common_utils__WEBPACK_IMPORTED_MODULE_1__","ColumnLoadingOption","RowLoadingOption","TableLoadingOption","SelectionModes","ALL","COLUMNS_AND_CELLS","COLUMNS_ONLY","NONE","ROWS_AND_CELLS","ROWS_ONLY","Regions","row2","col2","normalizeInterval","pop","clampRegion","maxRowIndex","maxColumnIndex","lastRegionIsEqual","lastRegion","regionContains","regions_1","intervalContainsIndex","regions_2","hasFullTable","regions_3","containsRegion","query","allowPartialOverlap","intervalCompareFn","intervalOverlaps","intervalContains","regions_4","eachUniqueFullColumn","iteratee","seen","eachUniqueFullRow","list","regions_5","eachCellInRegion","sort","rowFirstComparator","getCellRegionFromRegion","mapper","bounds","getBoundingRegion","minRow","maxRow","minCol","maxCol","isRegionValidForTable","intervalInRangeInclusive","joinStyledRegionGroups","otherRegions","regionGroups","concat","regionA","regionB","intervalsEqual","oldRegion","oldRegionCardinality","newRegionCardinality","ivalA","ivalB","interval","rowDiff","numericalComparator","coord2","minInclusive","maxInclusive","inRangeInclusive","_tableBody__WEBPACK_IMPORTED_MODULE_27__","Table","cellContainer","columnHeaderElement","mainQuadrant","mainQuadrantElement","quadrantStack","quadrantStackInstance","rootTable","rootTableElement","rowHeaderElement","didUpdateColumnOrRowSizes","didCompletelyMount","handleSelectionResizeUp","handleSelectionResize","_common_direction__WEBPACK_IMPORTED_MODULE_8__","handleSelectionResizeDown","handleSelectionResizeLeft","handleSelectionResizeRight","_common_internal_focusedCellUtils__WEBPACK_IMPORTED_MODULE_11__","_common_internal_selectionUtils__WEBPACK_IMPORTED_MODULE_13__","updateSelectedRegionAtIndex","handleCopy","getCellClipboardData","_regions__WEBPACK_IMPORTED_MODULE_26__","_common_clipboard__WEBPACK_IMPORTED_MODULE_6__","renderMenu","_common_classes__WEBPACK_IMPORTED_MODULE_5__","isSelectionModeEnabled","onMouseDown","handleMenuMouseDown","maybeRenderRegions","styleMenuRegion","selectAll","shouldUpdateFocusedCell","getEnabledSelectionHandler","selectionHandler","newFocusedCellCoordinates","handleFocus","handleSelectAllHotkey","getColumnProps","loadingOptions","id","columnLoading","hasLoadingOption","HEADER","columnHeaderCell","columnHeaderCellLoading","columnHeaderCellProps","_headers_columnHeaderCell__WEBPACK_IMPORTED_MODULE_18__","_common_utils__WEBPACK_IMPORTED_MODULE_16__","renderColumnHeader","viewportRect","enableGhostCells","enableColumnResizing","columnIndices","getMaxFrozenColumnIndex","_headers_columnHeader__WEBPACK_IMPORTED_MODULE_17__","COLUMN_HEADERS","handleColumnWidthChanged","handleLayoutLock","handleColumnsReordered","styleColumnHeaderRegion","renderRowHeader","enableRowResizing","rowIndices","getMaxFrozenRowIndex","_headers_rowHeader__WEBPACK_IMPORTED_MODULE_19__","ROW_HEADERS","handleRowsReordered","handleRowHeightChanged","styleRowHeaderRegion","bodyCellRenderer","restColumnProps","renderBody","numFrozenColumnsClamped","numFrozenRowsClamped","bodyContextMenuRenderer","onCompleteRender","_quadrants_tableQuadrant__WEBPACK_IMPORTED_MODULE_24__","handleCompleteRender","renderMode","getNormalizedRenderMode","styleBodyRegion","handleFocusMoveLeft","handleFocusMove","handleFocusMoveLeftInternal","handleFocusMoveInternal","handleFocusMoveRight","handleFocusMoveRightInternal","handleFocusMoveUp","handleFocusMoveUpInternal","handleFocusMoveDown","handleFocusMoveDownInternal","canHideRightBorder","fixedHeight","fixedWidth","borderBottom","borderRight","borderLeft","borderTop","invalidateGrid","handleRootScroll","handleBodyScroll","isLayoutLocked","updateViewportRect","clearSelection","_selectedRegions","handleSelection","newFocusedCell","newSelectionRegions","scrollBodyToFocusedCell","focusCellRegion","moveFocusCell","viewportBounds","focusedCellBounds","focusedCellHeight","isFocusedCellWiderThanViewport","isFocusedCellTallerThanViewport","syncViewportPosition","isReordering","onColumnsReordered","onRowsReordered","loadingOption","nextViewportRect","invokeOnVisibleCellsChangeCallback","childrenArray","toArray","columnIdToIndex","Table_1","createColumnIdIndex","newColumnWidths","newRowHeights","clampNumFrozenColumns","clampNumFrozenRows","resizeRowsByApproximateHeight","getCellText","options","numColumns","maxCellHeightInRow","resolveResizeRowsByApproximateHeightOptions","getApproximateCharWidth","getApproximateLineHeight","getCellHorizontalPadding","getNumBufferLines","approxCellHeight","resizeRowsByTallestCell","tallest","viewportColumnIndices","tallestByColumns","isArray","fill","scrollToRegion","_common_internal_scrollUtils__WEBPACK_IMPORTED_MODULE_12__","correctedScrollLeft","shouldDisableHorizontalScroll","correctedScrollTop","shouldDisableVerticalScroll","getChildContext","propKeysBlacklist","stateKeysBlacklist","SHALLOW_COMPARE_STATE_KEYS_BLACKLIST","selectionModes","newChildArray","previousColumnWidths","mappedIndex","newSelectedRegions","filter","regionCardinality","validateGrid","_quadrants_tableQuadrantStack__WEBPACK_IMPORTED_MODULE_25__","_layers_guides__WEBPACK_IMPORTED_MODULE_21__","hotkeys","maybeRenderCopyHotkey","maybeRenderSelectAllHotkey","maybeRenderFocusHotkeys","maybeRenderSelectionResizeHotkeys","_locator__WEBPACK_IMPORTED_MODULE_23__","updateLocator","resizeSensorDetach","_interactions_resizeSensor__WEBPACK_IMPORTED_MODULE_20__","maybeScrollTableIntoView","_common_errors__WEBPACK_IMPORTED_MODULE_9__","_column__WEBPACK_IMPORTED_MODULE_4__","isSomeSelectionModeEnabled","allowInInput","clampedNextRegion","primaryAxis","secondaryAxis","isUpOrLeft","primaryAxisPlural","secondaryAxisPlural","movementDirection","regionIntervalIndex","newFocusCellSelectionIndex","newFocusCellRegion","isViewportUnscrolledVertically","areRowHeadersLoading","isViewportUnscrolledHorizontally","areGhostColumnsVisible","areColumnHeadersLoading","tableBottom","tableRight","isGuidesShowing","selectionMode","_common_grid__WEBPACK_IMPORTED_MODULE_10__","styledRegionGroups","regionGroup","_layers_regions__WEBPACK_IMPORTED_MODULE_22__","didScrollTopChange","didScrollLeftChange","topCorrection","leftCorrection","_common_rect__WEBPACK_IMPORTED_MODULE_14__","onVisibleCellsChange","_common_renderMode__WEBPACK_IMPORTED_MODULE_15__","BATCH","BATCH_ON_UPDATE","resizeRowsByApproximateHeightDefaults","childContextTypes","_common_context__WEBPACK_IMPORTED_MODULE_7__","clampPotentiallyNullValue","_tableBodyCells__WEBPACK_IMPORTED_MODULE_10__","DEEP_COMPARE_KEYS","TableBody","targetRegion","nativeEvent","contextMenu","_interactions_menus__WEBPACK_IMPORTED_MODULE_7__","handleSelectionEnd","activationCell","cellClassNames","defaultStyle","_common_contextMenuTargetWrapper__WEBPACK_IMPORTED_MODULE_5__","_common_renderMode__WEBPACK_IMPORTED_MODULE_6__","_common_renderMode__WEBPACK_IMPORTED_MODULE_8__","SHALLOW_COMPARE_BLACKLIST","BATCHER_RESET_PROP_KEYS_BLACKLIST","TableBodyCells","batcher","_common_batcher__WEBPACK_IMPORTED_MODULE_5__","isGhost","baseCell","_cell_cell__WEBPACK_IMPORTED_MODULE_4__","_common_classes__WEBPACK_IMPORTED_MODULE_6__","cellReactKey","cellLoading","_common_rect__WEBPACK_IMPORTED_MODULE_7__","didViewportRectChange","currViewportRect","maybeInvokeOnCompleteRender","componentWillUpdate","resetKeysBlacklist","renderBatchedCells","renderAllCells","forceUpdate","cellsArgs","_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__","RegExp","bind","r","fn","arg","_contextTypes","channel","prop_types__WEBPACK_IMPORTED_MODULE_0___default","object","testPickPropsOnStringTag","_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_1__","testPickPropsOnComponent","testAlwaysTrue","pickAssign","testFn","_key","emotion","view","_createStyled","tag","staticClassName","identifierName","stableClassName","shouldForwardProp","__emotion_forwardProp","propName","isReal","__emotion_real","baseTag","__emotion_base","charAt","toLowerCase","styles","__emotion_styles","raw","len","Styled","_view$Component","subClass","superClass","create","constructor","__proto__","_inheritsLoose","_proto","componentWillMount","unsubscribe","subscribe","theme","mergedProps","classInterpolations","getRegisteredStyles","css","innerRef","Component","displayName","defineProperty","enumerable","withComponent","nextTag","nextOptions","create_emotion_styled__WEBPACK_IMPORTED_MODULE_2__","emotion__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0___default"],"mappings":";;;;mtBAAAA,EAAAC,kCAAA,6EAYAC,EAAA,WAA4C,OAAAC,EAAA,cAAAC,EAAA,OAC5CA,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAoDA,OAtDAE,EAAA,UAAAL,EAAAC,GAIAD,EAAAM,UAAAC,sBAAA,SAAAC,GAEA,OAAAC,EAAA,MAAAC,mBAAAP,KAAAQ,MAAAH,GAAsEI,SAAA,aACtEH,EAAA,MAAAI,gBAAAV,KAAAQ,MAAAG,MAAAN,EAAAM,QAEAd,EAAAM,UAAAS,OAAA,WACA,IAsCAC,EAAAC,EAtCAC,EAAAf,KAAAQ,MAAAQ,EAAAD,EAAAC,QAAAC,EAAAF,EAAAE,SAAAC,EAAAH,EAAAG,UAAAC,EAAAJ,EAAAI,QAAAC,EAAAL,EAAAK,WAAAT,EAAAI,EAAAJ,MAAAU,EAAAN,EAAAM,OAAAC,EAAAP,EAAAO,YAAAC,EAAAR,EAAAQ,QAAAC,EAAAT,EAAAS,QAAAC,EAAAV,EAAAU,UAAAC,EAAAX,EAAAW,UAAAC,EAAAZ,EAAAY,SACAC,EAAAC,IAAAC,EAAA,WAAAxB,EAAA,QAAAyB,YAAAV,KAAAR,MACAiB,EAAA,wBAAAR,EACAT,EAAAP,EAAA,QAAA0B,SAAAT,EACAV,EAAAiB,EAAA,sBAAAL,EACAZ,GAAAa,GACAO,EAAAJ,MAAAf,MACAgB,EAAA,sBAAAL,EACAX,EAAAgB,EAAA,qBAAAH,EACAb,IAGAoB,EAAAtC,EAAA,SAAAuC,IAAAnC,KAAAQ,MAAA4B,SAAA,SAAAC,GACA,SAAA1B,GAAAf,EAAA,eAAAyC,GAAA,CACA,IAAAC,EAAAD,EAAAE,KAEA,oBAAAF,GAAA,iBAAAC,EACA,OAAAD,EAQA,GALAC,EAAAnC,YAAAV,EAAA,gBAAAU,WACAV,EAAA,gBAAAU,UAAAqC,cAAAF,IACAA,EAAAnC,YAAAsC,EAAA,WAAAtC,WACAsC,EAAA,WAAAtC,UAAAqC,cAAAF,GAGA,OAAA1C,EAAA,aAAAyC,GACAK,iBAAAC,SAAAhC,EAAAiC,OAAA,IACAC,gBAAAF,SAAAhC,EAAAmC,MAAA,MAKA,OAAAT,IAEAU,EAAAnD,EAAA,qBAAkD8B,UAAAO,GAAyBC,GAC3E,OAAAtC,EAAA,oBAAAM,EAAA,UAA6DwB,UAAAE,EAAAoB,MAAAxB,EAAAyB,IAAAjC,IAAsDL,QAAAM,WAAAC,YAAAC,UAAAC,eACnHxB,EAAA,cAAAsD,EAAA,iBAAkD3B,UAAA4B,gBAAA,GAAyCJ,KAG3FlD,EAAAuD,cACA3B,WAAA,EACAE,UAAA,GAEA9B,EAvDA,CAwDCD,EAAA;;;;yjBCrEDyD,EAAA3D,eAAA,0DAWA4D,EAAA,SAAAxD,GAEA,SAAAwD,EAAA9C,EAAA+C,GACA,IAAAC,EAAA1D,EAAA2D,KAAAzD,KAAAQ,EAAA+C,IAAAvD,KAuCA,OAtCAwD,EAAAE,aACAC,KAAA,SAAAV,GACAO,EAAAxC,QAAAiC,IAGAO,EAAAI,eAAA,YACAJ,EAAAK,MAAAC,WAAAN,EAAAhD,MAAAuD,WAIAP,EAAAQ,UAA4BF,WAAA,EAAAG,WAAA,GAAAC,WAAAV,EAAAK,MAAAK,cAE5BV,EAAAW,WAAA,WACAX,EAAAQ,UAA4BF,WAAA,EAAAG,WAAAT,EAAAK,MAAAK,cAE5BV,EAAAY,aAAA,SAAAC,GAEAb,EAAAQ,UAA4BF,WAAA,EAAAG,gBAAAK,IAC5Bd,EAAAe,eAAAf,EAAAhD,MAAAgE,SAAAH,IAEAb,EAAAiB,aAAA,SAAAJ,GACAb,EAAAQ,UAA4BC,WAAAI,IAC5Bb,EAAAe,eAAAf,EAAAhD,MAAAkE,SAAAL,IAEAb,EAAAmB,cAAA,SAAAN,GACAb,EAAAQ,UAA4BF,WAAA,EAAAI,WAAAG,EAAAJ,gBAAAK,IAC5Bd,EAAAe,eAAAf,EAAAhD,MAAAoE,UAAAP,IAEAb,EAAAqB,mBAAA,SAAAC,GACA,UAEAtB,EAAAuB,sBAAA,SAAAD,GACAtB,EAAAW,cAEAX,EAAAK,OACAC,WAAA,EACAI,WAAA1D,EAAA6D,OAEAb,EA4DA,OArGAtD,EAAA,UAAAoD,EAAAxD,GA2CAwD,EAAAnD,UAAA6E,kBAAA,WACAhF,KAAAiF,oBAEA3B,EAAAnD,UAAA+E,mBAAA,WACAlF,KAAAiF,oBAEA3B,EAAAnD,UAAAC,sBAAA,SAAAC,EAAA8E,GACA,OAAAC,EAAA,MAAA7E,mBAAAP,KAAAQ,MAAAH,GAAsEI,SAAA,aACtE2E,EAAA,MAAA7E,mBAAAP,KAAA6D,MAAAsB,KACAC,EAAA,MAAA1E,gBAAAV,KAAAQ,MAAAH,GAAA,WAEAiD,EAAAnD,UAAAkF,0BAAA,SAAAhF,GACA,IAAAgE,EAAAhE,EAAAgE,MACA,MAAAA,GACArE,KAAAgE,UAA2BE,WAAAG,EAAAJ,WAAAI,KAG3Bf,EAAAnD,UAAAS,OAAA,WACA,IAgBAE,EAhBAC,EAAAf,KAAAQ,MAAAiB,GAAAV,EAAAyD,SAAAzD,EAAA2D,SAAA3D,EAAA6D,UAAA7D,EAAAU,WAAAE,EAAAZ,EAAAY,SAAA2D,EAAApF,EAAA,OAAAa,GAAA,2DACAF,EAAAb,KAAA6D,MAAAC,EAAAjD,EAAAiD,UAAAG,EAAApD,EAAAoD,WAAAC,EAAArD,EAAAqD,WACA5C,EAAAgE,EAAAhE,aAAAwC,EACAyB,EAAA,KACA,GAAAzB,EACAyB,EAAA3F,EAAA,cAAAwF,EAAA,cAA+DtB,WAAA,EAAApC,UAAAG,IAAA2D,EAAA,oBAAAA,EAAA,qBAAAnE,OAAAiE,EAAAjE,OAAAoE,SAAA,KAAAjB,SAAAxE,KAAAoE,aAAAM,SAAA1E,KAAAyE,aAAAG,UAAA5E,KAAA2E,cAAAe,OAAA1F,KAAAmE,WAAAwB,YAAA,GAAAC,kBAAA,EAAAvB,MAAAJ,QAE/D,CACA,IAAAhC,EAAAJ,IAAA2D,EAAA,sBAAA1E,MACA0E,EAAA,sBAAA/D,EACAX,EAAA0E,EAAA,qBAAA7D,EACAb,IACAyE,EAAA3F,EAAA,qBAAuD8B,UAAAO,GAAyBiC,GAEhF,OAAAtE,EAAA,cAAAyD,EAAA,KAAAnD,EAAA,YAA6DoF,GAAoB7D,WAAA,EAAAH,cAAAN,QAAAhB,KAAA0D,YAAAC,KAAAvC,WAAApB,KAAA4D,iBACjFhE,EAAA,cAAAiG,EAAA,WAA4CC,WAAA9F,KAAA6E,mBAAAkB,cAAA/F,KAAA+E,sBAAAiB,gBAAA,EAAAC,gBAAA3E,GAAsIiE,KAGlLjC,EAAAnD,UAAA+F,cAAA,WACA,OAAAtG,EAAA,cAAAwF,EAAA,aACAxF,EAAA,cAAAwF,EAAA,QAAyCe,IAAA,YAAAC,MAAA,kCAAAC,MAAA,QAAAC,MAAA,KAAApF,UAAAlB,KAAAmE,eAEzCb,EAAAnD,UAAA8E,iBAAA,WACAjF,KAAAQ,MAAAuD,YAAA/D,KAAA6D,MAAAC,WAEA9D,KAAAgB,QAAAuF,SAGAjD,EAAAnD,UAAAoE,eAAA,SAAAiC,EAAAnC,GAEA,IAAAtD,EAAAf,KAAAQ,MAAAiG,EAAA1F,EAAA0F,SAAAC,EAAA3F,EAAA2F,YACAtB,EAAA,MAAAuB,WAAAH,EAAAnC,EAAAoC,EAAAC,IAEApD,EAAAF,cACA3B,WAAA,EACAE,UAAA,GAEA2B,EAAApD,EAAA,YACAkF,EAAA,eACA9B,GArGA,CAuGC1D,EAAA;;;;4XClHDgH,EAAAlH,0BAAA,6EAUAmH,EAAA,SAAA/G,GAEA,SAAA+G,IACA,cAAA/G,KAAAC,MAAAC,KAAAC,YAAAD,KA2BA,OA7BAE,EAAA,UAAA2G,EAAA/G,GAIA+G,EAAA1G,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAA4B,EAAArB,EAAAqB,SAAA0E,EAAA/F,EAAA+F,oBAAAC,EAAAhG,EAAAgG,UACAC,EAAAhH,KAAAQ,MAAAwG,YAEAC,EAAA,MAAA7E,EACA6E,IACAD,EAAAJ,EAAA,qBAAAM,OAEA,IAWArG,EAXAa,EAAAG,IAAA7B,KAAAQ,MAAAkB,YAAAb,MACAiB,EAAA,YAAAmF,EACApG,IACAsG,EAAA,GAOA,OALAA,EADAL,GAAA,iBAAA1E,EACAA,EAGA2E,EAAA3E,GAEAxC,EAAA,cAAAgH,EAAA,gBAAA1G,EAAA,YAAwEF,KAAAQ,OAAekB,YAAAsF,gBAAiDG,IAGxIN,EAAAzD,cACA0D,qBAAA,EACAC,UAAA,SAAAK,GAAmC,OAAAC,KAAAN,UAAAK,EAAA,UAEnCP,EA9BA,CA+BCjH,EAAA;;;;uMCxBD0H,qbAjBAC,EAAA7H,sBAAA,yDAkBA,SAAA4H,GACAA,EAAA,gBACAA,EAAA,cACAA,EAAA,gCACAA,EAAA,8CAJA,CAKCA,WACD,IAAAE,EAAA,SAAA1H,GAEA,SAAA0H,IACA,IAAAhE,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAYA,OAXAwD,EAAAK,OACA4D,eAAA,EACAC,aAAA,GAEAlE,EAAAmE,oBAAA,SAAA1E,GAAoD,OAAAO,EAAAoE,WAAA3E,GACpDO,EAAAqE,kBAAA,WACArE,EAAAQ,UAA4ByD,eAAA,KAE5BjE,EAAAsE,mBAAA,WACAtE,EAAAQ,UAA4ByD,eAAA,KAE5BjE,EA6GA,OA3HAtD,EAAA,UAAAsH,EAAA1H,GAgBA0H,EAAArH,UAAA6E,kBAAA,WACAhF,KAAA+H,sBAEAP,EAAArH,UAAA+E,mBAAA,WACAlF,KAAA+H,sBAEAP,EAAArH,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAA4B,EAAArB,EAAAqB,SAAA4F,EAAAjH,EAAAiH,iBAAAC,EAAAlH,EAAAkH,eAAAC,EAAAnH,EAAAmH,iBACAnF,EAAA,GAAAX,EACA+F,EAAApF,EAIA,IAHAiF,GAAAC,EAAA,GAAAE,EAAAC,OAAAH,IACAE,IAAAE,UAAA,EAAAJ,GAAAC,GAEAlI,KAAAsI,kBAAAvF,GAAA,CACA,IAAArB,EAAA6G,IAAAvI,KAAAQ,MAAAkB,UAAA8D,EAAA,wBACA,OAAAgD,EAAA,qBAAgD9G,aAChD8G,EAAA,qBAA4C9G,UAAA8D,EAAA,sBAAAvC,IAAAjD,KAAA2H,qBAA0EQ,GACtHnI,KAAAyI,iBAGA/G,EAAA6G,IAAAvI,KAAAQ,MAAAkB,UAAA8D,EAAA,6BACA,OAAAgD,EAAA,qBAAgD9G,YAAAuB,IAAAjD,KAAA2H,qBAAsDQ,IAGtGX,EAAArH,UAAAsI,cAAA,WACA,IAAA1H,EAAAf,KAAAQ,MAAA4B,EAAArB,EAAAqB,SAAAsG,EAAA3H,EAAA2H,aAKA,GAAA1I,KAAA6D,MAAA4D,cAAA,CACA,IAAAkB,EAAAJ,IAAA/C,EAAA,wBAAAkD,EAAAlD,EAAA,6BAAAA,EAAA,iCACAoD,EAAAJ,EAAA,qBAA6D9G,UAAAiH,GAA4BvG,GACzF,OAAAoG,EAAA,cAAAK,EAAA,SAAkDnH,UAAA8D,EAAA,+BAAAsD,WAAgEC,iBAAmBC,kBAAA,WAAgCjG,QAAA6F,EAAAK,SAAAJ,EAAA,SAAAK,OAAAC,QAAA,EAAAC,QAAApJ,KAAA8H,oBACrKU,EAAA,cAAAK,EAAA,MAA2CQ,KAAA,UAK3C,OAAAb,EAAA,sBAAiD9G,UAAA8D,EAAA,+BAAA8D,QAAAtJ,KAAA6H,mBACjDW,EAAA,cAAAK,EAAA,MAA2CQ,KAAA,WAG3C7B,EAAArH,UAAAmI,kBAAA,SAAAvF,GACA,IAAAhC,EAAAf,KAAAQ,MAAAwH,EAAAjH,EAAAiH,iBAAAuB,EAAAxI,EAAAwI,uBAAAvC,EAAAjG,EAAAiG,YAAAiB,EAAAlH,EAAAkH,eACA,OAAAjB,GACA,KAAAM,EAAAkC,OACA,SACA,KAAAlC,EAAAJ,MACA,SACA,KAAAI,EAAAmC,eACA,OAAAzB,EACAhI,KAAA6D,MAAA6D,YACAO,EAAA,GAAAlF,EAAAqF,OAAAH,EACA,KAAAX,EAAAoC,sBACA,IAAA1B,EACA,OAAAC,EAAA,GAAAlF,EAAAqF,OAAAH,EAEA,SAAAjI,KAAAQ,MAAAkC,kBAAA,MAAA1C,KAAAQ,MAAAqC,gBACA,SAEA,IAAA8G,EAAAJ,EAAAI,qBAAAC,EAAAL,EAAAK,sBAAAC,EAAAN,EAAAM,sBAAAC,EAAAP,EAAAO,eACAC,EAAA/J,KAAAQ,MAAAqC,gBAGA,OAFAmH,EAAA,MAAAC,oBAAAlH,EAAAgH,EAAAJ,EAAAC,EAAAC,EAAAC,GACA9J,KAAAQ,MAAAkC,iBAEA,QACA,WAGA8E,EAAArH,UAAA4H,mBAAA,WACA,GAAA/H,KAAAQ,MAAAwH,kBAAAhI,KAAAQ,MAAAwG,cAAAM,EAAAmC,eAGA,QAAAnF,IAAAtE,KAAA4H,WAAA,CAIA,IAAAF,EAAA1H,KAAA6D,MAAA6D,YAEA3G,EAAAf,KAAA4H,WAAAsC,EAAAnJ,EAAAoJ,aAAAC,EAAArJ,EAAAsJ,YAAAC,EAAAvJ,EAAAwJ,aAAAC,EAAAzJ,EAAA0J,YAIAC,EAAAhD,EAAA8C,EA7GA,GA6GAA,EAKAG,EAAAjD,GAAAgD,IAAAN,GACAM,EAAAN,GACAE,EAAAJ,EACAlK,KAAAgE,UAAuB0D,YAAAiD,SAjBvB3K,KAAAgE,UAA2B0D,aAAA,KAmB3BF,EAAApE,cACA4E,kBAAA,EACAuB,wBACAI,qBAAA,EACAC,sBAAA,GACAC,sBAAA,EAAAtC,EAAA,QAAAqD,wBACAd,eAAA,GAEApB,cAAA,EACA1B,YAAAM,EAAAmC,eACAxB,eAAA,IACAC,iBAAA,OAEAV,EA5HA,CA6HCgB,EAAA;;;;kNCrJDqC,EAAAnL,oBAAA,0DAQAoL,EAAA,SAAAhL,GAEA,SAAAgL,IACA,cAAAhL,KAAAC,MAAAC,KAAAC,YAAAD,KAKA,OAPAE,EAAA,UAAA4K,EAAAhL,GAIAgL,EAAA1H,cACA2H,aAAAF,EAAA,mBAEAC,EARA,CASCE,EAAA;;;;+LCjBDC,EAAAvL,8BAAA,2EAuCAwL,EAAA,WACA,SAAAA,IACA,IAAA1H,EAAAxD,KACAA,KAAAmL,kBACAnL,KAAAoL,cACApL,KAAAqL,aACArL,KAAAsL,MAAA,EACAtL,KAAAuL,mBAAA,WACA,IAAA/E,EAAAhD,EAAAgD,gBACAhD,EAAAgD,SACAgF,EAAA,MAAA7E,WAAAH,IAEAxG,KAAAyL,oBAAA,SAAAtF,GACA,OAAA3C,EAAA2H,eAAAhF,IAqKA,OA9JA+E,EAAA/K,UAAAuL,MAAA,WACA1L,KAAAqL,aACArL,KAAAoL,WAAApL,KAAAmL,eACAnL,KAAAmL,mBAKAD,EAAA/K,UAAAwL,cAAA,WACA3L,KAAAqL,cAOAH,EAAA/K,UAAAyL,eAAA,WAEA,IADA,IAAAC,KACAC,EAAA,EAAwBA,EAAA7L,UAAAmI,OAAuB0D,IAC/CD,EAAAC,GAAA7L,UAAA6L,GAEA9L,KAAAqL,UAAArL,KAAA+L,OAAAF,OAiBAX,EAAA/K,UAAA6L,gBAAA,SAAAxF,EAAAyF,EAAAC,EAAAC,GACA,IAAA3I,EAAAxD,UACA,IAAAiM,IAAqCA,EAAAf,EAAAkB,wBACrC,IAAAF,IAAwCA,EAAAhB,EAAAmB,2BACxC,IAAAF,IAAqCA,EAAAjB,EAAAoB,sBAErCtM,KAAAuM,kBAAAvM,KAAAmL,eAAAnL,KAAAqL,UAAAa,GACAM,QAAA,SAAArG,GAA6C,cAAA3C,EAAA2H,eAAAhF,KAE7CnG,KAAAuM,kBAAAvM,KAAAoL,WAAApL,KAAAqL,WAAA,GACAmB,QAAA,SAAArG,GAAgD,cAAA3C,EAAA4H,WAAAjF,KAEhDsG,OAAAC,KAAA1M,KAAAoL,YACAoB,QAAA,SAAArG,GACA,MAAA3C,EAAA2H,eAAAhF,KACA3C,EAAA2H,eAAAhF,GAAA3C,EAAA4H,WAAAjF,MAIAnG,KAAA2M,oBAAA3M,KAAAoL,WAAApL,KAAAmL,eAAAgB,GACAK,QAAA,SAAArG,UACA3C,EAAA4H,WAAAjF,GACA3C,EAAA2H,eAAAhF,GAAAK,EAAAzG,WAAAuE,EAAAd,EAAA6H,UAAAlF,MAGAnG,KAAAuM,kBAAAvM,KAAAqL,UAAArL,KAAAmL,eAAAc,GACAO,QAAA,SAAArG,GAA0C,OAAA3C,EAAA2H,eAAAhF,GAAAK,EAAAzG,WAAAuE,EAAAd,EAAA6H,UAAAlF,MAG1CnG,KAAAsL,KACAtL,KAAA4M,eAAA5M,KAAAqL,UAAArL,KAAAmL,iBAAA,IAAAsB,OAAAC,KAAA1M,KAAAoL,YAAAhD,QAKA8C,EAAA/K,UAAA0M,OAAA,WACA,OAAA7M,KAAAsL,MAKAJ,EAAA/K,UAAA2M,QAAA,WACA,OAAAL,OAAAC,KAAA1M,KAAAmL,gBAAAhJ,IAAAnC,KAAAyL,sBAMAP,EAAA/K,UAAA4M,aAAA,SAAAvG,GACAxG,KAAAwG,WACAxG,KAAAwG,WACAiG,OAAAxB,EAAA,oBAAAwB,CAAAzM,KAAAuL,sBAGAL,EAAA/K,UAAA6M,0BAAA,kBACAhN,KAAAwG,UAMA0E,EAAA/K,UAAA8M,QAAA,SAAAC,EAAAC,GACA,IAAA3J,EAAAxD,KACAA,KAAA0L,QACAwB,EAAAV,QAAA,SAAAX,EAAAuB,GACA5J,EAAAoI,eAAA7L,MAAAyD,EAAAqI,GACArI,EAAA2H,eAAA3H,EAAAuI,OAAAF,IAAAsB,EAAAC,KAEApN,KAAAsL,MAAA,GAEAJ,EAAA/K,UAAA4L,OAAA,SAAAF,GACA,OAAAA,EAAAwB,KAAAnC,EAAAoC,gBAEApC,EAAA/K,UAAAoM,kBAAA,SAAAgB,EAAAC,EAAAC,GACA,OAAAzN,KAAA0N,iBAAAH,EAAAC,EAAA,aAAAC,IAEAvC,EAAA/K,UAAAwM,oBAAA,SAAAY,EAAAC,EAAAC,GACA,OAAAzN,KAAA0N,iBAAAH,EAAAC,EAAA,YAAAC,IAWAvC,EAAA/K,UAAAuN,iBAAA,SAAAH,EAAAC,EAAAG,EAAAF,GAGA,IAFA,IAAAG,KACAC,EAAApB,OAAAC,KAAAa,GACAH,EAAA,EAAuBA,EAAAS,EAAAzF,SAAAqF,EAAA,GAAAG,EAAAxF,OAAAqF,GAA0DL,IAAA,CACjF,IAAAjH,EAAA0H,EAAAT,IACA,eAAAO,GAAAJ,EAAApH,KAAAqH,EAAArH,IAAA,cAAAwH,GAAAJ,EAAApH,IAAAqH,EAAArH,KACAyH,EAAAE,KAAA3H,GAGA,OAAAyH,GAKA1C,EAAA/K,UAAAyM,eAAA,SAAAW,EAAAC,GACA,IAAAK,EAAApB,OAAAC,KAAAa,GACAQ,EAAAtB,OAAAC,KAAAc,GACA,GAAAK,EAAAzF,SAAA2F,EAAA3F,OACA,SAEA,QAAA0D,EAAA,EAAAkC,EAAAH,EAAyC/B,EAAAkC,EAAA5F,OAAqB0D,IAAA,CAE9D,QAAAxH,IAAAkJ,EADAQ,EAAAlC,IAEA,SAGA,UAEAZ,EAAAkB,kBAAA,GACAlB,EAAAoB,qBAAA,GACApB,EAAAmB,qBAAA,GACAnB,EAAAoC,cAAA,IACApC,EAlLA;;;;m9MCvCAxL,EAAAuO,EAAAC,EAAA,sCAAAC,KAKA,IAAAC,EAAA,gBACAC,EAAA,8BACAC,EAAA,+BACAC,EAAA,4BACAC,EAAA,gBACAC,EAAA,uBACAC,EAAA,sBACAC,EAAA,4BACAC,EAAA,4BACAC,EAAA,2BACAC,EAAA,4BACAC,EAAA,0BACAC,EAAA,8BACAC,EAAA,uBACAC,EAAA,4BACAC,EAAA,qBACAC,EAAA,oBACAC,EAAA,yBACAC,EAAA,yBACAC,EAAA,wBACAC,EAAA,+BACAC,EAAA,8BACAC,EAAA,kBACAC,EAAA,yBACAC,EAAA,0BACAC,EAAA,8BACAC,EAAA,2BACAC,EAAA,mCACAC,EAAA,4BACAC,EAAA,2BACAC,EAAA,0BACAC,EAAA,uBACAC,EAAA,gBACAC,EAAA,gCACAC,EAAA,qBACAC,EAAA,mBACAC,EAAA,8BACAC,EAAA,wBACAC,EAAA,gBACAC,EAAA,mBACAC,EAAA,yBACAC,EAAA,qCACAC,EAAA,qCACAC,EAAA,kCACAC,EAAA,oBACAC,EAAA,mCACAC,EAAA,yBACAC,EAAA,yBACAC,EAAA,qCACAC,EAAA,0BACAC,EAAA,wBACAC,GAAA,6BACAC,GAAA,kBACAC,GAAA,0BACAC,GAAA,iCACAC,GAAA,sBACAC,GAAA,yBACAC,GAAA,yBACAC,GAAA,gCACAC,GAAA,6BACAC,GAAA,yBACAC,GAAA,gCACAC,GAAA,gCACAC,GAAA,2BACAC,GAAA,0BACAC,GAAA,uBACAC,GAAA,uCACAC,GAAA,oBACAC,GAAA,yBACAC,GAAA,6BACAC,GAAA,4BACAC,GAAA,mBACAC,GAAA,6BACAC,GAAA,wCACAC,GAAA,wBACAC,GAAA,iBACAC,GAAA,yBACAC,GAAA,0BACAC,GAAA,4BACAC,GAAA,iCACAC,GAAA,6BACAC,GAAA,oCACAC,GAAA,0BACAC,GAAA,2BACAC,GAAA,0BAEA,SAAAC,GAAAC,EAAAC,GACA,SAAAA,EAGA,uBAAAA,EACA,GAAAD,EAAAC,EAEA,IAAAA,EAAAC,QAAAF,GAAAC,EAAA,GAAAD,EAAAC,EAGA,SAAAE,GAAAnN,GACA,OAAA+M,GAAA,gBAAA/M,GAGA,SAAAoN,GAAArN,GACA,OAAAgN,GAAA,gBAAAhN,GAGA,SAAAsN,GAAArN,GACA,OAAA+M,GAAA,qBAAA/M,GAGA,SAAAyH,GAAA1H,GACA,OAAAgN,GAAA,qBAAAhN;;;;sEClHA/G,EAAAuO,EAAAC,EAAA,8BAAA8F,IAMA,IAAAA,GAKAC,sBAAA,SAAAC,GAOA,OANAA,EAAAvT,MAAAwT,SAAA,SACAD,EAAAvT,MAAAiC,OAAA,MACAsR,EAAAvT,MAAAyT,YAAA,6BACAF,EAAAvT,MAAAyT,YAAA,0BACAF,EAAAvT,MAAAyT,YAAA,yBACAF,EAAAvT,MAAAyT,YAAA,qBACAF,GAWAG,UAAA,SAAAC,GACA,IAAAC,EAAAC,SAAAC,cAAA,SACAT,EAAAC,sBAAAM,GACA,QAAAzI,EAAA,EAAA4I,EAAAJ,EAAyCxI,EAAA4I,EAAAtM,OAAqB0D,IAG9D,IAFA,IAAA6I,EAAAD,EAAA5I,GACA8I,EAAAL,EAAAM,YAAAL,SAAAC,cAAA,OACA1T,EAAA,EAAA+T,EAAAH,EAAyC5T,EAAA+T,EAAA1M,OAAmBrH,IAAA,CAC5D,IAAA4C,EAAAmR,EAAA/T,GACA6T,EAAAC,YAAAL,SAAAC,cAAA,OACAM,YAAApR,EAGA,IAAAqR,EAAAV,EAAAnS,IAAA,SAAAwS,GAA4C,OAAAA,EAAAtH,KAAA,QAAyBA,KAAA,MACrE,OAAA2G,EAAAiB,YAAAV,EAAAS,IAQAE,WAAA,SAAA7Q,GACA,IAAA8Q,EAAAX,SAAAC,cAAA,YAGA,OAFAT,EAAAC,sBAAAkB,GACAA,EAAA9Q,QACA2P,EAAAiB,YAAAE,EAAA9Q,IAoBA4Q,YAAA,SAAAf,EAAAkB,GACA,IAAApB,EAAAqB,kBACA,SAGAb,SAAAc,KAAAT,YAAAX,GACA,IAcA,OAbAqB,OAAAC,eAAAC,kBAAAvB,GACA,MAAAkB,GAGAlB,EAAAwB,iBAAA,gBAAAC,GACAA,EAAA3P,iBACA,IAAA4P,EAAAD,EAAAC,eAAAL,OAAAK,cACA,MAAAA,IACAA,EAAAC,QAAA,YAAA3B,EAAA4B,WACAF,EAAAC,QAAA,aAAAT,MAIAZ,SAAAuB,YAAA,QAEA,MAAAC,GACA,SAEA,QACAxB,SAAAc,KAAAW,YAAA/B,KAOAmB,gBAAA,WACA,aAAAb,SAAA0B,uBAAA1B,SAAA0B,sBAAA;;;;4JC5GA,IAAAC,EAAAzW,mBAAA,sCAKA0W,GACAC,2BAAAF,EAAA;;;;sRCNAvW,EAAAF,cAAA,iCAcA4W,EAAA,SAAAxW,GAEA,SAAAwW,IACA,cAAAxW,KAAAC,MAAAC,KAAAC,YAAAD,KAYA,OAdAE,EAAA,UAAAoW,EAAAxW,GAIAwW,EAAAnW,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAAkB,EAAAX,EAAAW,UAAAU,EAAArB,EAAAqB,SAAAzB,EAAAI,EAAAJ,MACA,OAAAf,EAAA,qBAA4C8B,YAAAf,SAAqCyB,IAEjFkU,EAAAnW,UAAAoW,kBAAA,SAAAZ,GACA,OAAA3V,KAAAQ,MAAA+V,kBAAAZ,IAEAW,EAAApW,EAAA,YACA2I,EAAA,mBACAyN,GAdA,CAgBC1W,EAAA;;;;+DCzBD,IAAA4W,SALA9W,EAAAuO,EAAAC,EAAA,8BAAAsI,IAMA,SAAAA,GACAA,EAAA,QACAA,EAAA,YACAA,EAAA,YACAA,EAAA,cAJA,CAKCA;;;;2nCCXD9W,EAAAuO,EAAAC,EAAA,6DAAAuI,IAKA,IAAAC,EAAA,oBAEAC,EAAAD,EAAA,+FACAE,EAAAF,EAAA,+EACAG,EAAAH,EAAA,4EACAI,EAAAJ,EAAA,8CACAK,EAAAL,EACA,gHACAM,EAAAN,EAAA,uEACAO,EAAAP,EAAA,4FACAQ,EAAAR,EAAA,oEACAS,EAAAT,EAAA,qFACAU,EAAAV,EAAA,8DACAD,EAAAC,EAAA;;;;0YClBAW,EAAA3X,gBAAA,6DAaA4X,EAAA,WASA,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,QACA,IAAAF,IAA+BA,EAAAH,EAAAM,oBAC/B,IAAAF,IAAqCA,EAAAJ,EAAAO,2BACrC,IAAAF,IAAoCA,EAAAL,EAAAQ,qBACpC,IAAAtU,EAAAxD,KACAA,KAAA+X,yBAAA,SAAApE,GACA,WAAAA,EAAA,EAAAnQ,EAAAwU,qBAAArE,EAAA,IAEA3T,KAAAgY,qBAAA,SAAArE,GACA,WAAAnQ,EAAAyU,QACAzU,EAAAmU,WAAAhE,EAEAA,GAAAnQ,EAAAyU,QACAzU,EAAA0U,uBAAA1U,EAAAyU,QAAA,GAAAzU,EAAAmU,YAAAhE,EAAAnQ,EAAAyU,QAAA,GAGAzU,EAAA0U,uBAAAvE,IAGA3T,KAAAmY,0BAAA,SAAAxE,GACA,WAAAA,EAAA,EAAAnQ,EAAA4U,sBAAAzE,EAAA,IAEA3T,KAAAoY,sBAAA,SAAAzE,GACA,WAAAnQ,EAAA6U,QACA7U,EAAAkU,YAAA/D,EAEAA,GAAAnQ,EAAA6U,QACA7U,EAAA8U,qBAAA9U,EAAA6U,QAAA,GAAA7U,EAAAkU,aAAA/D,EAAAnQ,EAAA6U,QAAA,GAGA7U,EAAA8U,qBAAA3E,IAGA3T,KAAAwX,eACAxX,KAAAuX,aACAvX,KAAAkY,uBAAAb,EAAA,MAAAkB,WAAAf,GACAxX,KAAAsY,qBAAAjB,EAAA,MAAAkB,WAAAhB,GACAvX,KAAAiY,QAAAT,EAAApP,OACApI,KAAAqY,QAAAd,EAAAnP,OACApI,KAAAyX,QACAzX,KAAA0X,cACA1X,KAAA2X,aA0RA,OA7QAL,EAAAnX,UAAAqY,YAAA,SAAA/R,EAAAC,GACA,IAAA9D,EAAA5C,KAAAuX,WAAA9Q,GACAgS,EAAAzY,KAAAsY,qBAAA7R,GAAA7D,EACAE,EAAA9C,KAAAwX,aAAA9Q,GACAgS,EAAA1Y,KAAAkY,uBAAAxR,GAAA5D,EACA,WAAA6V,EAAA,KAAAD,EAAAD,EAAA3V,EAAAF,IASA0U,EAAAnX,UAAAyY,iBAAA,SAAAnS,EAAAC,GACA,IAAAgS,EAAA,EACAD,EAAA,EACA3V,EAAA,EACAF,EAAA,EAiBA,OAhBA6D,GAAAzG,KAAAuX,WAAAnP,QACAxF,EAAA5C,KAAA0X,YACAe,EAAAzY,KAAA6Y,YAAA7Y,KAAA0X,aAAAjR,EAAAzG,KAAAqY,WAGAzV,EAAA5C,KAAAuX,WAAA9Q,GACAgS,EAAAzY,KAAAsY,qBAAA7R,GAAA7D,GAEA8D,GAAA1G,KAAAwX,aAAApP,QACAtF,EAAA9C,KAAA2X,WACAe,EAAA1Y,KAAA8Y,WAAA9Y,KAAA2X,YAAAjR,EAAA1G,KAAAiY,WAGAnV,EAAA9C,KAAAwX,aAAA9Q,GACAgS,EAAA1Y,KAAAkY,uBAAAxR,GAAA5D,GAEA,IAAA6V,EAAA,KAAAD,EAAAD,EAAA3V,EAAAF,IAKA0U,EAAAnX,UAAA4Y,WAAA,SAAAtS,GACA,IAAA7D,EAAA5C,KAAAuX,WAAA9Q,GACAgS,EAAAzY,KAAAsY,qBAAA7R,GAAA7D,EACA,WAAA+V,EAAA,OAAAF,EAAAzY,KAAA8Y,WAAAlW,IAKA0U,EAAAnX,UAAA6Y,cAAA,SAAAtS,GACA,IAAA5D,EAAA9C,KAAAwX,aAAA9Q,GACAgS,EAAA1Y,KAAAkY,uBAAAxR,GAAA5D,EACA,WAAA6V,EAAA,KAAAD,EAAA,EAAA5V,EAAA9C,KAAA6Y,cAKAvB,EAAAnX,UAAA2Y,SAAA,WACA,WAAA9Y,KAAAiY,QAAA,EAAAjY,KAAAkY,uBAAAlY,KAAAiY,QAAA,IAKAX,EAAAnX,UAAA0Y,UAAA,WACA,WAAA7Y,KAAAqY,QAAA,EAAArY,KAAAsY,qBAAAtY,KAAAqY,QAAA,IAKAf,EAAAnX,UAAA8Y,QAAA,WACA,WAAAN,EAAA,SAAA3Y,KAAA8Y,WAAA9Y,KAAA6Y,cAYAvB,EAAAnX,UAAA+Y,eAAA,SAAAC,EAAA3S,GACA,IAAA4S,KACA,SAAAD,EACA,OAAAC,EAIA,IAFA,IAAArY,EAAAf,KAAAqZ,oBAAAF,GAAAG,EAAAvY,EAAAuY,cAAAC,EAAAxY,EAAAwY,YACA1Y,EAAAb,KAAAwZ,uBAAAL,GAAAM,EAAA5Y,EAAA4Y,iBAAAC,EAAA7Y,EAAA6Y,eACAjT,EAAA6S,EAA0C7S,GAAA8S,EAAyB9S,IACnE,QAAAC,EAAA+S,EAAoD/S,GAAAgT,EAA+BhT,IACnF0S,EAAAtL,KAAAtH,EAAAC,EAAAC,IAGA,OAAA0S,GAOA9B,EAAAnX,UAAAwZ,cAAA,SAAAR,EAAA3S,GACA,IAAA4S,KACA,SAAAD,EACA,OAAAC,EAGA,IADA,IAAArY,EAAAf,KAAAqZ,oBAAAF,GAAAG,EAAAvY,EAAAuY,cAAAC,EAAAxY,EAAAwY,YACA9S,EAAA6S,EAA0C7S,GAAA8S,EAAyB9S,IACnE2S,EAAAtL,KAAAtH,EAAAC,IAEA,OAAA2S,GAOA9B,EAAAnX,UAAAyZ,iBAAA,SAAAT,EAAA3S,GACA,IAAA4S,KACA,SAAAD,EACA,OAAAC,EAGA,IADA,IAAArY,EAAAf,KAAAwZ,uBAAAL,GAAAM,EAAA1Y,EAAA0Y,iBAAAC,EAAA3Y,EAAA2Y,eACAhT,EAAA+S,EAAgD/S,GAAAgT,EAA+BhT,IAC/E0S,EAAAtL,KAAAtH,EAAAE,IAEA,OAAA0S,GAMA9B,EAAAnX,UAAAkZ,oBAAA,SAAAF,EAAAU,EAAApM,GAGA,QAFA,IAAAoM,IAA2CA,GAAA,QAC3C,IAAApM,IAA+BA,EAAA6J,EAAAwC,kBAC/B,MAAAX,EACA,OAAoBI,YAAA,EAAAD,cAAA,GAEpB,IAAAS,EAAAF,EAAAG,KAAAC,IAAAja,KAAAqY,QAAAf,EAAAwC,kBAAA9Z,KAAAqY,QACAtX,EAAAf,KAAAka,qBAAAf,EAAAV,IAAAU,EAAAV,IAAAU,EAAAvW,OAAAmX,GAAAF,EAAA7Z,KAAAoY,uBAAA+B,EAAApZ,EAAAoZ,MAAAC,EAAArZ,EAAAqZ,IAEA,OACAb,YAFA9L,EAAA,GAAA2M,EAAAD,EAAA1M,EAAA0M,EAAA1M,EAAA2M,EAGAd,cAAAa,IAOA7C,EAAAnX,UAAAqZ,uBAAA,SAAAL,EAAAU,EAAApM,GAGA,QAFA,IAAAoM,IAA2CA,GAAA,QAC3C,IAAApM,IAA+BA,EAAA6J,EAAA+C,qBAC/B,MAAAlB,EACA,OAAoBO,eAAA,EAAAD,iBAAA,GAEpB,IAAAM,EAAAF,EAAAG,KAAAC,IAAAja,KAAAiY,QAAAX,EAAA+C,qBAAAra,KAAAiY,QACAlX,EAAAf,KAAAka,qBAAAf,EAAAT,KAAAS,EAAAT,KAAAS,EAAArW,MAAAiX,GAAAF,EAAA7Z,KAAAgY,sBAAAmC,EAAApZ,EAAAoZ,MAAAC,EAAArZ,EAAAqZ,IAEA,OACAV,eAFAjM,EAAA,GAAA2M,EAAAD,EAAA1M,EAAA0M,EAAA1M,EAAA2M,EAGAX,iBAAAU,IAGA7C,EAAAnX,UAAAma,aAAA,SAAA7T,EAAAC,GACA,OAAAD,GAAAzG,KAAAqY,SAAA3R,GAAA1G,KAAAiY,SAEAX,EAAAnX,UAAAoa,kBAAA,SAAA9T,EAAAC,EAAA8T,EAAAC,GACA,OAAAhU,IAAA+T,GAAA9T,IAAA+T,GACAC,EAAA,qBAAAA,EAAA,mBAEAjU,IAAA+T,GACAE,EAAA,sBAEAhU,IAAA+T,GACAC,EAAA,uBAIApD,EAAAnX,UAAAwa,eAAA,SAAAC,GAEA,OADAC,EAAA,QAAAC,qBAAAF,IAEA,KAAAC,EAAA,kBAAAE,MACA,IAAAha,EAAA6Z,EAAAI,KAAAC,EAAAla,EAAA,GAAAyZ,EAAAzZ,EAAA,GACAF,EAAA+Z,EAAAM,KAAAC,EAAAta,EAAA,GAAAua,EAAAva,EAAA,GAEA,GAAAb,KAAAsa,aAAAW,EAAAE,IAAAnb,KAAAsa,aAAAE,EAAAY,GACA,OAA4BC,QAAA,QAE5B,IAAAC,EAAAtb,KAAAwY,YAAAyC,EAAAE,GACAI,EAAAvb,KAAAwY,YAAAgC,EAAAY,GACAI,EAAA,IAAAL,EAAA,IACAM,EAAA,IAAAR,EAAA,IAMA,OALA9B,EAAAmC,EAAAI,MAAAH,IACA3Y,QAAA6Y,EACAtC,EAAAT,MAAA8C,EACArC,EAAArW,OAAA0Y,EACArC,EAAAV,KAAAgD,EACAvb,EAAA,YAA0CiZ,EAAAxY,SAAiB0a,QAAA,UAE3D,KAAAR,EAAA,kBAAAc,aACA,IAAA7a,EAAA8Z,EAAAM,KAAAC,EAAAra,EAAA,GAAAsa,EAAAta,EAAA,GAEA,GAAAd,KAAAsa,aAAA,EAAAa,IAAAnb,KAAAsa,aAAA,EAAAc,GACA,OAA4BC,QAAA,QAE5BC,EAAAtb,KAAAwY,YAAA,EAAA2C,GACAI,EAAAvb,KAAAwY,YAAA,EAAA4C,GADA,IAEAjC,EAAAmC,EAAAI,MAAAH,GACAC,EAAA,IAAAL,EAAA,IACA,OACAS,OAAA,EACAP,QAAA,QACA3C,KAAAS,EAAAT,KAAA8C,EACA/C,IAAA,EACA3V,MAAAqW,EAAArW,MAAA0Y,GAGA,KAAAX,EAAA,kBAAAgB,UACA,IAAAC,EAAAlB,EAAAI,KAAAC,EAAAa,EAAA,GAAAtB,EAAAsB,EAAA,GAEA,GAAA9b,KAAAsa,aAAAW,EAAA,IAAAjb,KAAAsa,aAAAE,EAAA,GACA,OAA4Ba,QAAA,QAE5BC,EAAAtb,KAAAwY,YAAAyC,EAAA,GACAM,EAAAvb,KAAAwY,YAAAgC,EAAA,GACArB,EAAAmC,EAAAI,MAAAH,GACAE,EAAA,IAAAR,EAAA,IACA,OACAI,QAAA,QACAzY,OAAAuW,EAAAvW,OAAA6Y,EACA/C,KAAA,EACAqD,MAAA,EACAtD,IAAAU,EAAAV,IAAAgD,GAGA,KAAAZ,EAAA,kBAAAmB,WACA,OACAJ,OAAA,EACAP,QAAA,QACA3C,KAAA,EACAqD,MAAA,EACAtD,IAAA,GAEA,QACA,OAAwB4C,QAAA,UAGxB/D,EAAAnX,UAAA+Z,qBAAA,SAAA+B,EAAAhC,EAAAiC,EAAAC,EAAAC,GACA,IAAAjC,EAAA9C,EAAA,MAAAgF,aAAAJ,EAAAC,EAAA,EAAAE,GACAhC,EAAA/C,EAAA,MAAAgF,aAAApC,EAAAiC,EAAA,EAAAE,GAaA,OAXAjC,GAAA,GAAA8B,IAAAG,EAAAjC,KACAA,GAAA,IAUgBA,MAPhBA,EAAAH,KAAAC,IAAA,EAAAE,EAAAna,KAAAyX,OAOgB2C,IALhBA,EADA+B,EACAnC,KAAAiC,IAAAC,EAAA,EAAA9B,EAAApa,KAAAyX,OAGAuC,KAAAiC,IAAAC,EAAA,EAAA9B,KAIA9C,EAAAM,cAAA,EACAN,EAAA+C,oBAAA,GACA/C,EAAAwC,iBAAA,IACAxC,EAAAO,qBAAA,GACAP,EAAAQ,oBAAA,IACAR,EA5UA;;;;wsBCbA5X,EAAAuO,EAAAC,EAAA,0BAAAmJ,EAAA;;;;4HCAA,IAAAiF,EAAA5c,qBAAA,iEAMA,SAAA6c,EAAAC,GACA,OAAAA,GACA,KAAAF,EAAA,UAAAG,GACA,OAAoBzB,MAAA,EAAAE,KAAA,GACpB,KAAAoB,EAAA,UAAAI,KACA,OAAoB1B,KAAA,EAAAE,KAAA,GACpB,KAAAoB,EAAA,UAAAK,KACA,OAAoB3B,KAAA,EAAAE,MAAA,GACpB,KAAAoB,EAAA,UAAAM,MACA,OAAoB5B,KAAA,EAAAE,KAAA,GACpB,QACA;;;;o0BCjBA2B,EAAAnd,kBAAA,8DAaA,SAAAod,EAAAC,EAAAC,GACA,WAAAD,EAAA3U,YACA,EAEA,MAAA4U,EACAA,EAAAC,oBAGAF,EAAA3U,OAAA,EAMA,SAAA8U,EAAAC,EAAAC,EAAAC,EAAAN,GACA,GAAAI,EAGA,UAAAC,EAEA,OAAAA,EAEA,SAAAC,EAEA,OAAAA,EAEA,GAAAN,EAAA3U,OAAA,GAEA,IAAAkV,EAAAP,EAAA3U,OAAA,EACA,OAAAlI,EAAA,YAAkC2a,EAAA,QAAA0C,kCAAAR,EAAAO,KAA0EL,oBAAAK,IAI5G,OAAgBE,IAAA,EAAA7I,IAAA,EAAAsI,oBAAA,IAOhB,SAAAQ,EAAA7C,EAAAoC,GACA,aAAApC,EAAAI,MAAAgC,EAAArI,MAAAiG,EAAAI,KAAA,GAMA,SAAA0C,EAAA9C,EAAAoC,GACA,aAAApC,EAAAI,MAAAgC,EAAArI,MAAAiG,EAAAI,KAAA,GAMA,SAAA2C,EAAA/C,EAAAoC,GACA,aAAApC,EAAAM,MAAA8B,EAAAQ,MAAA5C,EAAAM,KAAA,GAMA,SAAA0C,EAAAhD,EAAAoC,GACA,aAAApC,EAAAM,MAAA8B,EAAAQ,MAAA5C,EAAAM,KAAA,GAMA,SAAA2C,EAAAC,EAAAb,GAEA,YADA,IAAAA,IAAyCA,EAAA,GACzC/c,EAAA,YAA8B4d,GAAeb,wBAQ7C,SAAAc,EAAAf,EAAAgB,GACA,OAAAnD,EAAA,QAAAC,qBAAAkD,IACA,KAAAnD,EAAA,kBAAAc,aACA,IAAA5a,EAAAkd,EAAAjB,EAAAgB,EAAA,cAAAE,EAAAnd,EAAA,GAAAod,EAAApd,EAAA,GACA,OAAA8Z,EAAA,QAAAuD,OAAAF,EAAAC,GAEA,KAAAtD,EAAA,kBAAAgB,UACA,IAAAhb,EAAAod,EAAAjB,EAAAgB,EAAA,cAAAE,EAAArd,EAAA,GAAAsd,EAAAtd,EAAA,GACA,OAAAga,EAAA,QAAAlG,IAAAuJ,EAAAC,GAEA,KAAAtD,EAAA,kBAAAE,MACA,IAAAja,EAAAmd,EAAAjB,EAAAgB,EAAA,cAAA1E,EAAAxY,EAAA,GAAAyY,EAAAzY,EAAA,GACAgb,EAAAmC,EAAAjB,EAAAgB,EAAA,cAAAK,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GACA,OAAAjB,EAAA,QAAAlX,KAAA2V,EAAA+E,EAAA9E,EAAA+E,GACA,QAEA,OAAAzD,EAAA,QAAAtG,SAGA,SAAA0J,EAAAjB,EAAAgB,EAAAO,EAAAC,GACA,IAAAC,EAAAzB,EAAAuB,GACAxd,EAAAid,EAAAQ,GAAAE,EAAA3d,EAAA,GACA,GAAA2d,IADA3d,EAAA,GACA,CACA,YAAAyd,EACA,UAAAG,MAAA9B,EAAA,8CAEA,YAAA2B,EACA,UAAAG,MAAA9B,EAAA,iDAGA,OAAA4B,GAAAC,GAAAD,EAAAC,MAAAD;;;;4EChHA,SAAAG,EAAAC,GACA,IAAAC,EAAA,oBAAAC,oBAAAC,cAAA1a,EACA0a,EAAA,MAAAH,IAAAC,EACA,aAAAE,GAAA,uBAAAC,KAAAD,8CAZAtf,EAAAuO,EAAAC,EAAA,oCAAAgR,IAkBA,IAAAA,EAAA,SAAAC,EAAAN,GACA,IAAAO,EAAAR,EAAAC,GACA,OAAAO,GAAAD,EAAAE,UAAAD,GAAAD,EAAAG;;;;mOCpBA,IAAAC,EAAA7f,sBAAA,wDAUA,SAAA8f,EAAA5E,EAAA6E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,QACA,IAAAD,IAAmCA,EAAA,QACnC,IAAAC,IAAsCA,EAAA,GACtC,IAAAC,EAAAR,EAAA,QAAAzE,qBAAAF,GACAoF,EAAAN,EACAO,EAAAR,EAGAS,EAAAP,EAAAG,GACAK,EAAAP,EAAAC,GACA,OAAAE,GACA,KAAAR,EAAA,kBAAAxE,MAEA,IAAAqF,EAAAR,EAAAhF,EAAAI,KAAA,IACAqF,EAAAV,EAAA/E,EAAAM,KAAA,IACA8E,EAAAM,EAAAF,EAAAD,GACAF,EAAAK,EAAAD,EAAAH,GACA,MAEA,KAAAX,EAAA,kBAAA1D,UAGAmE,EAAAM,EADAF,EAAAR,EAAAhF,EAAAI,KAAA,IACAmF,GACA,MAEA,KAAAZ,EAAA,kBAAA5D,aAGAsE,EAAAK,EADAD,EAAAV,EAAA/E,EAAAM,KAAA,IACAgF,GACA,MAEA,QAEAF,EAAA,EACAC,EAAA,EAIA,OAAYA,aAAAD,aAMZ,SAAAO,EAAAC,EAAAhE,GAGA,qBAAAA,EACAgE,EAAAC,aAAAD,EAAArW,aACAqW,EAAAE,YAAAF,EAAAnW,YAKA,SAAAiW,EAAAK,EAAAC,GAEA,OAAA5G,KAAAC,IAAA0G,EAAAC,EAAA;;;;0YClEAC,EAAAnhB,2BAAA,iFAoCA,SAAAohB,EAAAlG,EAAA4B,EAAAQ,GACA,GAAAuC,EAAA,QAAAzE,qBAAAF,KAAA2E,EAAA,kBAAAvD,WAGA,OAAApB,EAEA,IAAAmG,EAAAxB,EAAA,QAAAyB,KAAApG,GACAqG,EAAA,EACAC,EAAA,EACA,SAAAlE,EAAA,CACA,IAAAmE,EAAAN,EAAA,yBAAAE,EAAA/D,GACAoE,EAAAP,EAAA,4BAAAE,EAAA/D,GACAqE,EAAAR,EAAA,0BAAAE,EAAA/D,GACAsE,EAAAT,EAAA,2BAAAE,EAAA/D,GAIAR,IAAA+E,EAAA,UAAA9E,GACAwE,EAAAE,IAAAC,EAAA,IAEA5E,IAAA+E,EAAA,UAAA7E,KACAuE,EAAAG,IAAAD,EAAA,IAGAD,EADA1E,IAAA+E,EAAA,UAAA5E,KACA0E,IAAAC,EAAA,IAIAA,IAAAD,EAAA,SAKAJ,EAAAzE,IAAA+E,EAAA,UAAA7E,KAAA,IACAwE,EAAA1E,IAAA+E,EAAA,UAAA3E,MAAA,IAEA,IAAA4E,EAAAC,EAAA,iBAAAjF,GASA,OARA,MAAAuE,EAAA/F,OACA+F,EAAA/F,KAAAiG,IAAAO,EAAAxG,MAEA,MAAA+F,EAAA7F,OACA6F,EAAA7F,KAAAgG,IAAAM,EAAAtG,MAIA6F;;;;oOCjFAW,EAAAhiB,0BAAA,qDASAiiB,EAAA,SAAA7hB,GAEA,SAAA6hB,EAAAnhB,GACA,IAAAgD,EAAA1D,EAAA2D,KAAAzD,KAAAQ,IAAAR,KAEA,OADAwD,EAAA7C,MAAA6C,EAAAoe,eAAAphB,EAAA2C,gBACAK,EAiBA,OArBAtD,EAAA,UAAAyhB,EAAA7hB,GAMA6hB,EAAAxhB,UAAAkF,0BAAA,SAAAhF,KACAL,KAAAQ,MAAAe,SAAAlB,EAAAkB,SAAAvB,KAAAQ,MAAA2C,iBAAA9C,EAAA8C,kBACAnD,KAAAW,MAAAX,KAAA4hB,eAAAvhB,EAAA8C,kBAGAwe,EAAAxhB,UAAAS,OAAA,WACA,OAAAZ,KAAAQ,MAAAe,QACAyJ,EAAA,qBAA+CtJ,UAAAggB,EAAA,QAAAG,SAAAlhB,MAAAX,KAAAW,QAE/CqK,EAAA,SAAA8W,KAAA9hB,KAAAQ,MAAA4B,WAEAuf,EAAAxhB,UAAAyhB,eAAA,SAAAze,GAEA,OAAgBL,OADhBK,EAAA,KAAA6W,KAAA+H,MAAA,GAAA/H,KAAAgI,UAAA,KACgB,MAEhBL,EAtBA,CAuBC3W,EAAA;;;;iEChCDtL,EAAAuO,EAAAC,EAAA,yBAAA+T,IAYA,IAAAA,EAAA,WACA,SAAAA,EAAAvJ,EAAAD,EAAA3V,EAAAF,GACA5C,KAAA0Y,OACA1Y,KAAAyY,MACAzY,KAAA8C,QACA9C,KAAA4C,SA8EA,OAzEAqf,EAAAvG,MAAA,SAAAwG,EAAAC,GACA,IAAAC,EAAAH,EAAAI,KAAAH,GACAI,EAAAL,EAAAI,KAAAF,GACA1J,EAAAuB,KAAAiC,IAAAmG,EAAA3J,IAAA6J,EAAA7J,KACAC,EAAAsB,KAAAiC,IAAAmG,EAAA1J,KAAA4J,EAAA5J,MACAkD,EAAA5B,KAAAC,IAAAmI,EAAA3J,IAAA2J,EAAAxf,OAAA0f,EAAA7J,IAAA6J,EAAA1f,QAIA,WAAAqf,EAAAvJ,EAAAD,EAHAuB,KAAAC,IAAAmI,EAAA1J,KAAA0J,EAAAtf,MAAAwf,EAAA5J,KAAA4J,EAAAxf,OAEA4V,EADAkD,EAAAnD,IAQAwJ,EAAAM,eAAA,SAAAL,EAAAC,GACA,IAAAC,EAAAH,EAAAI,KAAAH,GACAI,EAAAL,EAAAI,KAAAF,GACA,WAAAF,EAAAG,EAAA1J,KAAA4J,EAAA5J,KAAA0J,EAAA3J,IAAA6J,EAAA7J,IAAA2J,EAAAtf,MAAAsf,EAAAxf,SAMAqf,EAAAthB,MAAA,SAAAwY,GACA,OACAvW,OAAAuW,EAAAvW,OAAA,KACA8V,KAAAS,EAAAT,KAAA,KACAzP,SAAA,WACAwP,IAAAU,EAAAV,IAAA,KACA3V,MAAAqW,EAAArW,MAAA,OAMAmf,EAAAI,KAAA,SAAAlJ,GACA,OAAAA,aAAA8I,EACA9I,EAGA,IAAA8I,EAAA9I,EAAAT,KAAAS,EAAAV,IAAAU,EAAArW,MAAAqW,EAAAvW,SAGAqf,EAAA9hB,UAAAoiB,eAAA,SAAAC,GACA,OAAAP,EAAAM,eAAAviB,KAAAwiB,IAEAP,EAAA9hB,UAAAub,MAAA,SAAA8G,GACA,OAAAP,EAAAvG,MAAA1b,KAAAwiB,IAEAP,EAAA9hB,UAAAQ,MAAA,WACA,OAAAshB,EAAAthB,MAAAX,OAEAiiB,EAAA9hB,UAAAsiB,UAAA,WACA,OACA7f,OAAA5C,KAAA4C,OAAA,KACAE,MAAA9C,KAAA8C,MAAA,OAGAmf,EAAA9hB,UAAAuiB,UAAA,SAAAC,GACA,OAAAA,GAAA3iB,KAAA0Y,MAAAiK,GAAA3iB,KAAA0Y,KAAA1Y,KAAA8C,OAEAmf,EAAA9hB,UAAAyiB,UAAA,SAAAC,GACA,OAAAA,GAAA7iB,KAAAyY,KAAAoK,GAAA7iB,KAAAyY,IAAAzY,KAAA4C,QAEAqf,EAAA9hB,UAAA2iB,OAAA,SAAA3J,GACA,aAAAA,GACAnZ,KAAA0Y,OAAAS,EAAAT,MACA1Y,KAAAyY,MAAAU,EAAAV,KACAzY,KAAA8C,QAAAqW,EAAArW,OACA9C,KAAA4C,SAAAuW,EAAAvW,QAEAqf,EAAAc,OAAA,IAAAd,EAAA,SACAA,EAnFA;;;;gECPA,IAAAe,SALAtjB,EAAAuO,EAAAC,EAAA,+BAAA8U,IAMA,SAAAA,GAOAA,EAAA,cAOAA,EAAA,kCAMAA,EAAA,YApBA,CAqBCA;;;;gFC3BDtjB,EAAAuO,EAAAC,EAAA,wCAAA+U,IAQA,IAIAC,GACAC,aACAC,WAAA,GAoBA,oBAAA7N,QACA,MAAAA,OAAAG,kBACAH,OAAAG,iBAAA,UApBA,SAAAyJ,GACA,GAAAA,EAAAkE,SAAA9N,QATA,iCASA4J,EAAAmE,KAAA,CAGAJ,EAAAE,WAAA,EACA,IAAA5c,EAAA,KACA0c,EAAAC,UAAA/a,OAAA,IACA5B,EAAA0c,EAAAC,UAAAI,SAEAL,EAAAC,UAAA/a,OAAA,GACAob,IAGAhd,GACAA,OAMA,GAGA,IAAAgd,EAAA,WACAN,EAAAE,YAGAF,EAAAE,WAAA,EAcAK,sBAAA,WACAA,sBAAA,WACAC,YAnDA,+BAmDA,WAcAT,EAAA,SAAAzc,GACA0c,EAAAC,UAAArV,KAAAtH,GACAgd;;;;kEC3EA9jB,EAAAuO,EAAAC,EAAA,0BAAAyV,IAKA,IAAAC,EAAA,2BAKAC,GAAA,qEACAF,GAKAG,MAAA,SAAAC,EAAAvd,GACA,GAAAud,EAAA,EACA,UAAApF,MAAA,+DAGA,IADA,IAAA/Q,EAAAoW,MAAAD,GACApQ,EAAA,EAA2BA,EAAAoQ,EAAWpQ,IACtC/F,EAAA+F,GAAAnN,EAAAmN,GAEA,OAAA/F,GASA2K,WAAA,SAAA0L,GAGA,IAFA,IAAArW,KACAsW,EAAA,EACApY,EAAA,EAAAqY,EAAAF,EAA6CnY,EAAAqY,EAAA/b,OAAuB0D,IAAA,CAEpEoY,GADAC,EAAArY,GAEA8B,EAAAE,KAAAoW,GAEA,OAAAtW,GASAwW,cAAA,SAAAC,GAEA,IADA,IAAAC,EAAA,KACA,CACA,IAAAC,EAAAF,EAAA,GAGA,GAFAC,EAAAE,OAAAC,aAAA,GAAAF,GAAAD,GACAD,GAAAE,IACA,EACA,OAAAD,EAEAD,IAAA,OAOAK,iBAAA,SAAAje,EAAAC,GACA,SAAAid,EAAAS,cAAA1d,IAAAD,EAAA,IAoBA4V,aAAA,SAAAhY,EAAAsgB,EAAAvI,GAEA,IADA,IAAAwI,EAAA,EACAA,EAAAD,GAAA,CACA,IAAAE,EAAA7K,KAAA+H,OAAA6C,EAAAD,GAAA,GACAvI,EAAAyI,GACAxgB,EACAugB,EAAAC,EAAA,EAGAF,EAAAE,EAGA,OAAAF,GAWAG,cAAA,SAAAC,EAAA3c,EAAA4c,GACA,GAAAD,EAAA3c,SACA,OAAA2c,EAAAE,MAAA,EAAA7c,GAGA,IADA2c,IAAAE,QACAF,EAAA3c,UACA2c,EAAAjX,KAAAkX,GAEA,OAAAD,GAWAG,mBAAA,SAAAC,EAAAC,GACA,SAAAA,GAAAD,EAAA/c,SAAAgd,EAAAhd,OACA,OAAA+c,EAEAA,IAAAF,QACA,QAAA7X,EAAA,EAAuBA,EAAA+X,EAAA/c,OAAqBgF,IAAA,CAC5C,IAAAiY,EAAAD,EAAAhY,GACA,MAAAiY,IACAF,EAAA/X,GAAAiY,GAGA,OAAAF,GAOAG,0BAAA,SAAA9E,GACA,IAAAjd,EAAAiR,SAAAC,cAAA,UAAA8Q,WAAA,MACA5kB,EAAA6kB,iBAAAhF,EAAA,MAEA,OADAjd,EAAAkiB,KAAA5B,EAAA1hB,IAAA,SAAAujB,GAAgE,OAAA/kB,EAAAglB,iBAAAD,KAAuCrY,KAAA,KAsJvG,SAAA9J,EAAAid,GAGA,IACAoF,EACAC,EAFAC,EAAAtF,EAAAuF,cAAA,IAAAnC,GAGA,MAAAkC,IACAF,EAAAE,EAAAE,cACAH,EAAAC,EAAAG,YACAL,EAAA3P,YAAA6P,IAEA,IAAAI,EAAA3iB,EAAA4iB,YAAA3F,EAAAzL,aACA,MAAA+Q,GACAF,EAAAQ,aAAAN,EAAAD,GAEA,OAAAK,EApKAG,CAAA9iB,EAAAid,IASA8F,MAAA,SAAAjiB,EAAA4X,EAAAhC,GAOA,OANA,MAAAgC,GAAA5X,EAAA4X,IACA5X,EAAA4X,GAEA,MAAAhC,GAAA5V,EAAA4V,IACA5V,EAAA4V,GAEA5V,GAiCAkiB,2BAAA,SAAAC,EAAAC,EAAAre,GACA,OAAAqe,EAAAD,EACAC,EAEAD,GAAAC,KAAAD,EAAApe,EACAoe,EAGAxM,KAAAC,IAAA,EAAAwM,EAAAre,IAgBAse,2BAAA,SAAAF,EAAAC,EAAAre,GACA,OAAAqe,GAAAD,EAAAC,IAAAre,GASAue,aAAA,SAAA5B,EAAA6B,EAAAC,EAAAze,GAEA,QADA,IAAAA,IAAgCA,EAAA,GAChC,IAAAA,OAAA2c,EAAA3c,QAAAwe,IAAAC,EAEA,OAAA9B,EAAAE,QAEA,KAAA7c,EAAA,GAAAA,EAAA2c,EAAA3c,QAAAwe,EAAAxe,EAAA2c,EAAA3c,QAAA,CAWA,IARA,IAAA0e,EAAA/B,EAAAE,MAAA,EAAA2B,GACAG,EAAAhC,EAAAE,MAAA2B,IAAAxe,GACA4e,EAAAjC,EAAAE,MAAA2B,EAAAxe,GACAwF,KACAR,EAAA,EACAI,EAAA,EACAyZ,EAAA,EACA1Z,EAAA,EACAH,EAAAyZ,GACArZ,EAAAsZ,EAAA1e,QACAwF,EAAAE,KAAAgZ,EAAAtZ,IACAA,GAAA,IAGAI,EAAAE,KAAAkZ,EAAAzZ,IACAA,GAAA,GAEAH,GAAA,EAEA,KAAA6Z,EAAA7e,GACAwF,EAAAE,KAAAiZ,EAAAE,IACAA,GAAA,EACA7Z,GAAA,EAEA,KAAAA,EAAA2X,EAAA3c,QACAoF,EAAAsZ,EAAA1e,QACAwF,EAAAE,KAAAgZ,EAAAtZ,IACAA,GAAA,IAGAI,EAAAE,KAAAkZ,EAAAzZ,IACAA,GAAA,GAEAH,GAAA,EAEA,OAAAQ,IAKAsZ,YAAA,SAAA/H,GACA,WAAAA,EAAAgI,QAEAld,oBAAA,SAAAmd,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1d,GACA,IAAA2d,EAAA,MAAAL,EAAA,EAAAA,EAAAhf,OAGAsf,GAFAL,EACAG,GACAF,EAGA,OAFAtN,KAAA2N,KAAAF,EAAAC,GAAA5d,GACAyd;;;;wvBCpSAK,EAAAloB,iBAAA,+DAcAmoB,EAAA,SAAA/nB,GAEA,SAAA+nB,IACA,IAAArkB,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAoEA,OAnEAwD,EAAAskB,UAAA,SAAAxT,GACA,IAAAvT,EAAAyC,EAAAhD,MAAAiZ,EAAA1Y,EAAA0Y,iBACAsO,EADAhnB,EAAAinB,KACA/O,UAAAnW,MACAmlB,EAAAzkB,EAAAhD,MAAAwnB,KAAAjQ,yBAAA0B,GACA9Y,GAGAunB,UAAA,eAAAD,GAAA,SAGAnlB,MAAAilB,EAAAE,GAEArmB,EAAAC,IAAAC,EAAA,YAAAA,EAAA,wBAGA,OAAAlC,EAAA,qBAAgDe,OAASmC,MAAAilB,IACzDnoB,EAAA,qBAA4Ce,QAAAe,UAAAE,EAAAqB,IAAAO,EAAAhD,MAAA2nB,sBAA0E7T,KAEtH9Q,EAAA4kB,qBAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA/kB,EAAAhD,MAAA+nB,QACA,aAAAA,IAAAH,qBAAAC,EAAAC,GAAA,MAEA9kB,EAAAglB,sBAAA,SAAA7U,EAAAwK,GACA,OAAA3a,EAAAhD,MAAAwnB,KAAAzN,kBAAA,EAAA5G,EAAA,EAAAwK,IAEA3a,EAAAilB,eAAA,SAAA9U,GACA,OAAAnQ,EAAAhD,MAAAwnB,KAAAhP,cAAArF,GAAA7Q,OAEAU,EAAAklB,kBAAA,SAAAC,GACA,OAAAA,EAAA,IAEAnlB,EAAAolB,mBAAA,SAAAzJ,GACA,OAAAA,EAAAwD,SAEAnf,EAAAqlB,gBAAA,SAAAlV,EAAAmV,GACAtlB,EAAAhD,MAAAuoB,cAAA,MACAvlB,EAAAhD,MAAAwoB,qBAAArV,EAAAmV,IAEAtlB,EAAAylB,wBAAA,SAAAtV,GACA,IAAA5S,EAAAyC,EAAAhD,MAAA0oB,EAAAnoB,EAAAmoB,eAAAC,EAAApoB,EAAAooB,eACArmB,EAAAU,EAAAhD,MAAA+nB,QAAAa,6BAAAzV,GACA0V,EAAAC,EAAA,MAAAhD,MAAAxjB,EAAAomB,EAAAC,GACA3lB,EAAAhD,MAAAuoB,cAAA,MACAvlB,EAAAhD,MAAAwoB,qBAAArV,EAAA0V,IAEA7lB,EAAA+lB,kBAAA,SAAA5V,EAAAmV,GACA,IAAA3P,EAAA3V,EAAAhD,MAAAwnB,KAAAhP,cAAArF,GACAnQ,EAAAhD,MAAAuoB,eAAA5P,EAAAT,KAAAoQ,KAEAtlB,EAAAgmB,eAAA,SAAA7V,GACA,OAAA8V,EAAA,QAAAC,cAAAlmB,EAAAhD,MAAAuc,gBAAApJ,IAEAnQ,EAAA8W,aAAA,SAAA3G,GACA,OAAAnQ,EAAAhD,MAAAwnB,KAAA1N,cAAA,EAAA3G,IAEAnQ,EAAAmmB,gBAAA,SAAAhW,EAAAiW,GACA,IAAA7oB,EAAAyC,EAAAhD,MAAAwnB,EAAAjnB,EAAAinB,KAAAzmB,EAAAR,EAAAQ,QACA4X,EAAA6O,EAAApP,iBAAA,EAAAjF,GACAhT,GACAkpB,UAAA1Q,EAAArW,MAAA,KACAA,MAAAqW,EAAArW,MAAA,MAEA,OAAAlD,EAAA,cAAAkqB,EAAA,kBAA2DpoB,UAAAG,IAAA+nB,GAAAjW,QAAAxN,IAAArE,EAAA,iBAAA6R,GAAApS,UAAAZ,WAE3D6C,EAAAumB,SAAA,SAAAC,EAAAC,GACA,OAAAR,EAAA,QAAArL,OAAA4L,EAAAC,IAEAzmB,EAmBA,OAzFAtD,EAAA,UAAA2nB,EAAA/nB,GAwEA+nB,EAAA1nB,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAEA0pB,EAAAnpB,EAAAgK,aAEAof,GAFAppB,EAAAioB,qBAEAjoB,EAAAmoB,gBAAAkB,EAAArpB,EAAAooB,eAEAjL,GAFAnd,EAAAspB,mBAEAtpB,EAAA0Y,kBAAA0E,EAAApd,EAAA2Y,eAEApU,EAAApF,EAAA,OAAAa,GAAA,mIACA,OAAAnB,EAAA,cAAAgoB,EAAA,OAAA1nB,EAAA,UAA8DoqB,oBAAAtqB,KAAAooB,qBAAAmC,sBAAAd,EAAA,kBAAA9N,aAAA6M,sBAAAxoB,KAAAwoB,sBAAAgC,kBAAA1oB,EAAA,qBAAA2oB,YAAAzqB,KAAAyoB,eAAAC,kBAAA1oB,KAAA0oB,kBAAAgC,cAAA5oB,EAAA,iBAAA8mB,mBAAA5oB,KAAA4oB,mBAAA+B,kBAAA3qB,KAAA2pB,gBAAAV,wBAAAjpB,KAAAipB,wBAAAJ,gBAAA7oB,KAAA6oB,gBAAAU,kBAAAvpB,KAAAupB,kBAAAqB,gCAAA,yBAAAC,6BAAA,mBAAAC,mBAAAZ,EAAA/L,WAAAD,aAAAsL,eAAAxpB,KAAAwpB,eAAAlP,aAAAta,KAAAsa,aAAA8P,UAAAD,UAAAY,kBAAAC,EAAA,YAAAC,SAAAlO,mBAAAgN,SAAA/pB,KAAA+pB,SAAAjC,UAAA9nB,KAAA8nB,WAA47BxiB,KAE1/BuiB,EAAAzkB,cACA8nB,eAAA,EACAC,aAAA,EACA5pB,SAAA,GAEAsmB,EA1FA,CA2FCjoB,EAAA;;;;uuBCzGDwrB,EAAA1rB,qBAAA,mEAaA,SAAA2rB,IACA,OAAAzrB,EAAA,qBAAuC8B,UAAA8D,EAAA,gCAEvC,IAAA8lB,EAAA,SAAAxrB,GAEA,SAAAwrB,IACA,IAAA9nB,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAUA,OATAwD,EAAAK,OACA0nB,UAAA,GAEA/nB,EAAAgoB,qBAAA,WACAhoB,EAAAQ,UAA4BunB,UAAA,KAE5B/nB,EAAAioB,uBAAA,WACAjoB,EAAAQ,UAA4BunB,UAAA,KAE5B/nB,EAgFA,OA5FAtD,EAAA,UAAAorB,EAAAxrB,GAqBAwrB,EAAAI,oBAAA,SAAAC,GACA,OAAAA,EAAAC,UAAAC,SAAArmB,EAAA,eACAmmB,EAAAC,UAAAC,SAAArmB,EAAA,oBACAmmB,EAAAC,UAAAC,SAAArmB,EAAA,wBACAmmB,EAAAC,UAAAC,SAAArmB,EAAA,uBAEA8lB,EAAAnrB,UAAAS,OAAA,WACA,IAeAC,EAfAE,EAAAf,KAAAQ,MAMA8E,GAJAvE,EAAA+qB,uBAAA/qB,EAAAgrB,iBAAAhrB,EAAAirB,SAEAjrB,EAAAkrB,KAAAlrB,EAAAmrB,aAEAhsB,EAAA,OAAAa,GAAA,gFACAa,EAAAC,IAAAyD,EAAA5D,UAAA8D,EAAA,2BAAA3E,MACA2E,EAAA,2BAAAxF,KAAAuD,QAAA8S,2BACAxV,EAAA2E,EAAA,gCAAAxF,KAAAQ,MAAA2rB,cACAtrB,IACA,OAAAjB,EAAA,cAAAwrB,EAAA,WAAAlrB,EAAA,UAAkEgrB,cAAAlrB,KAAAQ,MAAAsrB,uBAAAM,WAAApsB,KAAAQ,MAAAurB,kBAA4FzmB,GAAoB5D,UAAAE,IAClL5B,KAAAqsB,aACArsB,KAAAssB,qBACAtsB,KAAAQ,MAAAe,aAAA+C,EAAAtE,KAAAQ,MAAA+rB,eAGAjB,EAAAnrB,UAAAksB,WAAA,WACA,IAAAtrB,EAAAf,KAAAQ,MAAAmT,EAAA5S,EAAA4S,MAAApS,EAAAR,EAAAQ,QAAA0qB,EAAAlrB,EAAAkrB,KAAAC,EAAAnrB,EAAAmrB,aAAAC,EAAAprB,EAAAorB,cACAK,EAAAxsB,KAAAysB,0BACAC,EAAA9sB,EAAA,qBAAsD8B,UAAA8D,EAAA,sBAA0CymB,GAChGU,EAAA/sB,EAAA,cAAAgtB,EAAA,iBAAmErrB,UAAA4B,gBAAA,GAAyC,MAAA+oB,EAC5GQ,EACA9sB,EAAA,aAAAssB,EAAAD,EAAAtY,IAA6DA,WAC7D,OAAA3T,KAAAuD,QAAA8S,2BACAzW,EAAA,qBAAgD8B,UAAA8D,EAAA,kBAAAxC,MAAAipB,GAChDrsB,EAAA,qBAA4C8B,UAAA8D,EAAA,uBAC5C2mB,EACAK,GACA5sB,EAAA,cAAAyrB,EAAA,MACAzrB,EAAA,qBAA4C8B,UAAA8D,EAAA,wBAA4CmnB,IAGxF/sB,EAAA,qBAAgD8B,UAAA8D,EAAA,kBAAAxC,MAAAipB,GAChDE,EACAK,EACA5sB,EAAA,qBAA4C8B,UAAA8D,EAAA,wBAA4CmnB,KAGxFrB,EAAAnrB,UAAAmsB,mBAAA,WACA,UAAAtsB,KAAAQ,MAAA4B,SAGA,OAAAxC,EAAA,qBAA2C8B,UAAA8D,EAAA,sBAA0CxF,KAAAQ,MAAA4B,WAErFkpB,EAAAnrB,UAAAssB,wBAAA,WACA,IAAA1rB,EAAAf,KAAAQ,MAAAmT,EAAA5S,EAAA4S,MAAAqY,EAAAjrB,EAAAirB,SAAAa,EAAA9rB,EAAA8rB,aACA,GAAAznB,EAAA,MAAA0nB,WAAAD,GAAA,CAGA,IAOAhsB,EAPAe,EAAAC,IAAA2D,EAAA,0BAAA3E,MACA2E,EAAA,oBAAAxF,KAAA6D,MAAA0nB,SACA1qB,IACA,OAAAjB,EAAA,qBAA4C8B,UAAAE,GAC5ChC,EAAA,qBAAwC8B,UAAA8D,EAAA,qCACxC5F,EAAA,cAAAwF,EAAA,SAA0CrC,QAAA8pB,EAAAlZ,GAAA1K,SAAA7D,EAAA,SAAA8D,OAAAxH,UAAA8D,EAAA,cAAAsD,WAAwGC,iBAAmBC,kBAAA,WAAgC+jB,eAAA/sB,KAAAwrB,qBAAAwB,iBAAAhtB,KAAAyrB,wBACrM7rB,EAAA,cAAAwF,EAAA,MAA2CiE,KAAA2iB,QAG3CV,EAAAloB,cACAmoB,UAAA,EACAS,SAAA,gBAEAV,EAAA2B,aAAAC,EAAA,iCACA5B,EA7FA,CA8FClmB,EAAA;;;;mXC9GDI,EAAA9F,0BAAA,+DAUAytB,EAAA,SAAArtB,GAEA,SAAAqtB,EAAA3sB,EAAA+C,GACA,IAAAC,EAAA1D,EAAA2D,KAAAzD,KAAAQ,EAAA+C,IAAAvD,KAsBA,OArBAwD,EAAAW,WAAA,WACAX,EAAAQ,UAA4BF,WAAA,EAAAspB,UAAA5pB,EAAAK,MAAAwpB,aAE5B7pB,EAAAY,aAAA,SAAAC,GAEAb,EAAAQ,UAA4BF,WAAA,EAAAspB,eAAA9oB,IAC5Bd,EAAAe,eAAAf,EAAAhD,MAAAgE,SAAAH,IAEAb,EAAAiB,aAAA,SAAAJ,GACAb,EAAAQ,UAA4BopB,UAAA/oB,IAC5Bb,EAAAe,eAAAf,EAAAhD,MAAAkE,SAAAL,IAEAb,EAAAmB,cAAA,SAAAN,GACAb,EAAAQ,UAA4BF,WAAA,EAAAupB,UAAAhpB,EAAA+oB,eAAA9oB,IAC5Bd,EAAAe,eAAAf,EAAAhD,MAAAoE,UAAAP,IAEAb,EAAAK,OACAupB,UAAA5sB,EAAAyrB,KACAnoB,WAAA,EACAupB,UAAA7sB,EAAAyrB,MAEAzoB,EAiBA,OAzCAtD,EAAA,UAAAitB,EAAArtB,GA0BAqtB,EAAAhtB,UAAAkF,0BAAA,SAAAhF,GACA,IAAA4rB,EAAA5rB,EAAA4rB,KACAA,IAAAjsB,KAAAQ,MAAAyrB,MACAjsB,KAAAgE,UAA2BqpB,UAAApB,EAAAmB,UAAAnB,KAG3BkB,EAAAhtB,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAAkB,EAAAX,EAAAW,UAAAL,EAAAN,EAAAM,OAAA4qB,EAAAlrB,EAAAkrB,KACAprB,EAAAb,KAAA6D,MAAAC,EAAAjD,EAAAiD,UAAAspB,EAAAvsB,EAAAusB,UAAAC,EAAAxsB,EAAAwsB,UACA,OAAA7kB,EAAA,cAAAK,EAAA,cAAmDnH,UAAA6G,IAAA7G,EAAA8D,EAAA,qBAAA8nB,aAAArB,EAAA5qB,SAAAoE,SAAA,KAAAjB,SAAAxE,KAAAoE,aAAAM,SAAA1E,KAAAyE,aAAAG,UAAA5E,KAAA2E,cAAAe,OAAA1F,KAAAmE,WAAAwB,YAAA,GAAAC,kBAAA,EAAAvB,MAAAP,EAAAspB,EAAAC,KAEnDF,EAAAhtB,UAAAoE,eAAA,SAAAiC,EAAAnC,GACA,IAAAsP,EAAA3T,KAAAQ,MAAAmT,MACA9K,EAAA,MAAAlC,WAAAH,EAAAnC,EAAAsP,IAEAwZ,EA1CA,CA2CC3kB,EAAA;;;;s3BCrDD+kB,EAAA7tB,mBAAA,wDAeA8tB,GAAA,iCACAC,EAAA,SAAA3tB,GAEA,SAAA2tB,EAAAjtB,EAAA+C,GACA,IAAAC,EAAA1D,EAAA2D,KAAAzD,KAAAQ,EAAA+C,IAAAvD,KAkHA,OAjHAwD,EAAAkqB,oBAAA,SAAAvO,GACA,IAAAwO,EAAAnqB,EAAAhD,MAAAooB,mBAAAzJ,GACA,OAAA3b,EAAAhD,MAAA8pB,oBAAAqD,IAEAnqB,EAAAoqB,YAAA,SAAAzO,GAEA,OADA3b,EAAAqqB,gBAAArqB,EAAAkqB,oBAAAvO,GACA3b,EAAAhD,MAAAupB,SAAAvmB,EAAAqqB,kBAEArqB,EAAAsqB,uBAAA,SAAAhpB,EAAAipB,EAAAC,QACA,IAAAA,IAA2CA,GAAA,GAC3C,IAAAL,EAAAnqB,EAAAhD,MAAAkoB,kBAAAqF,EAAAE,SACA/P,EAAA1a,EAAAqqB,gBACA1P,EAAA3a,EAAAhD,MAAA8pB,oBAAAqD,GACA,OAAAK,EAAAxqB,EAAAhD,MAAAupB,SAAA5L,GAAA3a,EAAAhD,MAAAupB,SAAA7L,EAAAC,IAEA3a,EAAA0qB,wBAAA,SAAAppB,EAAAipB,GACA,IAAAJ,EAAAnqB,EAAAhD,MAAAkoB,kBAAAqF,EAAAE,SACAE,EAAA3qB,EAAAhD,MAAA8pB,oBAAAqD,GAAA,GACA,OAAAQ,EAAA,OAAA7pB,EAAA6pB,GAEA3qB,EAAA4qB,YAAA,WAGA,IAFA,IAAArtB,EAAAyC,EAAAhD,MAAA0d,EAAAnd,EAAAmd,WAAAC,EAAApd,EAAAod,SACA7J,KACAX,EAAAuK,EAAwCvK,GAAAwK,EAAmBxK,IAC3DW,EAAAxG,KAAAtK,EAAA6qB,cAAA1a,IAEA,OAAAW,GAEA9Q,EAAA6qB,cAAA,SAAA1a,GACA,IAAAiW,EAAApmB,EAAAhD,MAAAgoB,sBAAA7U,EAAAnQ,EAAAhD,MAAA2d,UAEA,OADA3a,EAAAhD,MAAA8Z,aAAA3G,GAAAnQ,EAAAhD,MAAAmqB,kBAAAnnB,EAAA8qB,YACA3a,EAAAiW,IAEApmB,EAAA8qB,WAAA,SAAA3a,EAAAiW,GACA,IA2BA/oB,EAAAC,EA3BAC,EAAAyC,EAAAhD,MAAAkqB,EAAA3pB,EAAA2pB,cAAA3N,EAAAhc,EAAAgc,gBACApZ,EAAAH,EAAAhD,MAAAsqB,mBAAAnX,GACA4a,EAAA,MAAA5qB,EAAAnD,MAAAe,QAAAoC,EAAAnD,MAAAe,QAAAiC,EAAAhD,MAAAe,QACA6qB,EAAA5oB,EAAAhD,MAAAgpB,eAAA7V,GACA6a,EAAAhrB,EAAAgrB,8BAAA7a,GAIA8a,IAAA3tB,GACAY,UAJA6G,IAAAqhB,IAAA/oB,MACA2E,EAAA,0BAAAgpB,EACA3tB,GAAA2C,EAAAhD,MAAAgqB,kBAAA7W,GAAAhQ,EAAAnD,MAAAkB,WAGAiS,UAEAnQ,EAAAhD,MAAAqqB,8BAAAuB,EACAtrB,EAAA0C,EAAAhD,MAAAoqB,iCAAA4D,EACA1tB,EAAAS,QAAAgtB,EACAztB,EAAAqrB,cAAA3oB,EAAAkrB,yBAAA/a,GACA7S,GAMA6tB,EAAAnmB,EAAA,cAAAomB,EAAA,gBAAqEC,wBAAArrB,EAAAhD,MAAAquB,wBAAAC,SAAAtrB,EAAAurB,yBAAA/R,YAAAxZ,EAAAhD,MAAAwc,YAAAgS,kBAAA,IAAAxpB,EAAA,6BAAAW,IAAAukB,EAAA/W,GAAAia,YAAApqB,EAAAoqB,YAAAqB,WAAAzrB,EAAAsqB,uBAAAoB,cAAA1rB,EAAAhD,MAAA0uB,cAAAC,YAAA3rB,EAAA4rB,8BAAAC,eAAA7rB,EAAA8rB,iCAAAvS,kBAAAwS,wBAAA/rB,EAAAhD,MAAA+uB,yBACrE/mB,EAAA,cAAAgnB,EAAA,WAAgDrE,YAAA3nB,EAAAhD,MAAA2qB,YAAAf,QAAA5mB,EAAAhD,MAAA4pB,QAAAD,QAAA3mB,EAAAhD,MAAA2pB,QAAApkB,cAJhD,WACA,OAAA8C,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAyoB,wBAAAtV,IAGgD8b,aAAAjsB,EAAAhD,MAAAivB,aAAAC,YALhD,SAAA5G,GAA2D,OAAAtlB,EAAAhD,MAAAqoB,gBAAAlV,EAAAmV,IAKX6G,cANhD,SAAA7G,GAA6D,OAAAtlB,EAAAhD,MAAA+oB,kBAAA5V,EAAAmV,IAMb8G,YAAApsB,EAAAhD,MAAAuqB,kBAAAjC,KAAAtlB,EAAAhD,MAAAiqB,YAAA9W,IAAmWnL,EAAA,aAAA7E,EAAA8qB,KACnZ,OAAAjrB,EAAAqsB,yBACAlB,EACAnrB,EAAAssB,sBAAAnc,EAAAgb,EAAAnrB,EAAAusB,4BAGAvsB,EAAA4rB,8BAAA,SAAArS,GACAvZ,EAAAhD,MAAA2uB,YAAApS,GACAvZ,EAAAQ,UAA4BgsB,mBAAA,KAE5BxsB,EAAA8rB,iCAAA,WACA9rB,EAAAqqB,gBAAA,KACArqB,EAAAQ,UAA4BgsB,mBAAA,KAE5BxsB,EAAAurB,yBAAA,SAAA5P,GACA,GAAA8Q,EAAA,WAAAC,WAAA/Q,GAIA,SAEA,IAAAgR,EAAA3sB,EAAAkqB,oBAAAvO,GACA,OAAA3b,EAAAgrB,8BAAA2B,IAEA3sB,EAAAusB,0BAAA,SAAA5Q,GAEA,IADA3b,EAAAurB,yBAAA5P,GAKA,SAEA,IAAAgR,EAAA3sB,EAAAkqB,oBAAAvO,GACA,OAAA3b,EAAAgrB,8BAAA2B,IAEA3sB,EAAAgrB,8BAAA,SAAA7a,GACA,IAAAoJ,EAAAvZ,EAAAhD,MAAAuc,gBAIA,OAAAvZ,EAAAhD,MAAA0qB,eAIA1nB,EAAAhD,MAAAgpB,eAAA7V,IACAnQ,EAAAK,MAAAmsB,mBACAzC,EAAA,QAAAzS,qBAAAiC,EAAA,MAAAvZ,EAAAhD,MAAA+pB,uBAKA,IAAAxN,EAAA3U,SAEA5E,EAAAqsB,0BAEArsB,EAAAK,OAAuBmsB,kBAAAxsB,EAAA4sB,uCAAA5vB,IACvBgD,EAkCA,OAtJAtD,EAAA,UAAAutB,EAAA3tB,GAsHA2tB,EAAAttB,UAAAkF,0BAAA,SAAAhF,GACAL,KAAAgE,UAAuBgsB,kBAAAhwB,KAAAowB,uCAAA/vB,MAEvBotB,EAAAttB,UAAAC,sBAAA,SAAAC,EAAA8E,GACA,OAAA0D,EAAA,MAAAtI,mBAAAP,KAAA6D,MAAAsB,KACA0D,EAAA,MAAAtI,mBAAAP,KAAAQ,MAAAH,GAAkEI,QAAA+sB,MAClE3kB,EAAA,MAAAnI,gBAAAV,KAAAQ,MAAAH,EAAAmtB,IAEAC,EAAAttB,UAAAS,OAAA,WACA,OAAAZ,KAAAQ,MAAAsnB,UAAA9nB,KAAAouB,gBAEAX,EAAAttB,UAAAiwB,uCAAA,SAAA5vB,GAEA,YADA,IAAAA,IAA+BA,EAAAR,KAAAQ,OAC/B,MAAAA,EAAAuc,iBAAAvc,EAAAuc,gBAAA3U,OAAA,GAEAqlB,EAAAttB,UAAA0vB,uBAAA,WAEA,OAAA7vB,KAAAqwB,kBAAArwB,KAAAQ,MAAA0qB,eAEAuC,EAAAttB,UAAAuuB,yBAAA,SAAA/a,GACA,OAAA3T,KAAA6vB,yBAEA7vB,KAAA8vB,sBAAAnc,EAAAnL,EAAA,qBAA4E9G,UAAA8D,EAAA,6BAC5EgD,EAAA,qBAA4C9G,UAAA8D,EAAA,sBAC5CgD,EAAA,cAAAK,EAAA,MAA+CQ,KAAA,4BAA+B,QAH9E/E,GAKAmpB,EAAAttB,UAAAkwB,eAAA,WACA,OAAArwB,KAAAQ,MAAA+pB,wBAAAgD,EAAA,kBAAA5R,cAEA8R,EAAAttB,UAAA2vB,sBAAA,SAAAnc,EAAAvR,EAAA0sB,GACA,OAAAtmB,EAAA,cAAA8nB,EAAA,iBAAsDxB,WAAA3oB,IAAAnG,KAAAQ,MAAAkqB,cAAA/W,GAAAia,YAAA5tB,KAAA4tB,YAAAqB,WAAAjvB,KAAAkuB,wBAAAqC,YAAAvwB,KAAAQ,MAAA+vB,YAAAC,aAAAxwB,KAAAQ,MAAAgwB,aAAArB,YAAAnvB,KAAAQ,MAAA2uB,YAAAD,cAAAlvB,KAAAQ,MAAA0uB,cAAAnS,gBAAA/c,KAAAQ,MAAAuc,gBAAAgN,SAAA/pB,KAAAQ,MAAAupB,UAA0W3nB,IAEhaqrB,EAvJA,CAwJCjlB,EAAA;;;;+WCxKDhD,EAAA9F,0BAAA,+DAUA+wB,EAAA,SAAA3wB,GAEA,SAAA2wB,IACA,IAAAjtB,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAIA,OAHAwD,EAAAK,OACA0nB,UAAA,GAEA/nB,EA4BA,OAlCAtD,EAAA,UAAAuwB,EAAA3wB,GAQA2wB,EAAAtwB,UAAAC,sBAAA,SAAAC,GACA,OAAA+E,EAAA,MAAA7E,mBAAAP,KAAAQ,MAAAH,GAAsEI,SAAA,aACtE2E,EAAA,MAAA1E,gBAAAV,KAAAQ,MAAAH,GAAA,WAEAowB,EAAAtwB,UAAAoW,kBAAA,SAAAzR,GACA,IAAA+nB,EAAA7sB,KAAAQ,MAAAqsB,aACA,OAAAznB,EAAA,MAAA0nB,WAAAD,GAEAA,EAAA7sB,KAAAQ,MAAAmT,YAGA,GAGA8c,EAAAtwB,UAAAS,OAAA,WACA,IAMAG,EANAa,EAAAC,IAAA2D,EAAA,eAAAzE,MACAyE,EAAA,qBAAAxF,KAAAQ,MAAA+qB,UAAAvrB,KAAA6D,MAAA0nB,SACAxqB,EAAAyE,EAAA,uBAAAxF,KAAAQ,MAAA4rB,WACArrB,EAAAqE,EAAA,QAAApD,SAAAhC,KAAAQ,MAAAe,QACAR,GAAAf,KAAAQ,MAAAkB,WACA,OAAA9B,EAAA,qBAA4C8B,UAAAE,EAAAjB,MAAAX,KAAAQ,MAAAG,OAA8CX,KAAAQ,MAAA4B,WAG1FquB,EAAAvwB,EAAA,YACAkF,EAAA,mBACAqrB,GAlCA,CAoCC7wB,EAAA;;;;otBC9CD8wB,EAAAhxB,wBAAA,sEAaAixB,EAAA,SAAA7wB,GAEA,SAAA6wB,IACA,IAAAntB,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAwDA,OAvDAwD,EAAAskB,UAAA,SAAAxT,GACA,IAAAvT,EAAAyC,EAAAhD,MAAA8Y,EAAAvY,EAAAuY,cACAsX,EADA7vB,EAAAinB,KACA/O,UAAArW,OACAiuB,EAAArtB,EAAAhD,MAAAwnB,KAAA7P,0BAAAmB,GACA3Y,GAGAiC,OAAAguB,EAAAC,EAGA3I,UAAA,eAAA2I,GAAA,UAIA,OAAAjxB,EAAA,qBAAgDe,OAASiC,OAAAguB,IACzDhxB,EAAA,qBAA4C8B,UAAAI,EAAA,kCAAAnB,SAAqE2T,KAEjH9Q,EAAAstB,kBAAA,SAAAzI,EAAAC,GACA,IAAAC,EAAA/kB,EAAAhD,MAAA+nB,QACA,aAAAA,IAAAuI,kBAAAzI,EAAAC,GAAA,MAEA9kB,EAAAglB,sBAAA,SAAA7U,EAAAwK,GACA,OAAA3a,EAAAhD,MAAAwnB,KAAAzN,kBAAA5G,EAAA,EAAAwK,EAAA,IAEA3a,EAAAutB,aAAA,SAAApd,GACA,OAAAnQ,EAAAhD,MAAAwnB,KAAAjP,WAAApF,GAAA/Q,QAEAY,EAAAklB,kBAAA,SAAAC,GACA,OAAAA,EAAA,IAEAnlB,EAAAolB,mBAAA,SAAAzJ,GACA,OAAAA,EAAA0D,SAEArf,EAAAqlB,gBAAA,SAAAlV,EAAAmV,GACAtlB,EAAAhD,MAAAuoB,cAAA,MACAvlB,EAAAhD,MAAAwwB,mBAAArd,EAAAmV,IAEAtlB,EAAA+lB,kBAAA,SAAA5V,EAAAmV,GACA,IAAA3P,EAAA3V,EAAAhD,MAAAwnB,KAAAjP,WAAApF,GACAnQ,EAAAhD,MAAAuoB,eAAA5P,EAAAV,IAAAqQ,KAEAtlB,EAAAgmB,eAAA,SAAA7V,GACA,OAAAsd,EAAA,QAAAC,WAAA1tB,EAAAhD,MAAAuc,gBAAApJ,IAEAnQ,EAAA8W,aAAA,SAAA3G,GACA,OAAAnQ,EAAAhD,MAAAwnB,KAAA1N,aAAA3G,GAAA,IAEAnQ,EAAAmmB,gBAAA,SAAAhW,EAAAiW,GACA,IAAAzQ,EAAA3V,EAAAhD,MAAAwnB,KAAApP,iBAAAjF,EAAA,GACA,OAAA/T,EAAA,cAAA8wB,EAAA,eAAwDhvB,UAAAG,IAAA+nB,GAAAjW,QAAAxN,IAAArE,EAAA,cAAA6R,GAAApS,QAAAiC,EAAAhD,MAAAe,QAAAZ,OAA+HiC,OAAAuW,EAAAvW,OAAA,SAEvLY,EAAAumB,SAAA,SAAAC,EAAAC,GAEA,OAAAgH,EAAA,QAAAtc,IAAAqV,EAAAC,IAEAzmB,EAiBA,OA3EAtD,EAAA,UAAAywB,EAAA7wB,GA4DA6wB,EAAAxwB,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAEA0pB,GAAAnpB,EAAAiwB,mBAAAjwB,EAAAowB,uBAEAhH,EAAAppB,EAAAqwB,aAAAhH,EAAArpB,EAAAswB,aAEAnT,GAFAnd,EAAAuwB,iBAEAvwB,EAAAuY,eAAA6E,EAAApd,EAAAwY,YAEAjU,EAAApF,EAAA,OAAAa,GAAA,8HACA,OAAAnB,EAAA,cAAA2xB,EAAA,OAAArxB,EAAA,UAA8DoqB,oBAAAtqB,KAAA8wB,kBAAAvG,sBAAA0G,EAAA,kBAAApV,UAAA2M,sBAAAxoB,KAAAwoB,sBAAAgC,kBAAA1oB,EAAA,kBAAA2oB,YAAAzqB,KAAA+wB,aAAArI,kBAAA1oB,KAAA0oB,kBAAAgC,cAAA5oB,EAAA,cAAA8mB,mBAAA5oB,KAAA4oB,mBAAA+B,kBAAA3qB,KAAA2pB,gBAAAd,gBAAA7oB,KAAA6oB,gBAAAU,kBAAAvpB,KAAAupB,kBAAAqB,gCAAA,sBAAAC,6BAAA,gBAAAC,mBAAAZ,EAAA/L,WAAAD,aAAAsL,eAAAxpB,KAAAwpB,eAAAlP,aAAAta,KAAAsa,aAAA8P,UAAAD,UAAAY,kBAAAyG,EAAA,YAAAC,WAAA1U,mBAAAgN,SAAA/pB,KAAA+pB,SAAAjC,UAAA9nB,KAAA8nB,WAAm3BxiB,KAEj7BqrB,EAAAvtB,cACA+tB,sBAAAO,GAEAf,EA5EA,CA6EC/wB,EAAA,WAMD,SAAA8xB,EAAAjrB,GACA,OAAA7G,EAAA,cAAA8wB,EAAA,eAA+C/c,MAAAlN,EAAAwlB,KAAA,IAAAxlB,EAAA;;;;ufCjG/CkrB,EAAAjyB,qBAAA,mEAWAkyB,EAAA,SAAA9xB,GAEA,SAAA8xB,IACA,cAAA9xB,KAAAC,MAAAC,KAAAC,YAAAD,KAeA,OAjBAE,EAAA,UAAA0xB,EAAA9xB,GAIA8xB,EAAAzxB,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAIA8E,GAFAvE,EAAA8wB,oBAAA9wB,EAAA+wB,cAEA5xB,EAAA,OAAAa,GAAA,yCACA,OAAAiK,EAAA,cAAA2mB,EAAA,WAAAzxB,EAAA,UAAkEgrB,cAAAlrB,KAAAQ,MAAAqxB,oBAAAzF,WAAApsB,KAAAQ,MAAAsxB,eAAsFxsB,GACxJ0F,EAAA,qBAAwCtJ,UAAAI,EAAA,gBACxCkJ,EAAA,cAAA+mB,EAAA,iBAAsDxwB,QAAA+D,EAAA/D,SACtDyJ,EAAA,qBAAgDtJ,UAAAI,EAAA,qBAAyCwD,EAAA2mB,QACzFjsB,KAAAQ,MAAA4B,SACAkD,EAAA/D,aAAA+C,EAAAgB,EAAAinB,eAEAqF,EAlBA,CAmBClQ,EAAA;;;;m1GC9BDhiB,EAAAuO,EAAAC,EAAA,0BAAA8jB,EAAA;;;;uECAAtyB,EAAAuO,EAAAC,EAAA,+BAAA+jB,IAKA,IAAAA,EAAA,WACA,SAAAA,IACA,IAAAzuB,EAAAxD,KACAA,KAAAkyB,gBAAA,SAAA/S,GAEA,IADA3b,EAAA2uB,mBAAAhT,GACA,MAAA3b,EAAA4uB,SAAA,MAAA5uB,EAAA4uB,QAAAtsB,cAEA,IADAtC,EAAA4uB,QAAAtsB,WAAAqZ,GAEA,OAGA3b,EAAA6uB,aAAA,EACA7uB,EAAA8uB,qBAAAnT,GAIA3b,EAAA+uB,+BACA/uB,EAAAgvB,gCAEAxyB,KAAAyyB,gBAAA,SAAAtT,GAKA,GAJA3b,EAAA8uB,qBAAAnT,GACA3b,EAAA6uB,cACA7uB,EAAAkvB,YAAA,GAEAlvB,EAAAkvB,WAAA,CACA,IAAA3E,EAAAvqB,EAAAmvB,qBAAAxT,GACA,MAAA3b,EAAA4uB,SAAA,MAAA5uB,EAAA4uB,QAAAQ,YACApvB,EAAA4uB,QAAAQ,WAAAzT,EAAA4O,KAIA/tB,KAAA6yB,cAAA,SAAA1T,GAEA,GADA3b,EAAA8uB,qBAAAnT,GACA,MAAA3b,EAAA4uB,QACA,GAAA5uB,EAAAkvB,WAAA,CACA,IAAA3E,EAAAvqB,EAAAmvB,qBAAAxT,GACA,MAAA3b,EAAA4uB,QAAAQ,YACApvB,EAAA4uB,QAAAQ,WAAAzT,EAAA4O,GAEA,MAAAvqB,EAAA4uB,QAAAU,WACAtvB,EAAA4uB,QAAAU,UAAA3T,EAAA4O,QAGAvqB,EAAA6uB,cACA,MAAA7uB,EAAA4uB,QAAArsB,cACA,MAAAvC,EAAAuvB,wBAIAvvB,EAAAuvB,wBAAAxd,OAAAyd,WAAA,kBACAxvB,EAAAuvB,wBACA,MAAAvvB,EAAA4uB,QAAA9oB,SACA9F,EAAA4uB,QAAA9oB,QAAA6V,IAE6B8S,EAAAgB,4BAM7B1d,OAAA2d,aAAA1vB,EAAAuvB,gCACAvvB,EAAAuvB,wBACAvvB,EAAA4uB,QAAArsB,cAAAoZ,IAGA,MAAA3b,EAAA4uB,QAAA9oB,SACA9F,EAAA4uB,QAAA9oB,QAAA6V,IAIA3b,EAAA6uB,aAAA,EACA7uB,EAAAkvB,YAAA,EACAlvB,EAAA+uB,gCA6EA,OAnEAN,EAAA/B,WAAA,SAAA/Q,GACA,OAAAA,EAAAG,SAAAH,EAAAE,SAEA4S,EAAA9xB,UAAAgzB,OAAA,SAAA3S,EAAA4R,GAOA,OANApyB,KAAAozB,SACApzB,KAAAoyB,UACApyB,KAAAwgB,UACAxgB,KAAAqzB,mBAAAjB,IACApyB,KAAAwgB,QAAA9K,iBAAA,YAAA1V,KAAAkyB,iBAEAlyB,MAEAiyB,EAAA9xB,UAAAizB,OAAA,WACA,MAAApzB,KAAAwgB,UACAxgB,KAAAwgB,QAAA8S,oBAAA,YAAAtzB,KAAAkyB,iBACAlyB,KAAAuyB,iCAGAN,EAAA9xB,UAAAkzB,mBAAA,SAAAjB,GACA,aAAAA,IACA,MAAAA,EAAAtsB,YACA,MAAAssB,EAAAQ,YACA,MAAAR,EAAAU,WACA,MAAAV,EAAA9oB,SACA,MAAA8oB,EAAArsB,gBAEAksB,EAAA9xB,UAAAqyB,6BAAA,WACAhe,SAAAkB,iBAAA,YAAA1V,KAAAyyB,iBACAje,SAAAkB,iBAAA,UAAA1V,KAAA6yB,gBAEAZ,EAAA9xB,UAAAoyB,6BAAA,WACA/d,SAAA8e,oBAAA,YAAAtzB,KAAAyyB,iBACAje,SAAA8e,oBAAA,UAAAtzB,KAAA6yB,gBAEAZ,EAAA9xB,UAAAgyB,mBAAA,SAAAhT,GACAnf,KAAAuzB,uBAAApU,EAAAwD,QAAAxD,EAAA0D,SACA7iB,KAAAwzB,gBAAAxzB,KAAAuzB,uBAEAtB,EAAA9xB,UAAAwyB,qBAAA,SAAAxT,GACA,IAAAsU,GAAAtU,EAAAwD,QAAAxD,EAAA0D,SACA6Q,GACAD,EAAA,GAAAzzB,KAAAwzB,gBAAA,GACAC,EAAA,GAAAzzB,KAAAwzB,gBAAA,IAEAG,GACAF,EAAA,GAAAzzB,KAAAuzB,sBAAA,GACAE,EAAA,GAAAzzB,KAAAuzB,sBAAA,IAEAjQ,GACAsQ,WAAA5zB,KAAAuzB,sBACAtF,QAAAwF,EACAjS,MAAAkS,EACAG,KAAA7zB,KAAAwzB,gBACAM,OAAAH,GAGA,OADA3zB,KAAAwzB,iBAAArU,EAAAwD,QAAAxD,EAAA0D,SACAS,GAEA2O,EAAA9xB,UAAAmyB,qBAAA,SAAAnT,GACAnf,KAAAoyB,QAAApsB,gBACAmZ,EAAAnZ,iBAEAhG,KAAAoyB,QAAAnsB,iBACAkZ,EAAAlZ,mBAGAgsB,EAAAgB,0BAAA,IACAhB,EArJA;;;;kWCLA8B,EAAAr0B,qBAAA,wEAUAs0B,GAAA,oCA0BAC,EAAA,SAAAn0B,GAEA,SAAAm0B,IACA,cAAAn0B,KAAAC,MAAAC,KAAAC,YAAAD,KAuBA,OAzBAE,EAAA,UAAA+zB,EAAAn0B,GAIAm0B,EAAA9zB,UAAAS,OAAA,WACA,OAAAhB,EAAA,SAAAkiB,KAAA9hB,KAAAQ,MAAA4B,WAEA6xB,EAAA9zB,UAAA+E,mBAAA,SAAAgvB,GACA,IAAAC,GAA8BC,QAAAJ,GAC9Bh0B,KAAAq0B,SAAAxrB,EAAA,MAAAtI,mBAAA2zB,EAAAl0B,KAAAQ,MAAA2zB,IACAn0B,KAAAq0B,OAAAlB,OAAAmB,EAAA,YAAAt0B,WAAAQ,QAGAyzB,EAAA9zB,UAAA6E,kBAAA,WACAhF,KAAAq0B,OAAA,IAAAN,EAAA,WACA/zB,KAAAq0B,OAAAlB,OAAAmB,EAAA,YAAAt0B,WAAAQ,QAEAyzB,EAAA9zB,UAAAo0B,qBAAA,WACAv0B,KAAAq0B,OAAAjB,gBACApzB,KAAAq0B,QAEAJ,EAAA7wB,cACA4C,gBAAA,EACAC,iBAAA,GAEAguB,EA1BA,CA2BCr0B,EAAA;;;;2ZC/DD40B,EAAA90B,sBAAA,wDAUA+0B,EAAA,SAAA30B,GAEA,SAAA20B,IACA,IAAAjxB,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAQA,OAPAwD,EAAAkxB,YAAA,WACA,IAAA3zB,EAAAyC,EAAAhD,MAAA+C,EAAAxC,EAAAwC,QAAAoxB,EAAA5zB,EAAA4zB,YAAAC,EAAA7zB,EAAA6zB,OACAtgB,EAAA/Q,EAAAsxB,iBACAC,EAAAN,EAAA,QAAAO,eAAAzgB,EAAAqgB,GACAK,EAAAC,EAAA,UAAA5gB,UAAAygB,GACAjsB,EAAA,MAAAlC,WAAAiuB,EAAAI,IAEAxxB,EAMA,OAhBAtD,EAAA,UAAAu0B,EAAA30B,GAYA20B,EAAAt0B,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAA00B,GAAAn0B,EAAAwC,QAAAxC,EAAA4zB,YAAA5zB,EAAA6zB,OAAA10B,EAAA,OAAAa,GAAA,oCACA,OAAAnB,EAAA,cAAAiJ,EAAA,SAAA3I,EAAA,YAAgEg1B,GAAkB5rB,QAAAtJ,KAAA00B,gBAElFD,EAjBA,CAkBC70B,EAAA;;;;+XC5BDF,EAAAuO,EAAAC,EAAA,gCAAAinB,EAAA;;;;kHCAA,IAAA5V,EAAA7f,sBAAA,wDAMA01B,EAAA,WACA,SAAAA,EAAAzJ,EAAA5O,EAAA1E,EAAAJ,GACAjY,KAAA2rB,SACA3rB,KAAA+c,kBACA/c,KAAAqY,UACArY,KAAAiY,UACAjY,KAAAq1B,QAAA9V,EAAA,QAAA+V,eAAAvY,EAAA4O,GAAA5O,GAAA4O,GAcA,OAZAyJ,EAAAj1B,UAAAo1B,UAAA,WACA,OAAAv1B,KAAA2rB,QAEAyJ,EAAAj1B,UAAAq1B,mBAAA,WACA,OAAAx1B,KAAA+c,iBAEAqY,EAAAj1B,UAAAs1B,WAAA,WACA,OAAAz1B,KAAAq1B,SAEAD,EAAAj1B,UAAA00B,eAAA,WACA,OAAAtV,EAAA,QAAAmW,qBAAA11B,KAAAq1B,QAAAr1B,KAAAqY,QAAArY,KAAAiY,UAEAmd,EApBA;;;;ydCNAO,EAAAj2B,oBAAA,uEAWAk2B,EAAA,SAAA91B,GAEA,SAAA81B,IACA,IAAApyB,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KA4DA,OA3DAwD,EAAAqyB,eAAA,SAAA1W,GACA,GAAA3b,EAAAsyB,sBAAA3W,GACA,SAEA,IAAAvE,EAAApX,EAAAhD,MAAAotB,YAAAzO,GACA,IAAAqV,EAAA,QAAAuB,QAAAnb,GACA,SAEA,IAAAmF,EAAAyU,EAAA,QAAA1Z,qBAAAF,GACAyV,EAAAtQ,IAAAyU,EAAA,kBAAA7Y,aACAqa,EAAAjW,IAAAyU,EAAA,kBAAA3Y,UACA,IAAAwU,IAAA2F,EACA,SAEA,IAAAjZ,EAAAvZ,EAAAhD,MAAAuc,gBACAkZ,EAAAzB,EAAA,QAAA0B,qBAAAnZ,EAAAnC,GACA,GAAAqb,GAAA,GACA,IAAAE,EAAApZ,EAAAkZ,GACA,GAAAzB,EAAA,QAAA1Z,qBAAAqb,KAAApW,EAEA,SAGA,IAAAqW,EAAAJ,EAAAG,EAAAnb,KAAAmb,EAAAjb,KACA1X,EAAA6yB,yBAAAD,EAAA,GAIA5yB,EAAA8yB,qBAAAF,EAAA,GAAAA,EAAA,SAEA,CAEA5yB,EAAA+yB,kBAAA3b,GACA,IAAA4b,EAAAR,EAAApb,EAAAI,KAAAJ,EAAAM,KACA1X,EAAA6yB,yBAAAG,EAAA,GACAhzB,EAAA8yB,qBAAAE,EAAA,GAAAA,EAAA,KAEA,UAEAhzB,EAAAizB,eAAA,SAAAtX,EAAA4O,GACA,IAAAvH,EAAAhjB,EAAA6yB,yBACAlI,EAAA3qB,EAAAhD,MAAAyuB,WAAA9P,EAAA4O,GACA3lB,EAAA5E,EAAA8yB,qBACAI,EAAAC,EAAA,MAAApQ,2BAAAC,EAAA2H,EAAA/lB,GACA5E,EAAAhD,MAAAgwB,aAAAhK,EAAAkQ,EAAAtuB,IAEA5E,EAAAozB,cAAA,SAAAzX,EAAA4O,GACA,IAAAvH,EAAAhjB,EAAA6yB,yBACAlI,EAAA3qB,EAAAhD,MAAAyuB,WAAA9P,EAAA4O,GACA3lB,EAAA5E,EAAA8yB,qBACAI,EAAAC,EAAA,MAAApQ,2BAAAC,EAAA2H,EAAA/lB,GACA5E,EAAAhD,MAAA+vB,YAAA/J,EAAAkQ,EAAAtuB,GAEA,IAAA4V,EAAAxa,EAAAhD,MAAAupB,SAAA2M,IAAAtuB,EAAA,GACA5E,EAAA+yB,kBAAAvY,GAEAxa,EAAA6yB,8BAAA/xB,EACAd,EAAA8yB,0BAAAhyB,GAEAd,EA+BA,OA7FAtD,EAAA,UAAA01B,EAAA91B,GAgEA81B,EAAAz1B,UAAAS,OAAA,WACA,IAAAi2B,EAAA72B,KAAA82B,oBACA,OAAAl3B,EAAA,cAAA+1B,EAAA,UAAAz1B,EAAA,YAAkE22B,GAAmB7wB,gBAAA,IAAwBhG,KAAAQ,MAAA4B,WAE7GwzB,EAAAz1B,UAAA22B,kBAAA,WACA,aAAA92B,KAAAQ,MAAA+vB,gBAGAzqB,WAAA9F,KAAA61B,eACA/C,UAAA9yB,KAAA42B,cACAhE,WAAA5yB,KAAAy2B,iBAGAb,EAAAz1B,UAAA21B,sBAAA,SAAA3W,GACA,IAAA2P,EAAA9uB,KAAAQ,MAAAsuB,SACAiI,EAAAluB,EAAA,MAAAikB,WAAAgC,GAAAjmB,EAAA,MAAAlC,WAAAmoB,EAAA3P,GAAA2P,EACA,OAAA6H,EAAA,MAAAzP,YAAA/H,IAAA4X,GAEAnB,EAAAz1B,UAAAo2B,kBAAA,SAAA3b,GACA,IAAAoc,GAAApc,GACA/R,EAAA,MAAAnI,gBAAAs2B,EAAAh3B,KAAAQ,MAAAuc,mBACA/c,KAAAQ,MAAA2uB,YAAA6H,GAEAh3B,KAAAQ,MAAA0uB,cAAAhvB,EAAA,YAAwDs0B,EAAA,QAAAjX,kCAAA3C,IAAsDqC,oBAAA,OAG9G2Y,EAAAxyB,cACA2Z,oBAEA6Y,EA9FA,CA+FCh2B,EAAA;;;;+SC1GDq3B,EAAAv3B,uBAAA,0EASAw3B,EAAA,SAAAp3B,GAEA,SAAAo3B,EAAA12B,EAAA+C,GACA,IAAAC,EAAA1D,EAAA2D,KAAAzD,KAAAQ,EAAA+C,IAAAvD,KACAwD,EAAA2zB,aAAA,SAAAC,EAAA5V,GACAhe,EAAA6zB,WAAA7V,GACA,MAAAhe,EAAAhD,MAAAmvB,eACAnsB,EAAAhD,MAAAmvB,cAAAnsB,EAAAK,MAAAilB,OAGAtlB,EAAAksB,YAAA,SAAA0H,GAEA5zB,EAAAQ,UAA4BszB,cAAA9zB,EAAAK,MAAAilB,OAC5B,MAAAtlB,EAAAhD,MAAAkvB,aACAlsB,EAAAhD,MAAAkvB,YAAAlsB,EAAAK,MAAAilB,OAGA,IAAAA,EAAAtoB,EAAAsoB,KAKA,OAJAtlB,EAAAK,OACAilB,OACAwO,cAAAxO,GAEAtlB,EAqDA,OA1EAtD,EAAA,UAAAg3B,EAAAp3B,GAuBAo3B,EAAA/2B,UAAAkF,0BAAA,SAAAhF,GACA,IAAAyoB,EAAAzoB,EAAAyoB,KACA9oB,KAAAgE,UACA8kB,OACAwO,cAAAxO,KAGAoO,EAAA/2B,UAAAS,OAAA,WACA,IAAAyB,EAAA2I,EAAA,SAAA8W,KAAA9hB,KAAAQ,MAAA4B,UACAzB,EAAAT,EAAA,YAAuCmC,EAAA7B,MAAAG,MAAAX,KAAAu3B,YACvC,QAAAv3B,KAAAQ,MAAA2qB,YACA,OAAAngB,EAAA,aAAA3I,GAA8C1B,UAE9C,IAAA4rB,EAAAvsB,KAAAw3B,qBACA,OAAAxsB,EAAA,aAAA3I,GAA0C1B,QAAA4rB,kBAE1C2K,EAAA/2B,UAAAq3B,mBAAA,WACA,IAAAz2B,EAAAf,KAAAQ,MAAAivB,EAAA1uB,EAAA0uB,aAAA1pB,EAAAhF,EAAAgF,cAAA6pB,EAAA7uB,EAAA6uB,YACA,OAAA5kB,EAAA,cAAAisB,EAAA,cAAmD9wB,IAAA,gBAAAJ,gBAAA0pB,eAAAC,YAAA1vB,KAAA0vB,YAAAyH,aAAAn3B,KAAAm3B,aAAAvH,iBAMnDsH,EAAA/2B,UAAAo3B,SAAA,WACA,OAAAv3B,KAAAQ,MAAAovB,cAAAqH,EAAA,YAAAhM,UAEApB,UAAA7pB,KAAA6D,MAAAilB,KAAA,KACArjB,SAAA,MACA3C,MAAA9C,KAAA6D,MAAAilB,KAAA,OAKAe,UAAA7pB,KAAA6D,MAAAilB,KAAA,KACAlmB,OAAA5C,KAAA6D,MAAAilB,KAAA,KACA2O,UAAA,QAIAP,EAAA/2B,UAAAk3B,WAAA,SAAAvD,GACA,IAAAwD,EAAAt3B,KAAA6D,MAAAyzB,cAAAxD,EACA9zB,KAAAgE,UACA8kB,KAAA4O,EAAA,MAAApR,MAAAgR,EAAAt3B,KAAAQ,MAAA2pB,QAAAnqB,KAAAQ,MAAA4pB,SACAkN,mBAGAJ,EAAA9zB,cACA+nB,aAAA,EACAhB,QAAA,GAEA+M,EA3EA,CA4EClsB,EAAA;;;;+KC3ED2sB,uQAVAC,EAAAl4B,oBAAA,wEAWA,SAAAi4B,GACAA,IAAA,2BACAA,IAAA,uBAFA,CAGCA,WACD,IAAAE,EAAA,SAAA/3B,GAEA,SAAA+3B,IACA,IAAAr0B,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAuCA,OAtCAwD,EAAAK,OACA6uB,YAAA,GAEAlvB,EAAAqyB,eAAA,SAAA1W,GAKA,OAJA3b,EAAAQ,UAA4B0uB,YAAA,IAC5BlvB,EAAAhD,MAAAivB,cAAA,GACAtQ,EAAAlZ,kBACAkZ,EAAA2Y,4BACA,GAEAt0B,EAAAizB,eAAA,SAAA3xB,EAAAipB,GACA,IAAAgK,EAAAv0B,EAAAhD,MAAAovB,YACA,MAAApsB,EAAAhD,MAAA22B,cACA3zB,EAAAhD,MAAA22B,aAAApJ,EAAA+F,OAAAiE,GAAAhK,EAAAvM,MAAAuW,KAGAv0B,EAAAozB,cAAA,SAAA9xB,EAAAipB,GACA,IAAAgK,EAAAv0B,EAAAhD,MAAAovB,YACApsB,EAAAQ,UAA4B0uB,YAAA,IAC5BlvB,EAAAhD,MAAAivB,cAAA,GACA,MAAAjsB,EAAAhD,MAAA22B,cACA3zB,EAAAhD,MAAA22B,aAAApJ,EAAA+F,OAAAiE,GAAAhK,EAAAvM,MAAAuW,IAEA,MAAAv0B,EAAAhD,MAAAkvB,aACAlsB,EAAAhD,MAAAkvB,YAAA3B,EAAA+F,OAAAiE,KAGAv0B,EAAAkxB,YAAA,SAAA5vB,GACAtB,EAAAQ,UAA4B0uB,YAAA,IAC5BlvB,EAAAhD,MAAAivB,cAAA,IAEAjsB,EAAAw0B,kBAAA,SAAAlzB,GACAtB,EAAAQ,UAA4B0uB,YAAA,IAC5BlvB,EAAAhD,MAAAivB,cAAA,GACA,MAAAjsB,EAAAhD,MAAAuF,eACAvC,EAAAhD,MAAAuF,iBAGAvC,EAoBA,OA7DAtD,EAAA,UAAA23B,EAAA/3B,GA2CA+3B,EAAA13B,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAA22B,EAAAp2B,EAAAo2B,aAAAzH,EAAA3uB,EAAA2uB,YAAA3pB,EAAAhF,EAAAgF,cAAA6pB,EAAA7uB,EAAA6uB,YACA,SAAAuH,GAAA,MAAAzH,GAAA,MAAA3pB,EAAA,CAGA,IAWAlF,EAAAC,EAXAm3B,EAAAp2B,IAAAC,EAAA,6BAAAjB,MACAiB,EAAA,gBAAA9B,KAAA6D,MAAA6uB,WACA7xB,EAAAiB,EAAA,yBAAA8tB,IAAA+H,EAAAlG,WACA5wB,EAAAiB,EAAA,uBAAA8tB,IAAA+H,EAAA1M,SACApqB,GAAAb,KAAAQ,MAAAkB,WACAw2B,EAAAr2B,IAAAC,EAAA,sBAAAhB,MACAgB,EAAA,gBAAA9B,KAAA6D,MAAA6uB,WACA5xB,IACA,OAAAlB,EAAA,cAAAg4B,EAAA,WAAgD9xB,WAAA9F,KAAA61B,eAAAvsB,QAAAtJ,KAAA00B,YAAA3uB,cAAA/F,KAAAg4B,kBAAAlF,UAAA9yB,KAAA42B,cAAAhE,WAAA5yB,KAAAy2B,gBAChD72B,EAAA,qBAAwC8B,UAAAu2B,GACxCr4B,EAAA,qBAA4C8B,UAAAw2B,QAG5CL,EA9DA,CA+DCj4B,EAAA;;;;oHC9ED,IAAAu4B,EAAAz4B,0BAAA,+DAgBA04B,EAAA,WACA,SAAAA,KAiEA,OA/DAA,EAAAjF,OAAA,SAAA3S,EAAAha,GACA,IAAA6xB,EAAAD,EAAAE,SAAA9xB,GACA+xB,EAAA/jB,SAAAC,cAAA,OACA8jB,EAAA72B,UAAAy2B,EAAA,oBACAI,EAAA53B,MAAA63B,QAAAJ,EAAAK,oBACAF,EAAAG,UAAAN,EAAAO,mBACAnY,EAAA3L,YAAA0jB,GACA,WAAA/S,iBAAAhF,EAAA,MAAAmF,iBAAA,cACAnF,EAAA7f,MAAAsI,SAAA,YAEA,IAYA2vB,EACAC,EAbAC,EAAAP,EAAAQ,WAAA,GACAC,EAAAF,EAAAC,WAAA,GACAE,EAAAV,EAAAQ,WAAA,GACArtB,EAAA,WACAstB,EAAAr4B,MAAAmC,MAAA,WACAk2B,EAAAr4B,MAAAiC,OAAA,WACAk2B,EAAA7Y,WAAA,IACA6Y,EAAA9Y,UAAA,IACAiZ,EAAAhZ,WAAA,IACAgZ,EAAAjZ,UAAA,KAEAtU,IAGA,IAAAwtB,EAAA,WACA,IAAAC,EAAA3Y,EAAAE,YACA0Y,EAAA5Y,EAAAC,aACA0Y,IAAAP,GAAAQ,IAAAP,IACAD,EAAAO,EACAN,EAAAO,EACAf,EAAAgB,WAEA3tB,KAIA,OAFAotB,EAAApjB,iBAAA,SAAAwjB,GACAD,EAAAvjB,iBAAA,SAAAwjB,GACA,WACA1Y,EAAAvK,YAAAsiB,GACAF,EAAAiB,WAAA,IAGAlB,EAAAE,SAAA,SAAA9xB,GACA,IAAA+yB,GACAD,WAAA,EACAD,QAAA,WACAE,EAAAnW,WAAAmW,EAAAD,YAGAC,EAAAnW,WAAA,EACAK,sBAAA,WACA8V,EAAAnW,WAAA,EACAmW,EAAAD,WACA9yB,QAIA4c,WAAA,GAEA,OAAAmW,GAEAnB,EAAAK,oBAAA,+GAEAL,EAAAO,mBAAA,eAAAR,EAAA,gDAAAC,EAAAK,oBAAA,yGAA8NN,EAAA,uCAAAC,EAAAK,oBAAA,wHAC9NL,EAlEA;;;;8yBChBAoB,EAAA95B,oBAAA,uEAcA+5B,EAAA,SAAA35B,GAEA,SAAA25B,IACA,IAAAj2B,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KA0IA,OAzIAwD,EAAAk2B,8BAAA,EACAl2B,EAAAqyB,eAAA,SAAA1W,GACA,IAAApe,EAAAyC,EAAAhD,MAAAotB,EAAA7sB,EAAA6sB,YAAA7Q,EAAAhc,EAAAgc,gBAAAwS,EAAAxuB,EAAAwuB,wBACA,GAAA/rB,EAAAsyB,sBAAA3W,GACA,SAEA,IAAAvE,EAAAgT,EAAAzO,GACA,IAAAsK,EAAA,QAAAsM,QAAAnb,GACA,SAEA,MAAA2U,IACA3U,EAAA2U,EAAA3U,EAAAuE,IAEA,IAAAwa,EAAAlQ,EAAA,QAAAmQ,mBAAA7c,EAAAnC,GACAif,GAAA,IAAAF,EACA,OAAAE,GAAAC,EAAA,WAAA5J,WAAA/Q,IACA3b,EAAAu2B,4BAAAJ,IAIA,IAIAE,EACAr2B,EAAAw2B,mCAAAL,GAEAn2B,EAAAy2B,sBAAA9a,GACA3b,EAAA02B,sBAAAtf,GAEApX,EAAA22B,2BAAAhb,GACA3b,EAAA42B,2BAAAxf,GAGApX,EAAA62B,uBAAAzf,IAEA,IAEApX,EAAAizB,eAAA,SAAAtX,EAAA4O,GACA,IAAAhtB,EAAAyC,EAAAhD,MAAAquB,EAAA9tB,EAAA8tB,wBAAA7R,EAAAjc,EAAAic,YAAA4Q,EAAA7sB,EAAA6sB,YAAAqB,EAAAluB,EAAAkuB,WAAAlS,EAAAhc,EAAAgc,gBAAAwS,EAAAxuB,EAAAwuB,wBACA3U,EAAAiU,EACAI,EAAA9P,EAAA4O,EAAAvqB,EAAAk2B,8BACA9L,EAAAzO,GACA,GAAAsK,EAAA,QAAAsM,QAAAnb,GAAA,CAGA,MAAA2U,IACA3U,EAAA2U,EAAA3U,EAAAuE,EAAA4O,IAEA,IAAAiJ,EAAAxzB,EAAAk2B,6BACAl2B,EAAA82B,sBAAAvd,EAAAnC,EAAAoC,GACAyM,EAAA,QAAA8Q,OAAAxd,EAAAnC,GAEA,GADApX,EAAAg3B,6BAAAxD,IACAnI,EAAA,CAEA,IAAAvR,EAAA0Z,EAAA5uB,OAAA,EACAqyB,EAAAzD,EAAA1Z,GACA9Z,EAAAk3B,+BAAAD,EAAAnd,MAGA9Z,EAAAozB,cAAA,WACApzB,EAAAm3B,qBAEAn3B,EAAAkxB,YAAA,WACAlxB,EAAAm3B,qBAIAn3B,EAAAy2B,sBAAA,SAAA9a,GAEA,OADA3b,EAAAhD,MAAAquB,yBACA1P,EAAAyb,UAEAp3B,EAAA22B,2BAAA,SAAAhb,GAEA,OADA3b,EAAAhD,MAAAquB,yBACAiL,EAAA,WAAA5J,WAAA/Q,IAIA3b,EAAAu2B,4BAAA,SAAA9D,GACA,IAEAe,EAFAxzB,EAAAhD,MAAAuc,gBAEAkI,QAKA,GAJA+R,EAAA6D,OAAA5E,EAAA,GACAzyB,EAAAg3B,6BAAAxD,GAGAA,EAAA5uB,OAAA,GACA,IAAAkV,EAAA0Z,EAAA5uB,OAAA,EACA5E,EAAAk3B,+BAAA1D,EAAA1Z,QAGA9Z,EAAAw2B,mCAAA,SAAA/D,GACA,IACA6E,EADAt3B,EAAAhD,MAAAuc,gBACAkZ,GACAzyB,EAAAg3B,8BAAAM,IACAt3B,EAAAk3B,+BAAAI,EAAA,IAEAt3B,EAAA02B,sBAAA,SAAAtf,GACA,IAAA7Z,EAAAyC,EAAAhD,MAAAwc,EAAAjc,EAAAic,YAAAD,EAAAhc,EAAAgc,gBACAvZ,EAAAk2B,8BAAA,EAGA,IAAA1C,EAAAxzB,EAAA82B,sBAAAvd,EAAAnC,EAAAoC,GACAxZ,EAAAg3B,6BAAAxD,GAEA,MAAAja,GAAA,IAAAA,EAAA3U,QACA5E,EAAAk3B,+BAAA9f,IAGApX,EAAA42B,2BAAA,SAAAxf,GACA,IAAAmC,EAAAvZ,EAAAhD,MAAAuc,gBAEAia,EAAAvN,EAAA,QAAAsR,IAAAhe,EAAAnC,GACApX,EAAAg3B,6BAAAxD,GAEAxzB,EAAAk3B,+BAAA9f,EAAAoc,EAAA5uB,OAAA,IAEA5E,EAAA62B,uBAAA,SAAAzf,GAEA,IAAAoc,GAAApc,GACApX,EAAAg3B,6BAAAxD,GAEAxzB,EAAAk3B,+BAAA9f,IAEApX,EAAAk3B,+BAAA,SAAAM,EAAA/d,QACA,IAAAA,IAAiDA,EAAA,GACjD,IAAAiS,EAAA1rB,EAAAhD,MAAA0uB,cACA+L,EAAAxR,EAAA,QAAAlM,kCAAAyd,GACA9L,EAAAgM,EAAA,kBAAAD,EAAAhe,KAIAzZ,EAAAm3B,kBAAA,WACA9xB,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA6uB,eAAA7rB,EAAAhD,MAAAuc,iBACAvZ,EAAAk2B,8BAAA,EACAl2B,EAAA23B,2BAAA,MAEA33B,EA+DA,OA3MAtD,EAAA,UAAAu5B,EAAA35B,GA8IA25B,EAAAt5B,UAAAS,OAAA,WACA,IAAAi2B,EAAA72B,KAAA82B,oBACA,OAAAl3B,EAAA,cAAA45B,EAAA,UAAAt5B,EAAA,YAAkE22B,GAAmB7wB,gBAAA,IAAwBhG,KAAAQ,MAAA4B,WAE7Gq3B,EAAAt5B,UAAA22B,kBAAA,WACA,aAAA92B,KAAAQ,MAAA2uB,gBAGArpB,WAAA9F,KAAA61B,eACAvsB,QAAAtJ,KAAA00B,YACA5B,UAAA9yB,KAAA42B,cACAhE,WAAA5yB,KAAAy2B,iBAGAgD,EAAAt5B,UAAA21B,sBAAA,SAAA3W,GACA,IAAApe,EAAAf,KAAAQ,MAAAsuB,EAAA/tB,EAAA+tB,SAAAjuB,EAAAE,EAAAiuB,wBAAA,IAAAnuB,OACA2f,EAAArB,EAAAwM,OACAzE,EAAAld,EAAA,MAAAkd,YAAA/H,GACAic,EAAAlU,GAAA/H,EAAAG,SAAA+b,EAAA,QACAtE,EAAAluB,EAAA,MAAAyyB,kBAAAxM,EAAA3P,GACA,OAAA+H,GACAkU,GACArE,GACA/H,EAAAuM,KAAA,SAAAC,GAAuD,aAAAhb,EAAAib,QAAAD,MAIvD/B,EAAAt5B,UAAAq6B,6BAAA,SAAAxD,GACA,IAAA7H,EAAAnvB,KAAAQ,MAAA2uB,YAIA,MAAAnvB,KAAAm7B,4BACAtyB,EAAA,MAAAnI,gBAAAV,KAAAm7B,2BAAAnE,KACA7H,EAAA6H,GACAh3B,KAAAm7B,2BAAAnE,IAQAyC,EAAAt5B,UAAAm6B,sBAAA,SAAAjF,EAAAza,EAAAoC,GACA,OAAAqY,EAAAjtB,OACA,OAAAwS,GAEA,SAAAoC,EAAA,CACA,IAAA0e,EAAAR,EAAA,oBAAAle,EAAApC,GACA,OAAA6O,EAAA,QAAA8Q,OAAAlF,EAAAqG,GAGAA,EAAAjS,EAAA,QAAAkS,aAAAtG,IAAAjtB,OAAA,GAAAwS,GACA,OAAA6O,EAAA,QAAA8Q,OAAAlF,EAAAqG,IAGAjC,EAAAr2B,cACA0rB,UAAA,EACAD,yBAAA,EACA9R,oBAEA0c,EA5MA,CA6MC75B,EAAA;;;;+WC3ND4F,EAAA9F,0BAAA,+DAUAk8B,EAAA,SAAA97B,GAEA,SAAA87B,IACA,IAAAp4B,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OAlBAwD,EAAAq4B,oBAAA,SAAA/H,EAAAngB,GACA,IAAAhT,GACA+X,KAAAob,EAAA,MAEApyB,EAAA6G,IAAA/C,EAAA,cAAAA,EAAA,sBACAs2B,qCAAA,IAAAhI,IAEA,OAAAtrB,EAAA,qBAA+C9G,YAAAyE,IAAAwN,EAAAhT,WAE/C6C,EAAAu4B,sBAAA,SAAAjI,EAAAngB,GACA,IAAAhT,GACA8X,IAAAqb,EAAA,MAEApyB,EAAA6G,IAAA/C,EAAA,cAAAA,EAAA,wBACAw2B,sCAAA,IAAAlI,IAEA,OAAAtrB,EAAA,qBAA+C9G,YAAAyE,IAAAwN,EAAAhT,WAE/C6C,EAmBA,OAxCAtD,EAAA,UAAA07B,EAAA97B,GAuBA87B,EAAAz7B,UAAAC,sBAAA,SAAAC,GACA,OAAAL,KAAAQ,MAAAkB,YAAArB,EAAAqB,aAKAmH,EAAA,MAAAozB,YAAAj8B,KAAAQ,MAAA07B,eAAA77B,EAAA67B,kBACArzB,EAAA,MAAAozB,YAAAj8B,KAAAQ,MAAA27B,iBAAA97B,EAAA87B,oBAEAP,EAAAz7B,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAA07B,EAAAn7B,EAAAm7B,eAAAC,EAAAp7B,EAAAo7B,iBAAAz6B,EAAAX,EAAAW,UACA06B,EAAA,MAAAF,OAAA53B,EAAA43B,EAAA/5B,IAAAnC,KAAA67B,qBACAQ,EAAA,MAAAF,OAAA73B,EAAA63B,EAAAh6B,IAAAnC,KAAA+7B,uBACA,OAAAvzB,EAAA,qBAA4C9G,UAAA6G,IAAA7G,EAAA8D,EAAA,sBAC5C42B,EACAC,IAEAT,EAzCA,CA0CCpzB,EAAA;;;;4cCpDDyoB,EAAAvxB,mBAAA,wDAYA48B,GAAA,aACAC,EAAA,SAAAz8B,GAEA,SAAAy8B,IACA,IAAA/4B,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAKA,OAJAwD,EAAAg5B,aAAA,SAAAC,EAAA9oB,GACA,IAAA5S,EAAAyC,EAAAhD,MAAAkB,EAAAX,EAAAW,UAAAg7B,EAAA37B,EAAA27B,aACA,OAAAl0B,EAAA,qBAAgD9G,UAAA6G,IAAA/C,EAAA,cAAAA,EAAA,aAAA9D,GAAAyE,IAAAwN,EAAAhT,MAAA+7B,EAAA/oB,MAEhDnQ,EAoBA,OA3BAtD,EAAA,UAAAq8B,EAAAz8B,GASAy8B,EAAAp8B,UAAAC,sBAAA,SAAAC,GAIA,OAAAwI,EAAA,MAAAozB,YAAAj8B,KAAAQ,MAAA60B,QAAAh1B,EAAAg1B,QAAApE,EAAA,QAAA0L,gBACA9zB,EAAA,MAAAozB,YAAAj8B,KAAAQ,MAAAk8B,aAAAr8B,EAAAq8B,aAAA7zB,EAAA,MAAAtI,sBACAsI,EAAA,MAAAtI,mBAAAP,KAAAQ,MAAAH,GAAkE+zB,QAAAkI,KAElEC,EAAAp8B,UAAAS,OAAA,WACA,OAAA4H,EAAA,qBAA2C9G,UAAA8D,EAAA,qBAAyCxF,KAAA48B,yBAEpFL,EAAAp8B,UAAAy8B,qBAAA,WACA,IAAAvH,EAAAr1B,KAAAQ,MAAA60B,QACA,SAAAA,EAGA,OAAAA,EAAAlzB,IAAAnC,KAAAw8B,eAEAD,EA5BA,CA6BC/zB,EAAA;;;;4RC1CDq0B,EAAAn9B,uBAAA,6DAQAo9B,EAAA,WACA,SAAAA,EAEAC,EAEAC,EAEAC,GACA,IAAAz5B,EAAAxD,KACAA,KAAA+8B,eACA/8B,KAAAg9B,yBACAh9B,KAAAi9B,uBACAj9B,KAAAk9B,0BAAA,SAAAvpB,GACA,OAAAnQ,EAAAwkB,KAAAhQ,qBAAArE,IAEA3T,KAAAm9B,6BAAA,SAAAxpB,GAGA,OAFAnQ,EAAAwkB,KAAAjQ,yBAAApE,GACAnQ,EAAAwkB,KAAAhQ,qBAAArE,IACA,GAEA3T,KAAAo9B,0BAAA,SAAAzpB,GACA,OAAAnQ,EAAAwkB,KAAA5P,sBAAAzE,IAEA3T,KAAAq9B,6BAAA,SAAA1pB,GAGA,OAFAnQ,EAAAwkB,KAAA7P,0BAAAxE,GACAnQ,EAAAwkB,KAAA5P,sBAAAzE,IACA,GAEA3T,KAAAs9B,QAAA,SAAA3a,GACA,IAAA4a,EAAA/5B,EAAAy5B,qBAAAO,wBAAA9kB,KACA+kB,EAAAj6B,EAAAw5B,uBAAA/c,WACAyd,EAAA/a,GAAA4a,EAAAE,GAKA,OAJA,MAAAj6B,EAAAsc,kBACAtc,EAAAsc,iBAAA,GACA4d,GAAAl6B,EAAAwkB,KAAAjQ,yBAAAvU,EAAAsc,kBAGA4d,EACAA,EAAAD,GAEAz9B,KAAA29B,QAAA,SAAA9a,GACA,IAAA+a,EAAAp6B,EAAAy5B,qBAAAO,wBAAA/kB,IACAolB,EAAAr6B,EAAAw5B,uBAAAhd,UACA8d,EAAAjb,GAAA+a,EAAAC,GAIA,OAHA,MAAAr6B,EAAAqc,eACArc,EAAAqc,cAAA,GACAie,GAAAt6B,EAAAwkB,KAAA7P,0BAAA3U,EAAAqc,eACAie,IAAAD,GAEA79B,KAAA6f,cAAA,EACA7f,KAAA8f,iBAAA,EA2GA,OAvGAgd,EAAA38B,UAAA49B,QAAA,SAAA/V,GAEA,OADAhoB,KAAAgoB,OACAhoB,MAEA88B,EAAA38B,UAAA69B,iBAAA,SAAAne,GAEA,OADA7f,KAAA6f,gBACA7f,MAEA88B,EAAA38B,UAAA89B,oBAAA,SAAAne,GAEA,OADA9f,KAAA8f,mBACA9f,MAIA88B,EAAA38B,UAAA+9B,gBAAA,WACA,WAAAC,EAAA,KAAAn+B,KAAAg9B,uBAAA/c,WAAAjgB,KAAAg9B,uBAAAhd,UAAAhgB,KAAAg9B,uBAAA3yB,YAAArK,KAAAg9B,uBAAA7yB,eAEA2yB,EAAA38B,UAAAipB,6BAAA,SAAA1iB,GAIA,IAHA,IAAA03B,EAAAp+B,KAAAq+B,sBAAA33B,GACA43B,EAAAt+B,KAAA+8B,aAAAwB,iBAAAH,GACAI,EAAA,EACApxB,EAAA,EAAuBA,EAAAkxB,EAAAl2B,OAAqCgF,IAAA,CAC5D,IAAA5C,EAAAqyB,EAAA,MAAAvX,0BAAAgZ,EAAAG,KAAArxB,IAAAtK,MACAiH,EAAAiQ,KAAA2N,KAAAnd,GAAA,EAAAsyB,EAAAlyB,wBACAb,EAAAy0B,IACAA,EAAAz0B,GAGA,OAAAy0B,GAEA1B,EAAA38B,UAAAu+B,8BAAA,SAAAh4B,GAKA,IAHA,IAAA03B,EAAAp+B,KAAAq+B,sBAAA33B,GACAi4B,EAAA3+B,KAAA+8B,aAAAwB,iBAAAH,EAAA,IAAAjG,EAAA,YACAyG,EAAA,EACAxxB,EAAA,EAAuBA,EAAAuxB,EAAAv2B,OAA4BgF,IAAA,CACnD,IAAAzJ,EAAAg7B,EAAAF,KAAArxB,GACAyxB,EAAAl7B,EAAAoiB,cAAA,IAAAoS,EAAA,uBACA2G,EAAAn7B,EAAAoiB,cAAA,IAAAoS,EAAA,6BACA4G,EAAAp7B,EAAAoiB,cAAA,IAAAoS,EAAA,sBACAv1B,EAAA,GAEAA,EADA,MAAAi8B,EACAA,EAAAt0B,aAEA,MAAAu0B,EACAA,EAAAv0B,aAEA,MAAAw0B,EACAA,EAAAx0B,aAIA5G,EAAA4G,cAEAq0B,IACAA,EAAAh8B,GAGA,OAAAg8B,GAIA9B,EAAA38B,UAAAioB,qBAAA,SAAAzF,EAAA2F,GAEA,IADAtoB,KAAAg/B,eACAtc,UAAAC,GACA,SAEA,IAAAsc,EAAAj/B,KAAAs9B,QAAA3a,GACAlV,EAAA6a,EAAAtoB,KAAAgoB,KAAA/P,QAAAjY,KAAAgoB,KAAA/P,QAAA,EACAinB,EAAA5W,EAAAtoB,KAAAm9B,6BAAAn9B,KAAAk9B,0BACA,OAAAL,EAAA,MAAAxgB,aAAA4iB,EAAAxxB,EAAAyxB,IAEApC,EAAA38B,UAAA2wB,kBAAA,SAAAjO,EAAAyF,GAEA,IADAtoB,KAAAg/B,eACApc,UAAAC,GACA,SAEA,IAAAsc,EAAAn/B,KAAA29B,QAAA9a,GACApV,EAAA6a,EAAAtoB,KAAAgoB,KAAA3P,QAAArY,KAAAgoB,KAAA3P,QAAA,EACA6mB,EAAA5W,EAAAtoB,KAAAq9B,6BAAAr9B,KAAAo9B,0BACA,OAAAP,EAAA,MAAAxgB,aAAA8iB,EAAA1xB,EAAAyxB,IAEApC,EAAA38B,UAAAi/B,mBAAA,SAAAzc,EAAAE,GACA,IAAAoc,EAAAj/B,KAAAs9B,QAAA3a,GACAwc,EAAAn/B,KAAA29B,QAAA9a,GAGA,OAAgBrF,IAFhBqf,EAAA,MAAAxgB,aAAA4iB,EAAAj/B,KAAAgoB,KAAA/P,QAAA,EAAAjY,KAAAk9B,2BAEgBvoB,IADhBkoB,EAAA,MAAAxgB,aAAA8iB,EAAAn/B,KAAAgoB,KAAA3P,QAAA,EAAArY,KAAAo9B,6BAKAN,EAAA38B,UAAAk+B,sBAAA,SAAA33B,GAMA,WAHAA,EAAA1G,KAAA8f,iBACAqY,EAAA,oBAAAA,EAAA,qBAEA,KADAA,EAAA,qBAAAzxB,IAGAo2B,EAAA38B,UAAA6+B,aAAA,WACA,OAAAb,EAAA,KAAA9b,KAAAriB,KAAA+8B,aAAAS,0BAEAV,EAAAlyB,wBAAA,GACAkyB,EA7JA;;;;mLCGAuC,wVAXAC,EAAA5/B,yBAAA,+DAYA,SAAA2/B,GAIAA,EAAA,YAIAA,EAAA,UAIAA,EAAA,YAKAA,EAAA,oBAjBA,CAkBCA,WACD,IAAAE,EAAA,SAAAz/B,GAEA,SAAAy/B,IACA,cAAAz/B,KAAAC,MAAAC,KAAAC,YAAAD,KAoDA,OAtDAE,EAAA,UAAAq/B,EAAAz/B,GAIAy/B,EAAAp/B,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAAwnB,EAAAjnB,EAAAinB,KAAAwX,EAAAz+B,EAAAy+B,gBAAAC,EAAA1+B,EAAA0+B,aAAAC,EAAA3+B,EAAA2+B,aACAC,EAAAF,IAAAJ,EAAAO,KAAAH,IAAAJ,EAAAQ,SACAC,EAAAL,IAAAJ,EAAA1iB,MAAA8iB,IAAAJ,EAAAQ,SACAn+B,EAAA6G,IAAA/C,EAAA,eAAAxF,KAAA+/B,sBAAA//B,KAAAQ,MAAAkB,WACAs+B,EAAAR,GAAA32B,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAAqsB,cACAoT,EAAAT,GAAA32B,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAA2wB,sBAAAwO,GACAO,EAAAr3B,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAA2/B,yBAAAL,GACAxqB,EAAA,MAAAmqB,EACAC,EAAAD,EAAAE,EAAAG,GACAJ,IAEAU,GACAx9B,OAAAolB,EAAAnP,YACA/V,MAAAklB,EAAAlP,YAEA,OAAAtQ,EAAA,qBAA4C9G,YAAAf,MAAAX,KAAAQ,MAAAG,MAAAsC,IAAAjD,KAAAQ,MAAA6/B,aAC5C73B,EAAA,qBAAwC9G,UAAA8D,EAAA,gCAAAvC,IAAAjD,KAAAQ,MAAA8/B,mBAAApH,SAAAl5B,KAAAQ,MAAA04B,SAAAqH,QAAAvgC,KAAAQ,MAAA+/B,SACxC/3B,EAAA,qBAA4C9G,UAAA8D,EAAA,qBAC5Cw6B,EACAE,GACA13B,EAAA,qBAA4C9G,UAAA8D,EAAA,uBAAA7E,MAAAy/B,GAC5CH,EACAz3B,EAAA,qBAAgD9G,UAAA8D,EAAA,8BAAAvC,IAAAjD,KAAAQ,MAAAggC,SAA4ElrB,OAE5HiqB,EAAAp/B,UAAAsgC,cAAA,SAAApgC,GACA,IAAAo/B,EAAAp/B,EAAAo/B,aACA,MAAAp/B,EAAA64B,UAAA,MAAAuG,OAAAJ,EAAAqB,MACAC,QAAAC,KAAAtB,EAAA,2CAGAC,EAAAp/B,UAAA4/B,oBAAA,WACA,OAAA//B,KAAAQ,MAAAi/B,cACA,KAAAJ,EAAAqB,KACA,OAAAl7B,EAAA,oBACA,KAAA65B,EAAAO,IACA,OAAAp6B,EAAA,mBACA,KAAA65B,EAAA1iB,KACA,OAAAnX,EAAA,oBACA,KAAA65B,EAAAQ,SACA,OAAAr6B,EAAA,wBACA,QACA,SAKA+5B,EAAAn8B,cACAo8B,iBAAA,GAEAD,EAvDA,CAwDC12B,EAAA;;;;osBCvFDg4B,EAAAnhC,kCAAA,kFAyBAohC,GACA,kBACA,iBACA,mBACA,gBACA,aACA,UACA,8BAEAC,EAAA,SAAAjhC,GAIA,SAAAihC,EAAAvgC,EAAA+C,GACA,IAgVAxC,EAAAF,EAhVA2C,EAAA1D,EAAA2D,KAAAzD,KAAAQ,EAAA+C,IAAAvD,KA+UA,OA5UAwD,EAAAw9B,eAAAjgC,MACAkgC,EAAA,aAAAP,SACA3/B,EAAAkgC,EAAA,aAAArB,QACA7+B,EAAAkgC,EAAA,aAAAtkB,SACA5b,EAAAkgC,EAAA,aAAApB,aACA9+B,GACAyC,EAAA09B,sBAAArgC,MACAogC,EAAA,aAAAP,MAAAl9B,EAAA29B,4BAAAF,EAAA,aAAAP,MACA7/B,EAAAogC,EAAA,aAAArB,KAAAp8B,EAAA29B,4BAAAF,EAAA,aAAArB,KACA/+B,EAAAogC,EAAA,aAAAtkB,MAAAnZ,EAAA29B,4BAAAF,EAAA,aAAAtkB,MACA9b,EAAAogC,EAAA,aAAApB,UAAAr8B,EAAA29B,4BAAAF,EAAA,aAAApB,UACAh/B,GAGA2C,EAAA49B,4CAAA,EAIA59B,EAAA69B,uBAAA,WACA,OAAAx4B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAqsB,aAAArpB,EAAA09B,oBAAAD,EAAA,aAAAP,MAAAY,OAEA99B,EAAA+9B,sBAAA,WACA,OAAA14B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAqsB,aAAArpB,EAAA09B,oBAAAD,EAAA,aAAArB,KAAA0B,OAEA99B,EAAAg+B,uBAAA,WACA,OAAA34B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAqsB,aAAArpB,EAAA09B,oBAAAD,EAAA,aAAAtkB,MAAA2kB,OAEA99B,EAAAi+B,0BAAA,WACA,OAAA54B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAqsB,aAAArpB,EAAA09B,oBAAAD,EAAA,aAAApB,UAAAyB,OAGA99B,EAAAk+B,+BAAA,SAAA5B,GACA,IAAA6B,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAAP,MAAAkB,aACAC,EAAAr+B,EAAAs+B,4BACAC,EAAAv+B,EAAAw+B,wBACA,OAAAn5B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2/B,yBAAAwB,EAAAE,EAAAE,EAAAjC,IAEAt8B,EAAAy+B,8BAAA,SAAAnC,GACA,IAAA6B,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAArB,KAAAgC,aACAC,EAAAr+B,EAAA0+B,2BACAH,EAAAv+B,EAAAw+B,wBACA,OAAAn5B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2/B,yBAAAwB,EAAAE,EAAAE,EAAAjC,IAEAt8B,EAAA2+B,+BAAA,SAAArC,GACA,IAAA6B,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAAtkB,MAAAilB,aACAC,EAAAr+B,EAAA4+B,4BACAL,EAAAv+B,EAAAw+B,wBACA,OAAAn5B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2/B,yBAAAwB,EAAAE,EAAAE,EAAAjC,IAEAt8B,EAAA6+B,kCAAA,SAAAvC,GACA,IAAA6B,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAApB,UAAA+B,aACAC,EAAAr+B,EAAA8+B,+BACAP,EAAAv+B,EAAAw+B,wBACA,OAAAn5B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2/B,yBAAAwB,EAAAE,EAAAE,EAAAjC,IAGAt8B,EAAA++B,4BAAA,SAAA5C,GACA,IAAAgC,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAAP,MAAA8B,UACAX,EAAAr+B,EAAAi/B,yBACAV,EAAAv+B,EAAAk/B,qBACA,OAAA75B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2wB,sBAAAwQ,EAAAE,EAAAE,EAAApC,IAEAn8B,EAAAm/B,2BAAA,SAAAhD,GACA,IAAAgC,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAArB,KAAA4C,UACAX,EAAAr+B,EAAAo/B,wBACAb,EAAAv+B,EAAAk/B,qBACA,OAAA75B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2wB,sBAAAwQ,EAAAE,EAAAE,EAAApC,IAEAn8B,EAAAq/B,4BAAA,SAAAlD,GACA,IAAAgC,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAAtkB,MAAA6lB,UACAX,EAAAr+B,EAAAs/B,yBACAf,EAAAv+B,EAAAk/B,qBACA,OAAA75B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2wB,sBAAAwQ,EAAAE,EAAAE,EAAApC,IAEAn8B,EAAAu/B,+BAAA,SAAApD,GACA,IAAAgC,EAAAn+B,EAAA09B,oBAAAD,EAAA,aAAApB,UAAA2C,UACAX,EAAAr+B,EAAAw/B,4BACAjB,EAAAv+B,EAAAk/B,qBACA,OAAA75B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA2wB,sBAAAwQ,EAAAE,EAAAE,EAAApC,IAMAn8B,EAAAy/B,yBAAA,SAAA9jB,GACA,GAAA3b,EAAA49B,2CACA59B,EAAA49B,4CAAA,MADA,CAMAv4B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA04B,SAAA/Z,GAGA,IAAA+jB,EAAA1/B,EAAAw9B,aAAAC,EAAA,aAAAP,MAAAyC,gBACAC,EAAAF,EAAAjjB,WACAojB,EAAAH,EAAAljB,UAGAxc,EAAA8/B,yBAAA,aAAAF,GACA5/B,EAAA8/B,yBAAA,YAAAD,GAEA7/B,EAAA+/B,+BAEA//B,EAAAggC,YAAA,SAAArkB,GAGAtW,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA04B,SAAA/Z,GAEA,IAAAikB,EAAA5/B,EAAAigC,oBAAA,aAAAtkB,EAAAukB,QACAL,EAAA7/B,EAAAigC,oBAAA,WAAAtkB,EAAAwkB,QAGA,MAAAP,GAAA,MAAAC,IACA7/B,EAAA49B,4CAAA,GAKA59B,EAAAw9B,aAAAC,EAAA,aAAAP,MAAAyC,gBAAAljB,WAAAmjB,EACA5/B,EAAAw9B,aAAAC,EAAA,aAAAP,MAAAyC,gBAAAnjB,UAAAqjB,EACA7/B,EAAA8/B,yBAAA,aAAAF,GACA5/B,EAAA8/B,yBAAA,YAAAD,GAEA7/B,EAAA+/B,8BAEA//B,EAAAigC,oBAAA,SAAAjnB,EAAAgF,GACA,IAAAzgB,EAAAyC,EAAAhD,MAAAwnB,EAAAjnB,EAAAinB,KAAA4b,EAAA7iC,EAAA6iC,2BAAAC,EAAA9iC,EAAA8iC,yBACAC,EAAA,eAAAtnB,EACAunB,EAAAD,EAAA,yBAEA,KADAA,EAAAF,EAAAC,GACA,CAQA,IAAAG,EAAAF,EACAtgC,EAAAygC,MAAAC,gCACA1gC,EAAAygC,MAAAE,iCACA,MAAAH,IAGAA,EAAAxgC,EAAA4gC,gCAAAN,IAMA,IAAAO,EAAAP,EACAtgC,EAAAygC,MAAAC,gCAAA1gC,EAAAygC,MAAAK,oBACA9gC,EAAAygC,MAAAE,iCAAA3gC,EAAAygC,MAAAM,wBACAC,EAAAV,EAAA9b,EAAAlP,WAAAkP,EAAAnP,YACA4rB,EAAAzqB,KAAAC,IAAA,EAAAuqB,EAAAH,GACAK,EAAAlhC,EAAAygC,MAAAU,gBAAAZ,GAEA,OADAl7B,EAAA,MAAAyd,MAAAoe,EAAAljB,EAAA,EAAAijB,KAMAjhC,EAAAs+B,4BAAA,SAAA5F,GACA14B,EAAAohC,0BAAA1I,EAAA+E,EAAA,aAAAP,OAEAl9B,EAAA0+B,2BAAA,SAAAhG,GACA14B,EAAAohC,0BAAA1I,EAAA+E,EAAA,aAAArB,MAEAp8B,EAAA4+B,4BAAA,SAAAlG,GACA14B,EAAAohC,0BAAA1I,EAAA+E,EAAA,aAAAtkB,OAEAnZ,EAAA8+B,+BAAA,SAAApG,GACA14B,EAAAohC,0BAAA1I,EAAA+E,EAAA,aAAApB,WAEAr8B,EAAAohC,0BAAA,SAAA1I,EAAAuD,GACA,IAAAoF,EAAArhC,EAAAshC,qBAAA5I,EAAAuD,GACA52B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAukC,wBAAAF,IAGArhC,EAAAi/B,yBAAA,SAAAtG,GACA34B,EAAAwhC,uBAAA7I,EAAA8E,EAAA,aAAAP,OAEAl9B,EAAAo/B,wBAAA,SAAAzG,GACA34B,EAAAwhC,uBAAA7I,EAAA8E,EAAA,aAAArB,MAEAp8B,EAAAs/B,yBAAA,SAAA3G,GACA34B,EAAAwhC,uBAAA7I,EAAA8E,EAAA,aAAAtkB,OAEAnZ,EAAAw/B,4BAAA,SAAA7G,GACA34B,EAAAwhC,uBAAA7I,EAAA8E,EAAA,aAAApB,WAEAr8B,EAAAwhC,uBAAA,SAAA7I,EAAAsD,GACA,IAAAoF,EAAArhC,EAAAyhC,uBAAA9I,EAAAsD,GACA52B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA0kC,qBAAAL,IAKArhC,EAAAw+B,wBAAA,SAAAxb,EAAAC,EAAAre,GACA,IAAA+lB,EAAAnkB,EAAA,MAAA0c,2BAAAF,EAAAC,EAAAre,GACAiY,EAAA7c,EAAAhD,MAAAwnB,KAAAjQ,yBAAAoW,GACAsR,EAAAtR,GAAA3qB,EAAAhD,MAAAsf,iBAAAmhB,EAAA,aAAApB,SAAAoB,EAAA,aAAArB,IACA1D,EAAA14B,EAAAshC,sBAAAzkB,GAAAof,GACA52B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAwhC,wBAAA9F,IAGA14B,EAAAk/B,qBAAA,SAAAlc,EAAAC,EAAAre,GACA,IAAA+lB,EAAAnkB,EAAA,MAAA0c,2BAAAF,EAAAC,EAAAre,GACAgY,EAAA5c,EAAAhD,MAAAwnB,KAAA7P,0BAAAgW,GACAsR,EAAAtR,GAAA3qB,EAAAhD,MAAAqf,cAAAohB,EAAA,aAAApB,SAAAoB,EAAA,aAAAtkB,KACAwf,EAAA34B,EAAAyhC,wBAAA7kB,GAAAqf,GACA52B,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAkiC,qBAAAvG,IAIA34B,EAAA+/B,2BAAA,WACA,IAAA4B,EAAA3hC,EAAAhD,MAAA2kC,cACAA,EAAA,EAEA3hC,EAAA4hC,qBAIAC,cAAA7hC,EAAA8hC,2BACA9hC,EAAA8hC,0BAAA/vB,OAAAyd,WAAAxvB,EAAA4hC,kBAAAD,KAGA3hC,EAAA4hC,kBAAA,WACA,IACAlC,EADA1/B,EAAAw9B,aAAAC,EAAA,aAAAP,MACAyC,gBAIAoC,EAAA/hC,EAAAgiC,+BACAC,EAAAjiC,EAAAkiC,mCAGAC,EAAAJ,EAFA/hC,EAAAoiC,6BAAA,SAGAC,EAAAJ,EAFAjiC,EAAAoiC,6BAAA,UAGAE,EAAAC,EAAA,0BAAA7C,EAAA,YACA8C,EAAAD,EAAA,0BAAA7C,EAAA,cAEA+C,EAAAziC,EAAA0iC,yCAAAT,GACAU,EAAA3iC,EAAA0iC,yCAAAL,GAGAriC,EAAAygC,MAAAmC,kBAAAb,GACA/hC,EAAAygC,MAAAoC,sBAAAZ,GAIAjiC,EAAAygC,MAAAqC,mCAAAhiC,GACAd,EAAAygC,MAAAsC,oCAAAjiC,GAMAd,EAAAgjC,gCAAAjB,GACA/hC,EAAAijC,iCAAAlB,EAAAU,GACAziC,EAAAkjC,sBAAAf,EAAAQ,GAGA3iC,EAAAmjC,+BAAA1F,EAAA,aAAArB,IAAA,QAAAkG,GACAtiC,EAAAmjC,+BAAA1F,EAAA,aAAAtkB,KAAA,SAAAqpB,GAGAxiC,EAAAojC,6BAAA3F,EAAA,aAAAtkB,KAAA,aACAnZ,EAAAojC,6BAAA3F,EAAA,aAAArB,IAAA,eAEAp8B,EAAAkjC,sBAAA,SAAA5jC,EAAAF,GACAY,EAAAqjC,sBAAA5F,EAAA,aAAAtkB,KAAA,QAAA7Z,GACAU,EAAAqjC,sBAAA5F,EAAA,aAAArB,IAAA,SAAAh9B,GACAY,EAAAqjC,sBAAA5F,EAAA,aAAApB,SAAA,QAAA/8B,GACAU,EAAAqjC,sBAAA5F,EAAA,aAAApB,SAAA,SAAAj9B,IAEAY,EAAAqjC,sBAAA,SAAApH,EAAAqH,EAAAziC,GACA,IAAA0iC,EAAAvjC,EAAAw9B,aAAAvB,GAAAsH,SACA,MAAAA,IACAA,EAAApmC,MAAAmmC,GAAAziC,EAAA,OAGAb,EAAAmjC,+BAAA,SAAAlH,EAAAuH,EAAA3iC,GACA,IAAA0iC,EAAAvjC,EAAAw9B,aAAAvB,GAAAsH,SACA,MAAAA,IACAA,EAAApmC,MAAAqmC,GAAA3iC,EAAA,OAGAb,EAAAgjC,gCAAA,SAAA1jC,GACAU,EAAAyjC,8BAAAhG,EAAA,aAAAP,KAAA59B,GACAU,EAAAyjC,8BAAAhG,EAAA,aAAArB,IAAA98B,GACAU,EAAAyjC,8BAAAhG,EAAA,aAAAtkB,KAAA7Z,GACAU,EAAAyjC,8BAAAhG,EAAA,aAAApB,SAAA/8B,IAEAU,EAAAyjC,8BAAA,SAAAxH,EAAA38B,GACA,IAAA0/B,EAAAh/B,EAAAw9B,aAAAvB,GAAA+C,UACA,MAAAA,IACAA,EAAA7hC,MAAAmC,QAAA,OAGAU,EAAAijC,iCAAA,SAAA3jC,EAAAF,GACAY,EAAA0jC,gCAAAjG,EAAA,aAAAP,KAAA59B,EAAAF,GACAY,EAAA0jC,gCAAAjG,EAAA,aAAArB,IAAA98B,EAAAF,GACAY,EAAA0jC,gCAAAjG,EAAA,aAAAtkB,KAAA7Z,EAAAF,GACAY,EAAA0jC,gCAAAjG,EAAA,aAAApB,SAAA/8B,EAAAF,IAEAY,EAAA0jC,gCAAA,SAAAzH,EAAA38B,EAAAF,GACA,IAAA0+B,EAAA99B,EAAAw9B,aAAAvB,GAAA6B,KACA,MAAAA,IACAA,EAAA3gC,MAAAmC,QAAA,KACAw+B,EAAA3gC,MAAAiC,SAAA,OAGAY,EAAAojC,6BAAA,SAAAnH,EAAAsE,EAAAoD,GACA,IAAAhE,EAAA3/B,EAAAw9B,aAAAvB,GAAA0D,gBACAxiB,EAAA,MAAAwmB,IAAA3jC,EAAAygC,MAAAU,gBAAAZ,GACA,MAAAZ,IACAA,EAAAY,GAAApjB,IAGAnd,EAAA8/B,yBAAA,SAAAS,EAAAjQ,GACAtwB,EAAAygC,MAAAmD,gBAAArD,EAAAjQ,GACA,IAAAuT,EAAA,eAAAtD,EAAA9C,EAAA,aAAArB,IAAAqB,EAAA,aAAAtkB,KACAnZ,EAAAojC,6BAAAS,EAAAtD,IAKAvgC,EAAA8jC,kCAAAz+B,EAAA,MAAA0+B,2BAAA/jC,EAAAy/B,0BACAz/B,EAAAgkC,qBAAA3+B,EAAA,MAAA0+B,2BAAA/jC,EAAAggC,aACAhgC,EAAAygC,MAAA,IAAApD,EAAA,wBACAr9B,EA2KA,OA9fAtD,EAAA,UAAA6gC,EAAAjhC,GAyVAihC,EAAA5gC,UAAAsnC,iBAAA,SAAAxnB,EAAAD,GACA,IAAAmjB,EAAAnjC,KAAAghC,aAAAC,EAAA,aAAAP,MAAAyC,gBACAnjC,KAAAohC,4CAAA,EAEA+B,EAAAljB,aACAkjB,EAAAnjB,YACAhgB,KAAAolC,qBAWArE,EAAA5gC,UAAAunC,yBAAA,WACA1nC,KAAAolC,qBAEArE,EAAA5gC,UAAA6E,kBAAA,WACAhF,KAAA2nC,WACA3nC,KAAAolC,qBAEArE,EAAA5gC,UAAA+E,mBAAA,SAAAgvB,GAGArrB,EAAA,MAAAtI,mBAAAP,KAAAQ,MAAA0zB,GAAkEE,QAAA0M,MAClE9gC,KAAA2nC,WACA3nC,KAAAolC,sBAGArE,EAAA5gC,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAAwnB,EAAAjnB,EAAAinB,KAAAwX,EAAAz+B,EAAAy+B,gBAAAE,EAAA3+B,EAAA2+B,aAAAkI,EAAA7mC,EAAA6mC,kBAGAC,EAAAD,EACA5nC,KAAAsnC,kCACAtnC,KAAAijC,yBAEA6E,GACApI,eACAF,kBACAxX,OACAuY,QALAqH,EAAA5nC,KAAAwnC,qBAAAxnC,KAAAwjC,aAOAuE,EAAA/nC,KAAA+nC,4BACAC,EAAAD,EAAAnoC,EAAA,cAAAqhC,EAAA,cAAA/gC,EAAA,YAAmH4nC,GAAczH,YAAArgC,KAAAkhC,oBAAAD,EAAA,aAAAtkB,MAAAoqB,SAAAtH,aAAAwB,EAAA,aAAAtkB,KAAAwjB,yBAAAngC,KAAAmiC,+BAAAtV,aAAA7sB,KAAAwhC,uBAAArQ,sBAAAnxB,KAAA6iC,4BAAAvC,mBAAAtgC,KAAAkhC,oBAAAD,EAAA,aAAAtkB,MAAAwmB,wBAAyV,EAC1d8E,EAAAF,EAAAnoC,EAAA,cAAAqhC,EAAA,cAAA/gC,EAAA,YAAsH4nC,GAAczH,YAAArgC,KAAAkhC,oBAAAD,EAAA,aAAApB,UAAAkH,SAAAtH,aAAAwB,EAAA,aAAApB,SAAAM,yBAAAngC,KAAAqiC,kCAAAxV,aAAA7sB,KAAAyhC,0BAAAtQ,sBAAAnxB,KAAA+iC,+BAAAzC,mBAAAtgC,KAAAkhC,oBAAAD,EAAA,aAAApB,UAAAsD,wBAA8W,EAClf,OAAAvjC,EAAA,qBAA4C8B,UAAAI,EAAA,sBAC5ClC,EAAA,cAAAqhC,EAAA,cAAA/gC,EAAA,YAAkE4nC,GAActH,QAAAxgC,KAAAQ,MAAAggC,QAAAtH,SAAA2O,EAAAxH,YAAArgC,KAAAkhC,oBAAAD,EAAA,aAAAP,MAAAqG,SAAAtH,aAAAwB,EAAA,aAAAP,KAAAP,yBAAAngC,KAAA0hC,+BAAA7U,aAAA7sB,KAAAqhC,uBAAAlQ,sBAAAnxB,KAAAuiC,4BAAAjC,mBAAAtgC,KAAAkhC,oBAAAD,EAAA,aAAAP,MAAAyC,mBAChFvjC,EAAA,cAAAqhC,EAAA,cAAA/gC,EAAA,YAAkE4nC,GAAczH,YAAArgC,KAAAkhC,oBAAAD,EAAA,aAAArB,KAAAmH,SAAAtH,aAAAwB,EAAA,aAAArB,IAAAO,yBAAAngC,KAAAiiC,8BAAApV,aAAA7sB,KAAAuhC,sBAAApQ,sBAAAnxB,KAAA2iC,2BAAArC,mBAAAtgC,KAAAkhC,oBAAAD,EAAA,aAAArB,KAAAuD,mBAChF6E,EACAC,IAIAlH,EAAA5gC,UAAAghC,4BAAA,SAAA1B,GACA,IAAAj8B,EAAAxD,KAKA,uEAAAkoC,OAJA,SAAAC,EAAAhiC,GAEA,OADAgiC,EAAAhiC,GAAA,SAAAlD,GAAuC,OAAAO,EAAAw9B,aAAAvB,GAAAt5B,GAAAlD,GACvCklC,QAMApH,EAAA5gC,UAAAwnC,SAAA,WACA9+B,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAA6/B,YAAArgC,KAAAghC,aAAAC,EAAA,aAAAP,MAAAqG,UACAl+B,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAA4nC,aAAApoC,KAAAghC,aAAAC,EAAA,aAAAP,MAAA8B,WACA35B,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAA6nC,gBAAAroC,KAAAghC,aAAAC,EAAA,aAAAP,MAAAkB,cACA/4B,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAA8/B,mBAAAtgC,KAAAghC,aAAAC,EAAA,aAAAP,MAAAyC,kBAKApC,EAAA5gC,UAAAikC,gCAAA,SAAAN,GACA,IAAAZ,EAAAljC,KAAAghC,aAAAC,EAAA,aAAAP,MAAAyC,gBACA,OAAAW,GACA9jC,KAAAikC,MAAAqC,8BAAApD,EAAA74B,aACArK,KAAAikC,MAAAC,kCAGAlkC,KAAAikC,MAAAsC,+BAAArD,EAAA/4B,cACAnK,KAAAikC,MAAAE,mCAGApD,EAAA5gC,UAAA+lC,yCAAA,SAAAtjC,GACA,OAAAA,GA9bA,EAPA,GAqcAA,GAQAm+B,EAAA5gC,UAAAylC,6BAAA,SAAAkB,GACA,IAAA/lC,EAAAf,KAAAQ,MAAAwnB,EAAAjnB,EAAAinB,KAAAlI,EAAA/e,EAAA+e,iBAAAD,EAAA9e,EAAA8e,cACAyoB,EAAA,UAAAxB,EAAAhnB,EAAAD,EACA0oB,EAAA,UAAAzB,EAAA9e,EAAAhQ,qBAAAgQ,EAAA5P,sBAEA,OAAAkwB,EAAA,EAAAC,EAAAD,EAAA,GA3cA,GAidAvH,EAAA5gC,UAAAqlC,6BAAA,WAEA,IAAAgD,EAAAxoC,KAAAghC,aAAAC,EAAA,aAAAP,MAAA8B,UACA,aAAAgG,EACA,GAIAA,EAAA7nC,MAAAmC,MAAA,OACA0lC,EAAAn+B,cAQA02B,EAAA5gC,UAAAulC,iCAAA,WAIA,IAAA+C,EAAAzoC,KAAAghC,aAAAC,EAAA,aAAAP,MAAAkB,aACA,aAAA6G,EAAA,EAAAA,EAAAt+B,cAEA42B,EAAA5gC,UAAA4nC,0BAAA,SAAAvnC,QACA,IAAAA,IAA+BA,EAAAR,KAAAQ,OAC/B,IAAAg/B,EAAAh/B,EAAAg/B,gBAAA1f,EAAAtf,EAAAsf,iBACA,OAAA0f,GAAA,MAAA1f,KAAA,GAGAihB,EAAA5gC,UAAA2kC,qBAAA,SAAA5I,EAAAuD,GACA,IACAiJ,EADAjJ,IAAAwB,EAAA,aAAAtkB,MAAA8iB,IAAAwB,EAAA,aAAApB,SACA,EAAA7/B,KAAAikC,MAAAU,gBAAA,cACAY,EAAAvlC,KAAAikC,MAAAK,oBAIA,OAHA,MAAApI,EACAA,EAAA/5B,IAAA,SAAAwmC,GAA2D,OAAAA,EAAAD,EAAAnD,IAC3DrJ,GAGA6E,EAAA5gC,UAAA8kC,uBAAA,SAAA9I,EAAAsD,GACA,IACAiJ,EADAjJ,IAAAwB,EAAA,aAAArB,KAAAH,IAAAwB,EAAA,aAAApB,SACA,EAAA7/B,KAAAikC,MAAAU,gBAAA,aACAc,EAAAzlC,KAAAikC,MAAAM,wBAIA,OAHA,MAAApI,EACAA,EAAAh6B,IAAA,SAAAymC,GAA+D,OAAAA,EAAAF,EAAAjD,IAC/DtJ,GAKA4E,EAAA39B,cACAiT,gCAAA/R,EACAk7B,iBAAA,EACAoE,4BAAA,EACAC,0BAAA,EACA+D,mBAAA,EACAzC,cA7gBA,KA+gBApE,EA/fA,CAggBCl4B,EAAA;;;;oFCliBDnJ,EAAAuO,EAAAC,EAAA,4CAAA26B,IAKA,IAAAA,EAAA,WACA,SAAAA,IACA7oC,KAAA0L,QA+CA,OA7CAm9B,EAAA1oC,UAAAuL,MAAA,WACA1L,KAAA8oC,qBAAA,EACA9oC,KAAA+oC,yBAAA,EACA/oC,KAAAgpC,iBAAA,EACAhpC,KAAAipC,gBAAA,GAIAJ,EAAA1oC,UAAAwkC,gBAAA,SAAAZ,GACA,qBAAAA,EAAA/jC,KAAAgpC,iBAAAhpC,KAAAipC,iBAEAJ,EAAA1oC,UAAAmkC,kBAAA,WACA,OAAAtkC,KAAA8oC,sBAEAD,EAAA1oC,UAAAokC,sBAAA,WACA,OAAAvkC,KAAA+oC,0BAEAF,EAAA1oC,UAAA+jC,8BAAA,WACA,OAAAlkC,KAAAkpC,kCAEAL,EAAA1oC,UAAAgkC,+BAAA,WACA,OAAAnkC,KAAAmpC,mCAIAN,EAAA1oC,UAAAkmC,sBAAA,SAAAzjC,GACA5C,KAAA+oC,yBAAAnmC,GAEAimC,EAAA1oC,UAAAimC,kBAAA,SAAAtjC,GACA9C,KAAA8oC,qBAAAhmC,GAEA+lC,EAAA1oC,UAAAinC,gBAAA,SAAArD,EAAAjQ,GACA,eAAAiQ,EACA/jC,KAAAgpC,iBAAAlV,EAGA9zB,KAAAipC,gBAAAnV,GAGA+U,EAAA1oC,UAAAmmC,8BAAA,SAAAj8B,GACArK,KAAAkpC,iCAAA7+B,GAEAw+B,EAAA1oC,UAAAomC,+BAAA,SAAAp8B,GACAnK,KAAAmpC,kCAAAh/B,GAEA0+B,EAjDA;;;;2bCOAO,4FAZAC,EAAA3pC,uBAAA,8DAaA,SAAA0pC,GAIAA,EAAA,cAIAA,EAAA,sBAIAA,EAAA,4BAIAA,EAAA,wBAhBA,CAiBCA,WAKD,IAaAE,EAKAC,EAKAC,EAvBAC,GACAC,KACAN,EAAAptB,WACAotB,EAAAztB,aACAytB,EAAAvtB,UACAutB,EAAAruB,OAEA4uB,mBAAAP,EAAAztB,aAAAytB,EAAAruB,OACA6uB,cAAAR,EAAAztB,cACAkuB,QACAC,gBAAAV,EAAAvtB,UAAAutB,EAAAruB,OACAgvB,WAAAX,EAAAvtB,aAGA,SAAAytB,GACAA,EAAA,cACAA,EAAA,uBAFA,CAGCA,WAED,SAAAC,GACAA,EAAA,cACAA,EAAA,oBAFA,CAGCA,WAED,SAAAC,GACAA,EAAA,cACAA,EAAA,+BACAA,EAAA,yBAHA,CAICA,WACD,IAAAQ,EAAA,WACA,SAAAA,KAskBA,OAxiBAA,EAAAlvB,qBAAA,SAAAF,GACA,aAAAA,EAAAM,MAAA,MAAAN,EAAAI,KACAouB,EAAAruB,MAEA,MAAAH,EAAAM,KACAkuB,EAAAztB,aAEA,MAAAf,EAAAI,KACAouB,EAAAvtB,UAGAutB,EAAAptB,YAGAguB,EAAAzsB,kCAAA,SAAA3C,GAEA,OADAovB,EAAAlvB,qBAAAF,IAEA,KAAAwuB,EAAAptB,WACA,OAAwBwB,IAAA,EAAA7I,IAAA,GACxB,KAAAy0B,EAAAztB,aACA,OAAwB6B,IAAA5C,EAAAM,KAAA,GAAAvG,IAAA,GACxB,KAAAy0B,EAAAvtB,UACA,OAAwB2B,IAAA,EAAA7I,IAAAiG,EAAAI,KAAA,IACxB,KAAAouB,EAAAruB,MACA,OAAwByC,IAAA5C,EAAAM,KAAA,GAAAvG,IAAAiG,EAAAI,KAAA,IACxB,QACA,cAMAgvB,EAAAhpB,KAAA,SAAApG,GACA,IAAAmF,EAAAiqB,EAAAlvB,qBAAAF,GAIA,OAAAmF,IAAAqpB,EAAAruB,MACAivB,EAAArmC,KAAAiX,EAAAI,KAAA,GAAAJ,EAAAM,KAAA,GAAAN,EAAAI,KAAA,GAAAJ,EAAAM,KAAA,IAEA6E,IAAAqpB,EAAAztB,aACAquB,EAAA5rB,OAAAxD,EAAAM,KAAA,GAAAN,EAAAM,KAAA,IAEA6E,IAAAqpB,EAAAvtB,UACAmuB,EAAAr1B,IAAAiG,EAAAI,KAAA,GAAAJ,EAAAI,KAAA,IAGAgvB,EAAAz1B,SAMAy1B,EAAArmC,KAAA,SAAAgR,EAAA6I,EAAAysB,EAAAC,GACA,OACAhvB,KAAAlb,KAAAmqC,kBAAA3sB,EAAA0sB,GACAlvB,KAAAhb,KAAAmqC,kBAAAx1B,EAAAs1B,KAMAD,EAAAr1B,IAAA,SAAAA,EAAAs1B,GACA,OAAgBjvB,KAAAhb,KAAAmqC,kBAAAx1B,EAAAs1B,KAKhBD,EAAA5rB,OAAA,SAAAZ,EAAA0sB,GACA,OAAgBhvB,KAAAlb,KAAAmqC,kBAAA3sB,EAAA0sB,KAKhBF,EAAAz1B,MAAA,WACA,UAMAy1B,EAAAjP,IAAA,SAAA1F,EAAAza,GACA,IAAAoG,EAAAqU,EAAApQ,QAEA,OADAjE,EAAAlT,KAAA8M,GACAoG,GAMAgpB,EAAAzP,OAAA,SAAAlF,EAAAza,EAAAjH,GACA,IAAAqN,EAAAqU,EAAApQ,QAQA,OAPA,MAAAtR,EACAqN,EAAA6Z,OAAAlnB,EAAA,EAAAiH,IAGAoG,EAAAopB,MACAppB,EAAAlT,KAAA8M,IAEAoG,GAMAgpB,EAAAK,YAAA,SAAAzvB,EAAA0vB,EAAAC,GACA,IAAAxpB,EAAAipB,EAAAhpB,KAAApG,GASA,OARA,MAAAA,EAAAI,OACA+F,EAAA/F,KAAA,GAAAquB,EAAA,MAAA/iB,MAAA1L,EAAAI,KAAA,KAAAsvB,GACAvpB,EAAA/F,KAAA,GAAAquB,EAAA,MAAA/iB,MAAA1L,EAAAI,KAAA,KAAAsvB,IAEA,MAAA1vB,EAAAM,OACA6F,EAAA7F,KAAA,GAAAmuB,EAAA,MAAA/iB,MAAA1L,EAAAM,KAAA,KAAAqvB,GACAxpB,EAAA7F,KAAA,GAAAmuB,EAAA,MAAA/iB,MAAA1L,EAAAM,KAAA,KAAAqvB,IAEAxpB,GAMAipB,EAAAQ,kBAAA,SAAAnV,EAAAza,GACA,SAAAya,GAAA,IAAAA,EAAAjtB,OACA,SAEA,IAAAqiC,EAAApV,IAAAjtB,OAAA,GACA,OAAA4hC,EAAArN,aAAA8N,EAAA7vB,IAMAovB,EAAApQ,mBAAA,SAAAvE,EAAAza,GACA,SAAAya,EACA,SAEA,QAAAjoB,EAAA,EAAuBA,EAAAioB,EAAAjtB,OAAoBgF,IAC3C,GAAA48B,EAAArN,aAAAtH,EAAAjoB,GAAAwN,GACA,OAAAxN,EAGA,UAMA48B,EAAA9T,qBAAA,SAAAb,EAAAza,GACA,SAAAya,EACA,SAEA,QAAAjoB,EAAA,EAAuBA,EAAAioB,EAAAjtB,OAAoBgF,IAC3C,GAAA48B,EAAAU,eAAArV,EAAAjoB,GAAAwN,GACA,OAAAxN,EAGA,UAMA48B,EAAAtgB,cAAA,SAAA2L,EAAA7X,GACA,SAAA6X,EACA,SAEA,QAAAvpB,EAAA,EAAA6+B,EAAAtV,EAA6CvpB,EAAA6+B,EAAAviC,OAAuB0D,IAAA,CACpE,IAAA8O,EAAA+vB,EAAA7+B,GACAiU,EAAAiqB,EAAAlvB,qBAAAF,GACA,GAAAmF,IAAAqpB,EAAAptB,WACA,SAEA,GAAA+D,IAAAqpB,EAAAztB,cAAAquB,EAAAY,sBAAAhwB,EAAAM,KAAAsC,GACA,SAGA,UAMAwsB,EAAA9Y,WAAA,SAAAmE,EAAA1gB,GACA,SAAA0gB,EACA,SAEA,QAAAvpB,EAAA,EAAA++B,EAAAxV,EAA6CvpB,EAAA++B,EAAAziC,OAAuB0D,IAAA,CACpE,IAAA8O,EAAAiwB,EAAA/+B,GACAiU,EAAAiqB,EAAAlvB,qBAAAF,GACA,GAAAmF,IAAAqpB,EAAAptB,WACA,SAEA,GAAA+D,IAAAqpB,EAAAvtB,WAAAmuB,EAAAY,sBAAAhwB,EAAAI,KAAArG,GACA,SAGA,UAKAq1B,EAAAc,aAAA,SAAAzV,GACA,SAAAA,EACA,SAEA,QAAAvpB,EAAA,EAAAi/B,EAAA1V,EAA6CvpB,EAAAi/B,EAAA3iC,OAAuB0D,IAAA,CACpE,IAAA8O,EAAAmwB,EAAAj/B,GAEA,GADAk+B,EAAAlvB,qBAAAF,KACAwuB,EAAAptB,WACA,SAGA,UAKAguB,EAAAgB,eAAA,SAAA3V,EAAA4V,GACA,OAAAjB,EAAA1U,eAAAD,EAAA4V,GAAA,IAKAjB,EAAA1U,eAAA,SAAAD,EAAA4V,EAAAC,QACA,IAAAA,IAA6CA,GAAA,GAC7C,IAAAC,EAAAD,EAAAlB,EAAAoB,iBAAApB,EAAAqB,iBACA,SAAAhW,GAAA,MAAA4V,EACA,SAEA,QAAAn/B,EAAA,EAAAw/B,EAAAjW,EAA6CvpB,EAAAw/B,EAAAljC,OAAuB0D,IAAA,CACpE,IAAA8O,EAAA0wB,EAAAx/B,GAEA,OADAk+B,EAAAlvB,qBAAAF,IAEA,KAAAwuB,EAAAptB,WACA,SACA,KAAAotB,EAAAztB,aACA,GAAAwvB,EAAAvwB,EAAAM,KAAA+vB,EAAA/vB,MACA,SAEA,SACA,KAAAkuB,EAAAvtB,UACA,GAAAsvB,EAAAvwB,EAAAI,KAAAiwB,EAAAjwB,MACA,SAEA,SACA,KAAAouB,EAAAruB,MACA,GAAAowB,EAAAvwB,EAAAM,KAAA+vB,EAAA/vB,OAAAiwB,EAAAvwB,EAAAI,KAAAiwB,EAAAjwB,MACA,SAEA,UAKA,UAEAgvB,EAAAuB,qBAAA,SAAAlW,EAAAmW,GACA,SAAAnW,GAAA,IAAAA,EAAAjtB,QAAA,MAAAojC,EAAA,CAGA,IAAAC,KACApW,EAAA7oB,QAAA,SAAAoO,GACA,GAAAovB,EAAAlvB,qBAAAF,KAAAwuB,EAAAztB,aAEA,IADA,IAAA5a,EAAA6Z,EAAAM,KAAAf,EAAApZ,EAAA,GAAAqZ,EAAArZ,EAAA,GACAyc,EAAArD,EAAqCqD,GAAApD,EAAYoD,IACjDiuB,EAAAjuB,KACAiuB,EAAAjuB,IAAA,EACAguB,EAAAhuB,QAMAwsB,EAAA0B,kBAAA,SAAArW,EAAAmW,GACA,SAAAnW,GAAA,IAAAA,EAAAjtB,QAAA,MAAAojC,EAAA,CAGA,IAAAC,KACApW,EAAA7oB,QAAA,SAAAoO,GACA,GAAAovB,EAAAlvB,qBAAAF,KAAAwuB,EAAAvtB,UAEA,IADA,IAAA9a,EAAA6Z,EAAAI,KAAAb,EAAApZ,EAAA,GAAAqZ,EAAArZ,EAAA,GACA4T,EAAAwF,EAAqCxF,GAAAyF,EAAYzF,IACjD82B,EAAA92B,KACA82B,EAAA92B,IAAA,EACA62B,EAAA72B,QAWAq1B,EAAAtU,qBAAA,SAAAL,EAAAhd,EAAAJ,GACA,SAAAod,GAAA,IAAAA,EAAAjtB,OACA,SAIA,IAFA,IAAAqjC,KACAE,KACA7/B,EAAA,EAAA8/B,EAAAvW,EAA6CvpB,EAAA8/B,EAAAxjC,OAAuB0D,IAAA,CACpE,IAAA8O,EAAAgxB,EAAA9/B,GACAk+B,EAAA6B,iBAAAjxB,EAAAvC,EAAAJ,EAAA,SAAAtD,EAAA6I,GAEA,IAAArX,EAAAwO,EAAA,IAAA6I,GACA,IAAAiuB,EAAAtlC,KACAslC,EAAAtlC,IAAA,EACAwlC,EAAA79B,MAAA6G,EAAA6I,OAMA,OADAmuB,EAAAG,KAAA9B,EAAA+B,oBACAJ,GAMA3B,EAAAgC,wBAAA,SAAApxB,EAAAvC,EAAAJ,GAEA,OADA+xB,EAAAlvB,qBAAAF,IAEA,KAAAwuB,EAAAptB,WACA,OAAAguB,EAAArmC,KAAA,IAAA0U,EAAA,EAAAJ,EAAA,GACA,KAAAmxB,EAAAztB,aACA,OAAAquB,EAAArmC,KAAA,EAAAiX,EAAAM,KAAA,GAAA7C,EAAA,EAAAuC,EAAAM,KAAA,IACA,KAAAkuB,EAAAvtB,UACA,OAAAmuB,EAAArmC,KAAAiX,EAAAI,KAAA,KAAAJ,EAAAI,KAAA,GAAA/C,EAAA,GACA,KAAAmxB,EAAAruB,MACA,OAAAivB,EAAArmC,KAAAiX,EAAAI,KAAA,GAAAJ,EAAAM,KAAA,GAAAN,EAAAI,KAAA,GAAAJ,EAAAM,KAAA,IACA,QACA,cAYA8uB,EAAAjV,eAAA,SAAAzgB,EAAA23B,GACA,IAAAC,EAAAlC,EAAAmC,kBAAA73B,GACA,SAAA43B,EACA,YAEA,IAAA7zB,EAAA6zB,EAAAlxB,KAAA,KAAAkxB,EAAAlxB,KAAA,GACA/C,EAAAi0B,EAAAhxB,KAAA,KAAAgxB,EAAAhxB,KAAA,GACAtN,EAAAy7B,EAAA,MAAAvlB,MAAAzL,EAAA,WAAuD,WAAA2L,MAAA/L,KAKvD,OAJA3D,EAAA9H,QAAA,SAAAzL,GACA,IAAA4T,EAAA5T,EAAA,GAAAyc,EAAAzc,EAAA,GACA6M,EAAA+G,EAAAu3B,EAAAlxB,KAAA,IAAAwC,EAAA0uB,EAAAhxB,KAAA,IAAA+wB,EAAAt3B,EAAA6I,KAEA5P,GAMAo8B,EAAAmC,kBAAA,SAAA73B,GAKA,IAJA,IAAA83B,EACAC,EACAC,EACAC,EACAzgC,EAAA,EAAA4I,EAAAJ,EAAyCxI,EAAA4I,EAAAtM,OAAqB0D,IAAA,CAC9D,IAAA/K,EAAA2T,EAAA5I,GAAA6I,EAAA5T,EAAA,GAAAyc,EAAAzc,EAAA,GACAqrC,EAAA,MAAAA,GAAAz3B,EAAAy3B,EAAAz3B,EAAAy3B,EACAC,EAAA,MAAAA,GAAA13B,EAAA03B,EAAA13B,EAAA03B,EACAC,EAAA,MAAAA,GAAA9uB,EAAA8uB,EAAA9uB,EAAA8uB,EACAC,EAAA,MAAAA,GAAA/uB,EAAA+uB,EAAA/uB,EAAA+uB,EAEA,aAAAH,EACA,MAGAlxB,MAAAoxB,EAAAC,GACAvxB,MAAAoxB,EAAAC,KAGArC,EAAAjU,QAAA,SAAAnb,GACA,aAAAA,KAGA,MAAAA,EAAAI,QAAAJ,EAAAI,KAAA,MAAAJ,EAAAI,KAAA,SAGA,MAAAJ,EAAAM,QAAAN,EAAAM,KAAA,MAAAN,EAAAM,KAAA,SAKA8uB,EAAAwC,sBAAA,SAAA5xB,EAAAvC,EAAAJ,GACA,WAAAI,GAAA,IAAAJ,MAGA,MAAA2C,EAAAI,OAAAyxB,EAAA7xB,EAAAI,KAAA,EAAA3C,EAAA,OAGA,MAAAuC,EAAAM,OAAAuxB,EAAA7xB,EAAAM,KAAA,EAAAjD,EAAA,MAKA+xB,EAAA0C,uBAAA,SAAA3vB,EAAA4vB,EAAA3vB,GACA,IAAA4vB,KAgBA,OAfA,MAAAD,IACAC,IAAAC,OAAAF,IAEA,MAAA5vB,KAAA3U,OAAA,GACAwkC,EAAA9+B,MACApM,UAAAy2B,EAAA,uBACA9C,QAAAtY,IAGA,MAAAC,GACA4vB,EAAA9+B,MACApM,UAAAy2B,EAAA,mBACA9C,SAAA2U,EAAArmC,KAAAqZ,EAAArI,IAAAqI,EAAAQ,QAGAovB,GAEA5C,EAAArN,aAAA,SAAAmQ,EAAAC,GACA,OAAA/C,EAAAgD,eAAAF,EAAA9xB,KAAA+xB,EAAA/xB,OAAAgvB,EAAAgD,eAAAF,EAAA5xB,KAAA6xB,EAAA7xB,OAQA8uB,EAAArO,aAAA,SAAAsR,EAAAjvB,GACA,IAAAkvB,EAAAlD,EAAAlvB,qBAAAmyB,GACAE,EAAAnD,EAAAlvB,qBAAAkD,GACA,GAAAmvB,IAAAD,EACA,OAAAlvB,EAEA,OAAAmvB,GACA,KAAA/D,EAAAvtB,UACA,IAAAZ,EAAAjB,KAAAiC,IAAAgxB,EAAAjyB,KAAA,GAAAgD,EAAAhD,KAAA,IACAR,EAAAR,KAAAC,IAAAgzB,EAAAjyB,KAAA,GAAAgD,EAAAhD,KAAA,IACA,OAAAgvB,EAAAr1B,IAAAsG,EAAAT,GAEA,KAAA4uB,EAAAztB,aACA,IAAAR,EAAAnB,KAAAiC,IAAAgxB,EAAA/xB,KAAA,GAAA8C,EAAA9C,KAAA,IACAE,EAAApB,KAAAC,IAAAgzB,EAAA/xB,KAAA,GAAA8C,EAAA9C,KAAA,IACA,OAAA8uB,EAAA5rB,OAAAjD,EAAAC,GAEA,KAAAguB,EAAAruB,MACAE,EAAAjB,KAAAiC,IAAAgxB,EAAAjyB,KAAA,GAAAgD,EAAAhD,KAAA,IACAG,EAAAnB,KAAAiC,IAAAgxB,EAAA/xB,KAAA,GAAA8C,EAAA9C,KAAA,IACAV,EAAAR,KAAAC,IAAAgzB,EAAAjyB,KAAA,GAAAgD,EAAAhD,KAAA,IACAI,EAAApB,KAAAC,IAAAgzB,EAAA/xB,KAAA,GAAA8C,EAAA9C,KAAA,IACA,OAAA8uB,EAAArmC,KAAAsX,EAAAE,EAAAX,EAAAY,GAEA,QACA,OAAA4uB,EAAAz1B,UAOAy1B,EAAA6B,iBAAA,SAAAjxB,EAAAvC,EAAAJ,EAAAuzB,GAEA,OADAxB,EAAAlvB,qBAAAF,IAEA,KAAAwuB,EAAAptB,WACA,QAAArH,EAAA,EAAiCA,EAAA0D,EAAe1D,IAChD,QAAA6I,EAAA,EAAqCA,EAAAvF,EAAeuF,IACpDguB,EAAA72B,EAAA6I,GAGA,MACA,KAAA4rB,EAAAztB,aACA,IAAAhH,EAAA,EAAiCA,EAAA0D,EAAe1D,IAChD,IAAA6I,EAAA5C,EAAAM,KAAA,GAAkDsC,GAAA5C,EAAAM,KAAA,GAAuBsC,IACzEguB,EAAA72B,EAAA6I,GAGA,MACA,KAAA4rB,EAAAvtB,UACA,IAAAlH,EAAAiG,EAAAI,KAAA,GAA8CrG,GAAAiG,EAAAI,KAAA,GAAuBrG,IACrE,IAAA6I,EAAA,EAAqCA,EAAAvF,EAAeuF,IACpDguB,EAAA72B,EAAA6I,GAGA,MACA,KAAA4rB,EAAAruB,MACA,IAAApG,EAAAiG,EAAAI,KAAA,GAA8CrG,GAAAiG,EAAAI,KAAA,GAAuBrG,IACrE,IAAA6I,EAAA5C,EAAAM,KAAA,GAAkDsC,GAAA5C,EAAAM,KAAA,GAAuBsC,IACzEguB,EAAA72B,EAAA6I,KAQAwsB,EAAAU,eAAA,SAAAoC,EAAAC,GAEA,OAAA/C,EAAA1U,gBAAAwX,GAAAC,GAAA,IAEA/C,EAAAgD,eAAA,SAAAI,EAAAC,GACA,aAAAD,EACA,MAAAC,EAEA,MAAAA,IAIAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,KAGArD,EAAAY,sBAAA,SAAA0C,EAAA35B,GACA,aAAA25B,IAGAA,EAAA,IAAA35B,GAAA25B,EAAA,IAAA35B,IAEAq2B,EAAAqB,iBAAA,SAAA+B,EAAAC,GACA,aAAAD,GAAA,MAAAC,IAGAD,EAAA,IAAAC,EAAA,IAAAA,EAAA,IAAAD,EAAA,KAEApD,EAAAoB,iBAAA,SAAAgC,EAAAC,GACA,aAAAD,GAAA,MAAAC,KAGAD,EAAA,GAAAC,EAAA,IAAAD,EAAA,GAAAC,EAAA,KAKArD,EAAA+B,mBAAA,SAAAx+B,EAAAC,GACA,IAAA+/B,EAAAhgC,EAAA,GAAAC,EAAA,GACA,WAAA+/B,EAAAhgC,EAAA,GAAAC,EAAA,GAAA+/B,GAEAvD,EAAAwD,oBAAA,SAAAjgC,EAAAC,GACA,OAAAD,EAAAC,GAEAw8B,EAAAG,kBAAA,SAAAxc,EAAA8f,GACA,MAAAA,IACAA,EAAA9f,GAEA,IAAA2f,GAAA3f,EAAA8f,GAEA,OADAH,EAAAxB,KAAA9B,EAAAwD,qBACAF,GAEAtD,EAvkBA,GA0kBA,SAAAyC,EAAAa,EAAAI,EAAAC,GACA,OAAAC,EAAAN,EAAA,GAAAI,EAAAC,IACAC,EAAAN,EAAA,GAAAI,EAAAC,GAEA,SAAAC,EAAAvpC,EAAAqpC,EAAAC,GACA,OAAAtpC,GAAAqpC,GAAArpC,GAAAspC;;;;ihFC/oBAE,EAAAnuC,oBAAA,0DAiCAouC,EAAA,SAAAhuC,GAEA,SAAAguC,EAAAttC,EAAA+C,GACA,IAAAC,EAAA1D,EAAA2D,KAAAzD,KAAAQ,EAAA+C,IAAAvD,KACAwD,EAAAE,aACAqqC,cAAA,SAAA9qC,GAA2C,OAAAO,EAAAy5B,qBAAAh6B,GAC3C2+B,aAAA,SAAA3+B,GAA0C,OAAAO,EAAAwqC,oBAAA/qC,GAC1CgrC,aAAA,SAAAhrC,GAA0C,OAAAO,EAAA0qC,oBAAAjrC,GAC1CkrC,cAAA,SAAAlrC,GAA2C,OAAAO,EAAA4qC,sBAAAnrC,GAC3CorC,UAAA,SAAAprC,GAAuC,OAAAO,EAAA8qC,iBAAArrC,GACvCu/B,UAAA,SAAAv/B,GAAuC,OAAAO,EAAA+qC,iBAAAtrC,GACvCkgC,gBAAA,SAAAlgC,GAA6C,OAAAO,EAAAw5B,uBAAA/5B,IAK7CO,EAAAgrC,2BAAA,EAGAhrC,EAAAirC,oBAAA,EAGAjrC,EAAAkrC,wBAAA,SAAA/4B,GAAsD,OAAAnS,EAAAmrC,sBAAAh5B,EAAAi5B,EAAA,UAAAnyB,KACtDjZ,EAAAqrC,0BAAA,SAAAl5B,GAAwD,OAAAnS,EAAAmrC,sBAAAh5B,EAAAi5B,EAAA,UAAAlyB,OACxDlZ,EAAAsrC,0BAAA,SAAAn5B,GAAwD,OAAAnS,EAAAmrC,sBAAAh5B,EAAAi5B,EAAA,UAAAjyB,OACxDnZ,EAAAurC,2BAAA,SAAAp5B,GAAyD,OAAAnS,EAAAmrC,sBAAAh5B,EAAAi5B,EAAA,UAAAhyB,QACzDpZ,EAAAmrC,sBAAA,SAAAh5B,EAAA6G,GACA7G,EAAA3P,iBACA2P,EAAA1P,kBACA,IAAAlF,EAAAyC,EAAAK,MAAAmZ,EAAAjc,EAAAic,YAAAD,EAAAhc,EAAAgc,gBACA,OAAAA,EAAA3U,OAAA,CAGA,IAAAuL,EAAAq7B,EAAA,8BAAAjyB,EAAAC,GACApC,EAAAmC,EAAApJ,GACAoN,EAAAkuB,EAAA,aAAAr0B,EAAA4B,EAAAQ,GACAxZ,EAAA0rC,4BAAAnuB,EAAApN,KAEAnQ,EAAA2rC,WAAA,SAAAx5B,GACA,IAAA5U,EAAAyC,EAAAhD,MAAA4uC,EAAAruC,EAAAquC,qBAAAxa,EAAA7zB,EAAA6zB,OACA7X,EAAAvZ,EAAAK,MAAAkZ,gBACA,SAAAqyB,EAAA,CAIAz5B,EAAA3P,iBACA2P,EAAA1P,kBACA,IAAAqO,EAAA+6B,EAAA,QAAA3Z,qBAAA3Y,EAAAvZ,EAAAwkB,KAAA3P,QAAA7U,EAAAwkB,KAAA/P,SACA6c,EAAAua,EAAA,QAAAta,eAAAzgB,EAAA86B,GACA,SAAAta,EAAA,CACA,IAAAE,EAAAsa,EAAA,UAAAj7B,UAAAygB,GACAjsB,EAAA,MAAAlC,WAAAiuB,EAAAI,MAGAxxB,EAAA+rC,WAAA,SAAA5N,GACA,IAIA5gC,EAJAa,EAAA2G,IAAAinC,EAAA,aAAAzuC,MACAyuC,EAAA,yBAAAhsC,EAAAisC,uBAAAJ,EAAA,kBAAArzB,YACAjb,IACA,OAAAyH,EAAA,qBAAgD9G,UAAAE,EAAAqB,IAAA0+B,EAAA+N,YAAAlsC,EAAAmsC,qBAA8EnsC,EAAAosC,mBAAApsC,EAAAqsC,mBAG9HrsC,EAAAmsC,oBAAA,SAAAh6B,GAGAnS,EAAAssC,WAAAn6B,EAAAilB,WAEAp3B,EAAAssC,UAAA,SAAAC,GAKA,GAJAvsC,EAAAwsC,2BAAAX,EAAA,kBAAArzB,WAGAi0B,EAAAZ,EAAA,QAAA96B,UACAw7B,EAAA,CACA,IAAAG,EAAAb,EAAA,QAAA9xB,kCAAA8xB,EAAA,QAAA96B,SACA/Q,EAAA2sC,YAAAnB,EAAA,kBAAAkB,MAGA1sC,EAAA4sC,sBAAA,SAAAz6B,GAEAA,EAAA3P,iBACA2P,EAAA1P,kBAEAzC,EAAAssC,WAAA,IAEAtsC,EAAA28B,yBAAA,SAAAz5B,GACA,IAAAlG,EAAAgD,EAAA6sC,eAAA3pC,GACA4pC,GAAA9vC,EAAA+vC,GAAA/vC,EAAA8vC,gBAAAnQ,GAAA3/B,EAAAuK,aAAAvK,EAAA2/B,0BAAA76B,EAAApF,EAAA,OAAAM,GAAA,kEACAgwC,EAAAhtC,EAAAitC,iBAAAH,EAAAjB,EAAA,oBAAAqB,QACA,SAAAvQ,EAAA,CACA,IAAAwQ,EAAAxQ,EAAAz5B,GACAkqC,EAAAD,EAAAnwC,MAAAe,QACAsvC,GACAtvC,QAAA,MAAAqvC,IAAAJ,GAEA,OAAAhoC,EAAA,aAAAmoC,EAAAE,GAEA,IAAA/I,EAAA5nC,EAAA,UAA8CyT,MAAAjN,EAAAnF,QAAAivC,GAA6ClrC,GAC3F,aAAA9E,EAAAyrB,KACAzjB,EAAA,cAAAsoC,EAAA,iBAAA5wC,EAAA,YAAgF4nC,IAGhFt/B,EAAA,cAAAsoC,EAAA,iBAAA5wC,EAAA,YAAgF4nC,GAAc7b,KAAA8kB,EAAA,MAAA3sB,cAAA1d,OAG9FlD,EAAAwtC,mBAAA,SAAArP,EAAAE,EAAAE,EAAAjC,QACA,IAAAA,IAAmDA,GAAA,GACnD,IAWAh/B,EAXAC,EAAAyC,EAAAK,MAAAmZ,EAAAjc,EAAAic,YAAAD,EAAAhc,EAAAgc,gBAAAk0B,EAAAlwC,EAAAkwC,aACApwC,EAAA2C,EAAAhD,MAAAquB,EAAAhuB,EAAAguB,wBAAAqiB,EAAArwC,EAAAqwC,iBAAAplB,EAAAjrB,EAAAirB,uBAAAqlB,EAAAtwC,EAAAswC,qBAAAb,EAAAzvC,EAAAyvC,eAAAnnB,EAAAtoB,EAAAsoB,eAAAD,EAAAroB,EAAAqoB,eAAAqG,EAAA1uB,EAAA0uB,wBACA3tB,EAAA2G,IAAAinC,EAAA,uBAAA1uC,MACA0uC,EAAA,yBAAAhsC,EAAAisC,uBAAAJ,EAAA,kBAAA1zB,cACA7a,IACAswC,EAAA5tC,EAAAwkB,KAAAxO,uBAAAy3B,EAAAC,GACAz3B,EAAAqmB,EAAA,EAAAsR,EAAA33B,iBACAC,EAAAomB,EAAAt8B,EAAA6tC,0BAAAD,EAAA13B,eACA,OAAAlR,EAAA,qBAAgD9G,UAAAE,GAChD4G,EAAA,cAAA8oC,EAAA,cAAmDziB,0BAAA9jB,aAAAvH,EAAA28B,yBAAAnjB,cAAAgL,KAAAxkB,EAAAwkB,KAAAkD,cAAAY,EAAAX,YAAAgmB,EAAA5vC,QAAAiC,EAAAitC,iBAAAH,EAAAjB,EAAA,mBAAAkC,gBAAAhpB,QAAA/kB,EAAA+kB,QAAAY,iBAAAhB,qBAAAwZ,EAAAzY,iBAAAF,qBAAAxlB,EAAAguC,yBAAAtiB,cAAA1rB,EAAA2sC,YAAA1gB,aAAAjsB,EAAAiuC,iBAAAlhB,YAAA/sB,EAAAkuC,uBAAAlhB,aAAAuR,EAAAhZ,cAAA8Y,EAAA1S,YAAA3rB,EAAAwsC,2BAAAX,EAAA,kBAAA1zB,cAAAoB,kBAAAwS,0BAAA9V,mBAAAC,kBAAo3BlW,EAAAhD,MAAA4B,UACv6BoB,EAAAosC,mBAAApsC,EAAAmuC,2BAGAnuC,EAAAouC,gBAAA,SAAAjQ,EAAAE,EAAAE,EAAApC,QACA,IAAAA,IAAgDA,GAAA,GAChD,IAWA7+B,EAXAC,EAAAyC,EAAAK,MAAAmZ,EAAAjc,EAAAic,YAAAD,EAAAhc,EAAAgc,gBAAAk0B,EAAAlwC,EAAAkwC,aACApwC,EAAA2C,EAAAhD,MAAAquB,EAAAhuB,EAAAguB,wBAAAqiB,EAAArwC,EAAAqwC,iBAAArf,EAAAhxB,EAAAgxB,oBAAAggB,EAAAhxC,EAAAgxC,kBAAAvB,EAAAzvC,EAAAyvC,eAAAjf,EAAAxwB,EAAAwwB,aAAAD,EAAAvwB,EAAAuwB,aAAAD,EAAAtwB,EAAAswB,sBAAA5B,EAAA1uB,EAAA0uB,wBACA3tB,EAAA2G,IAAAinC,EAAA,oBAAA1uC,MACA0uC,EAAA,yBAAAhsC,EAAAisC,uBAAAJ,EAAA,kBAAAxzB,WACA/a,IACAgxC,EAAAtuC,EAAAwkB,KAAA3O,oBAAA43B,EAAAC,GACA53B,EAAAqmB,EAAA,EAAAmS,EAAAx4B,cACAC,EAAAomB,EAAAn8B,EAAAuuC,uBAAAD,EAAAv4B,YACA,OAAA/Q,EAAA,qBAAgD9G,UAAAE,EAAAqB,IAAA0+B,GAChDn5B,EAAA,cAAAwpC,EAAA,WAAgDnjB,0BAAA7R,cAAAgL,KAAAxkB,EAAAwkB,KAAAO,QAAA/kB,EAAA+kB,QAAA2C,cAAA2G,EAAA1G,YAAA0mB,EAAAtwC,QAAAiC,EAAAitC,iBAAAH,EAAAjB,EAAA,mBAAA4C,aAAA5gB,eAAAD,eAAAlC,cAAA1rB,EAAA2sC,YAAA1gB,aAAAjsB,EAAAiuC,iBAAA1oB,cAAA8Y,EAAAtR,YAAA/sB,EAAA0uC,oBAAA1hB,aAAAuR,EAAA/Q,mBAAAxtB,EAAA2uC,uBAAAhjB,YAAA3rB,EAAAwsC,2BAAAX,EAAA,kBAAAxzB,WAAAsV,wBAAApU,kBAAAwS,0BAAAjW,gBAAAC,gBAChD/V,EAAAosC,mBAAApsC,EAAA4uC,wBAGA5uC,EAAA6uC,iBAAA,SAAA5rC,EAAAC,GACA,IAAA3F,EAAAyC,EAAA6sC,eAAA3pC,GAAA4pC,GAAAvvC,EAAAwvC,GAAAxvC,EAAAuvC,gBAAAvlC,EAAAhK,EAAAgK,aAAAunC,GAAAvxC,EAAAo/B,yBAAAp/B,EAAAkrB,KAAAlrB,EAAAmrB,aAAAhsB,EAAA,OAAAa,GAAA,yFACA4C,EAAAoH,EAAAtE,EAAAC,GACA7F,EAAA8C,EAAAnD,MAAAe,eAAA,IAAAV,EAAA2C,EAAAitC,iBAAAH,EAAAjB,EAAA,oBAAAt0B,OAAAla,EACA4tB,EAAAvuB,EAAA,YAA+CoyC,GAAoB/wC,YACnE,OAAAiH,EAAA,aAAA7E,EAAA8qB,IAEAjrB,EAAA+uC,WAAA,SAAA9S,EAAAE,EAAAG,QACA,IAAAH,IAAgDA,GAAA,QAChD,IAAAG,IAAmDA,GAAA,GACnD,IAAA/+B,EAAAyC,EAAAK,MAAAmZ,EAAAjc,EAAAic,YAAA8C,EAAA/e,EAAAyxC,wBAAA3yB,EAAA9e,EAAA0xC,qBAAA11B,EAAAhc,EAAAgc,gBAAAk0B,EAAAlwC,EAAAkwC,aACApwC,EAAA2C,EAAAhD,MAAAquB,EAAAhuB,EAAAguB,wBAAAqiB,EAAArwC,EAAAqwC,iBAAAZ,EAAAzvC,EAAAyvC,eAAAoC,EAAA7xC,EAAA6xC,wBAAAnjB,EAAA1uB,EAAA0uB,wBACAuiB,EAAAtuC,EAAAwkB,KAAA3O,oBAAA43B,EAAAC,GACAE,EAAA5tC,EAAAwkB,KAAAxO,uBAAAy3B,EAAAC,GAGAz3B,EAAAqmB,EAAA,EAAAsR,EAAA33B,iBAAAqG,EACAxG,EAAAqmB,EAAA,EAAAmS,EAAAx4B,cAAAuG,EAIAnG,EAAAomB,EAAAhgB,EAAA,EAAAsxB,EAAA13B,eACAH,EAAAomB,EAAA9f,EAAA,EAAAiyB,EAAAv4B,YAEAo5B,EAAAlT,IAAAmT,EAAA,aAAAlS,KAAAl9B,EAAAqvC,0BAAAvuC,EACA,OAAAkE,EAAA,yBACAA,EAAA,cAAAqlC,EAAA,WAAgDhf,0BAAA9jB,aAAAvH,EAAA6uC,iBAAAr1B,cAAAgL,KAAAxkB,EAAAwkB,KAAAzmB,QAAAiC,EAAAitC,iBAAAH,EAAAjB,EAAA,mBAAAt0B,OAAAwN,QAAA/kB,EAAA+kB,QAAAoqB,mBAAAzjB,cAAA1rB,EAAA2sC,YAAAhhB,YAAA3rB,EAAAwsC,2BAAAX,EAAA,kBAAAt0B,OAAA23B,0BAAAI,WAAAtvC,EAAAuvC,0BAAAh2B,kBAAAwS,0BAAA0hB,eAAAx3B,mBAAAC,iBAAAJ,gBAAAC,cAAAuG,iBAAAggB,EAAAhgB,OAAAxb,EAAAub,cAAA8f,EAAA9f,OAAAvb,IAChDd,EAAAosC,mBAAApsC,EAAAwvC,gBAAAvT,KAEAj8B,EAAAqvC,qBAAA,WAKA,MAAArvC,EAAAK,MAAAotC,eACApoC,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAAmyC,kBACAnvC,EAAAirC,oBAAA,IAGAjrC,EAAAyvC,oBAAA,SAAAt9B,GAAkD,OAAAnS,EAAA0vC,gBAAAv9B,EAAA,SAClDnS,EAAA2vC,4BAAA,SAAAx9B,GAA0D,OAAAnS,EAAA4vC,wBAAAz9B,EAAA,SAC1DnS,EAAA6vC,qBAAA,SAAA19B,GAAmD,OAAAnS,EAAA0vC,gBAAAv9B,EAAA,UACnDnS,EAAA8vC,6BAAA,SAAA39B,GAA2D,OAAAnS,EAAA4vC,wBAAAz9B,EAAA,UAC3DnS,EAAA+vC,kBAAA,SAAA59B,GAAgD,OAAAnS,EAAA0vC,gBAAAv9B,EAAA,OAChDnS,EAAAgwC,0BAAA,SAAA79B,GAAwD,OAAAnS,EAAA4vC,wBAAAz9B,EAAA,OACxDnS,EAAAiwC,oBAAA,SAAA99B,GAAkD,OAAAnS,EAAA0vC,gBAAAv9B,EAAA,SAClDnS,EAAAkwC,4BAAA,SAAA/9B,GAA0D,OAAAnS,EAAA4vC,wBAAAz9B,EAAA,SAC1DnS,EAAAwvC,gBAAA,SAAAp4B,EAAA6kB,GACA,IAAA3f,EAAAtc,EAAAhD,MAAAsf,iBACAC,EAAAsvB,EAAA,QAAAv0B,qBAAAF,GACAja,EAAA6C,EAAAwkB,KAAArN,eAAAC,GAEA+4B,GAAAlU,IAAAmT,EAAA,aAAA/S,UAAAJ,IAAAmT,EAAA,aAAAj2B,OACA,MAAAmD,GACAA,EAAA,EACA8zB,EAAApwC,EAAAwkB,KAAAnP,YACAg7B,EAAArwC,EAAAwkB,KAAAlP,WAIA,OAAAiH,GACA,KAAAsvB,EAAA,kBAAAt0B,MACA,OAAApa,EACA,KAAA0uC,EAAA,kBAAA1zB,aAGA,OAFAhb,EAAA8X,IALA,OAMA9X,EAAAiC,OAAAgxC,EAPA,EAQAjzC,EACA,KAAA0uC,EAAA,kBAAAxzB,UAMA,OALAlb,EAAA+X,KATA,OAUA/X,EAAAmC,MAAA+wC,EAXA,EAYAF,IACAhzC,EAAAob,MAZA,QAcApb,EACA,KAAA0uC,EAAA,kBAAArzB,WAQA,OAPArb,EAAA+X,KAhBA,OAiBA/X,EAAA8X,IAjBA,OAkBA9X,EAAAmC,MAAA+wC,EAnBA,EAoBAlzC,EAAAiC,OAAAgxC,EApBA,EAqBAD,IACAhzC,EAAAob,MArBA,QAuBApb,EACA,QACA,OAA4B0a,QAAA,UAG5B7X,EAAAqsC,gBAAA,SAAAj1B,GAEA,SADApX,EAAAK,MAAAotC,aAEA,SAEA,IAAAlxB,EAAAsvB,EAAA,QAAAv0B,qBAAAF,GACAja,EAAA6C,EAAAwkB,KAAArN,eAAAC,GACA,OAAAmF,GACA,KAAAsvB,EAAA,kBAAArzB,WAOA,OANArb,EAAAob,MAAA,MACApb,EAAAib,OAAA,MACAjb,EAAA8X,IAAA,MACA9X,EAAA+X,KAAA,MACA/X,EAAAmzC,aAAA,OACAnzC,EAAAozC,YAAA,OACApzC,EACA,QACA,OAA4B0a,QAAA,UAG5B7X,EAAAmuC,wBAAA,SAAA/2B,GAEA,SADApX,EAAAK,MAAAotC,aAEA,SAEA,IAAAlxB,EAAAsvB,EAAA,QAAAv0B,qBAAAF,GACAja,EAAA6C,EAAAwkB,KAAArN,eAAAC,GACA,OAAAmF,GACA,KAAAsvB,EAAA,kBAAArzB,WAIA,OAHArb,EAAA+X,KAAA,OACA/X,EAAAqzC,WAAA,OACArzC,EAAAib,OAAA,OACAjb,EACA,KAAA0uC,EAAA,kBAAA1zB,aAEA,OADAhb,EAAAib,OAAA,OACAjb,EACA,QACA,OAA4B0a,QAAA,UAG5B7X,EAAA4uC,qBAAA,SAAAx3B,GAEA,SADApX,EAAAK,MAAAotC,aAEA,SAEA,IAAAlxB,EAAAsvB,EAAA,QAAAv0B,qBAAAF,GACAja,EAAA6C,EAAAwkB,KAAArN,eAAAC,GACA,OAAAmF,GACA,KAAAsvB,EAAA,kBAAArzB,WAIA,OAHArb,EAAA8X,IAAA,OACA9X,EAAAszC,UAAA,OACAtzC,EAAAob,MAAA,OACApb,EACA,KAAA0uC,EAAA,kBAAAxzB,UAEA,OADAlb,EAAAob,MAAA,OACApb,EACA,QACA,OAA4B0a,QAAA,UAG5B7X,EAAAguC,yBAAA,SAAA9qC,EAAA5D,GACA,IAAAia,EAAAvZ,EAAAK,MAAAkZ,gBACAvF,EAAAhU,EAAAK,MAAA2T,aAAAyN,QACA,GAAAoqB,EAAA,QAAAvE,aAAA/tB,GACA,QAAAS,EAAA,EAAiCA,EAAAhG,EAAApP,OAA2BoV,IAC5DhG,EAAAgG,GAAA1a,EAGAusC,EAAA,QAAA3lB,cAAA3M,EAAArW,GACA2oC,EAAA,QAAA9D,qBAAAxuB,EAAA,SAAAS,GACAhG,EAAAgG,GAAA1a,IAIA0U,EAAA9Q,GAAA5D,EAEAU,EAAA0wC,iBACA1wC,EAAAgrC,2BAAA,EACAhrC,EAAAQ,UAA4BwT,iBAC5B,IAAAwR,EAAAxlB,EAAAhD,MAAAwoB,qBACA,MAAAA,GACAA,EAAAtiB,EAAA5D,IAGAU,EAAA2uC,uBAAA,SAAA1rC,EAAA7D,GACA,IAAAma,EAAAvZ,EAAAK,MAAAkZ,gBACAxF,EAAA/T,EAAAK,MAAA0T,WAAA0N,QACA,GAAAoqB,EAAA,QAAAvE,aAAA/tB,GACA,QAAApI,EAAA,EAAiCA,EAAA4C,EAAAnP,OAAyBuM,IAC1D4C,EAAA5C,GAAA/R,EAGAysC,EAAA,QAAAne,WAAAnU,EAAAtW,GACA4oC,EAAA,QAAA3D,kBAAA3uB,EAAA,SAAApI,GACA4C,EAAA5C,GAAA/R,IAIA2U,EAAA9Q,GAAA7D,EAEAY,EAAA0wC,iBACA1wC,EAAAgrC,2BAAA,EACAhrC,EAAAQ,UAA4BuT,eAC5B,IAAAyZ,EAAAxtB,EAAAhD,MAAAwwB,mBACA,MAAAA,GACAA,EAAAvqB,EAAA7D,IAGAY,EAAA2wC,iBAAA,SAAArvC,GAKA,MAAAtB,EAAA8qC,mBACA9qC,EAAA8qC,iBAAAruB,WAAA,EACAzc,EAAA8qC,iBAAAtuB,UAAA,IAGAxc,EAAA4wC,iBAAA,SAAAj1B,GAIA,GADAA,EAAAlZ,kBACA,MAAAzC,EAAA+kB,UAAA/kB,EAAAK,MAAAwwC,eAAA,CACA,IAAApD,EAAAztC,EAAA+kB,QAAA2V,kBACA16B,EAAA8wC,mBAAArD,KAGAztC,EAAA+wC,eAAA,SAAAC,GACAhxC,EAAAixC,qBAIAjxC,EAAA0vC,gBAAA,SAAAv9B,EAAA6G,GACA7G,EAAA3P,iBACA2P,EAAA1P,kBACA,IAAA+W,EAAAxZ,EAAAK,MAAAmZ,YACA,SAAAA,EAAA,CAKA,IAAA03B,GAAkCl3B,IAAAR,EAAAQ,IAAA7I,IAAAqI,EAAArI,IAAAsI,oBAAA,GAClC,OAAAT,GACA,SACAk4B,EAAA//B,KAAA,EACA,MACA,WACA+/B,EAAA//B,KAAA,EACA,MACA,WACA+/B,EAAAl3B,KAAA,EACA,MACA,YACAk3B,EAAAl3B,KAAA,EAKA,KAAAk3B,EAAA//B,IAAA,GACA+/B,EAAA//B,KAAAnR,EAAAwkB,KAAA3P,SACAq8B,EAAAl3B,IAAA,GACAk3B,EAAAl3B,KAAAha,EAAAwkB,KAAA/P,SAHA,CAOA,IAAA08B,GAAAtF,EAAA,QAAA1rC,KAAA+wC,EAAA//B,IAAA+/B,EAAAl3B,MACAha,EAAAixC,gBAAAE,GACAnxC,EAAA2sC,YAAAuE,GAEAlxC,EAAAoxC,wBAAAF,MAIAlxC,EAAA4vC,wBAAA,SAAAz9B,EAAA6G,GACA7G,EAAA3P,iBACA2P,EAAA1P,kBACA,IAAAlF,EAAAyC,EAAAK,MAAAmZ,EAAAjc,EAAAic,YAAAD,EAAAhc,EAAAgc,gBACA,SAAAC,EAAA,CAKA,IAAA03B,GACAl3B,IAAAR,EAAAQ,IACAP,oBAAAD,EAAAC,oBACAtI,IAAAqI,EAAArI,KAGA,SAAAqI,EAAAC,qBAAAF,EAAA3U,OAAA,GAEAssC,GACAl3B,KAFAq3B,EAAAxF,EAAA,QAAArD,wBAAAjvB,EAAA,GAAAvZ,EAAAwkB,KAAA3P,QAAA7U,EAAAwkB,KAAA/P,UAEAiD,KAAA,GACA+B,oBAAA,EACAtI,IAAAkgC,EAAA75B,KAAA,QAGA,CACA,OAAA+B,EAAA3U,OAEA,YADA5E,EAAA0vC,gBAAAv9B,EAAA6G,GAGA,IAAAq4B,EACA,IADAA,EAAAxF,EAAA,QAAArD,wBAAAjvB,EAAAC,EAAAC,qBAAAzZ,EAAAwkB,KAAA3P,QAAA7U,EAAAwkB,KAAA/P,UACAiD,KAAA,KAAA25B,EAAA35B,KAAA,IACA25B,EAAA75B,KAAA,KAAA65B,EAAA75B,KAAA,IACA,IAAA+B,EAAA3U,OAEA,YADA5E,EAAA0vC,gBAAAv9B,EAAA6G,GAGA,OAAAA,GACA,SACAk4B,EAAAlxC,EAAAsxC,cAAA,eAAAJ,EAAAG,GACA,MACA,WACAH,EAAAlxC,EAAAsxC,cAAA,eAAAJ,EAAAG,GACA,MACA,WACAH,EAAAlxC,EAAAsxC,cAAA,eAAAJ,EAAAG,GACA,MACA,YACAH,EAAAlxC,EAAAsxC,cAAA,eAAAJ,EAAAG,IAMAH,EAAA//B,IAAA,GACA+/B,EAAA//B,KAAAnR,EAAAwkB,KAAA3P,SACAq8B,EAAAl3B,IAAA,GACAk3B,EAAAl3B,KAAAha,EAAAwkB,KAAA/P,UAGAzU,EAAA2sC,YAAAuE,GAEAlxC,EAAAoxC,wBAAAF,MAEAlxC,EAAAoxC,wBAAA,SAAA53B,GACA,IAAArI,EAAAqI,EAAArI,IAAA6I,EAAAR,EAAAQ,IACAyzB,EAAAztC,EAAAK,MAAAotC,aAGA8D,EACA9D,EAAAx4B,IADAs8B,EAEA9D,EAAAv4B,KAAAu4B,EAAAnuC,MAFAiyC,EAGA9D,EAAAx4B,IAAAw4B,EAAAruC,OAHAmyC,EAIA9D,EAAAv4B,KAEAs8B,EACAxxC,EAAAwkB,KAAA7P,0BAAAxD,GADAqgC,EAEAxxC,EAAAwkB,KAAAhQ,qBAAAwF,GAFAw3B,EAGAxxC,EAAAwkB,KAAA5P,sBAAAzD,GAHAqgC,EAIAxxC,EAAAwkB,KAAAjQ,yBAAAyF,GAIAy3B,EAAAD,IACAE,EAFAF,IAEA/D,EAAAnuC,MACAqyC,EAAAF,EAAAhE,EAAAruC,OACAygC,EAAA4N,EAAAx4B,IACA2qB,EAAA6N,EAAAv4B,KAGA,GAAAs8B,EAAAD,GAAAI,EAEA9R,EAAArpB,KAAAC,IAAA,EAAA+6B,EAAA,QAEA,GAAAA,EAAAD,EAAA,CAGA1R,EAAA0R,GADAC,EAAAD,GAIA,GAAAC,EAAAD,GAAAG,EAEA9R,EAAAppB,KAAAC,IAAA,EAAA+6B,EAAA,QAEA,GAAAA,EAAAD,EAAA,CAGA3R,EAAA2R,GADAC,EAAAD,GAGAvxC,EAAA4xC,qBAAAhS,EAAAC,IAEA7/B,EAAA2sC,YAAA,SAAAnzB,GACAxZ,EAAAhD,MAAA2c,oBAKA,MAAA3Z,EAAAhD,MAAAwc,aACAxZ,EAAAQ,UAAgCgZ,gBAEhCnU,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA0uB,cAAAlS,KAEAxZ,EAAAixC,gBAAA,SAAA13B,GAEA,MAAAvZ,EAAAhD,MAAAuc,iBACAvZ,EAAAQ,UAAgC+Y,oBAEhC,IAAAoS,EAAA3rB,EAAAhD,MAAA2uB,YACA,MAAAA,GACAA,EAAApS,IAGAvZ,EAAAw+B,wBAAA,SAAA9F,GACA14B,EAAAQ,UAA4BqxC,cAAA,EAAAnZ,oBAE5B14B,EAAAkuC,uBAAA,SAAAlrB,EAAAC,EAAAre,GACA5E,EAAAQ,UAA4BqxC,cAAA,EAAAnZ,oBAAA53B,IAC5BuE,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA80C,mBAAA9uB,EAAAC,EAAAre,IAEA5E,EAAAk/B,qBAAA,SAAAvG,GACA34B,EAAAQ,UAA4BqxC,cAAA,EAAAlZ,sBAE5B34B,EAAA0uC,oBAAA,SAAA1rB,EAAAC,EAAAre,GACA5E,EAAAQ,UAA4BqxC,cAAA,EAAAlZ,sBAAA73B,IAC5BuE,EAAA,MAAAlC,WAAAnD,EAAAhD,MAAA+0C,gBAAA/uB,EAAAC,EAAAre,IAEA5E,EAAAiuC,iBAAA,SAAA4C,QACA,IAAAA,IAA4CA,GAAA,GAC5C7wC,EAAAQ,UAA4BqwC,oBAE5B7wC,EAAAitC,iBAAA,SAAAH,EAAAkF,GACA,SAAAlF,EAGA,OAAAA,EAAA18B,QAAA4hC,IAAA,GAEAhyC,EAAA8wC,mBAAA,SAAAmB,GACA,IAAAxE,EAAAztC,EAAAK,MAAAotC,aACAztC,EAAAQ,UAA4BitC,aAAAwE,KAC5B,MAAAxE,MAAAnuB,OAAA2yB,IACA,MAAAxE,GAAA,MAAAwE,IAEAjyC,EAAAkyC,mCAAAD,IAGAjyC,EAAA6tC,wBAAA,WACA,IAAAvxB,EAAAtc,EAAAK,MAAA2uC,wBACA,aAAA1yB,IAAA,OAAAxb,GAEAd,EAAAuuC,qBAAA,WACA,IAAAlyB,EAAArc,EAAAK,MAAA4uC,qBACA,aAAA5yB,IAAA,OAAAvb,GAEAd,EAAAuhC,wBAAA,SAAA7I,GACA14B,EAAAQ,UAA4Bk4B,oBAE5B14B,EAAA0hC,qBAAA,SAAA/I,GACA34B,EAAAQ,UAA4Bm4B,sBAE5B,IAAAp7B,EAAAyC,EAAAhD,MAAA4B,EAAArB,EAAAqB,SAAAoV,EAAAzW,EAAAyW,aAAA8Z,EAAAvwB,EAAAuwB,iBAAAjH,EAAAtpB,EAAAspB,mBAAAhS,EAAAtX,EAAAsX,QAAAd,EAAAxW,EAAAwW,WACA/T,EAAAmyC,cAAAntC,EAAA,SAAAotC,QAAAxzC,GACAoB,EAAAqyC,gBAAAC,EAAAC,oBAAAvyC,EAAAmyC,eAIA,IAAAK,EAAAxyC,EAAAmyC,cAAAxzC,IAAA,WAAmE,OAAAkoB,IACnE2rB,EAAAjF,EAAA,MAAA7rB,mBAAA8wB,EAAAx+B,GACA,IAAAy+B,EAAAlF,EAAA,MAAAjtB,MAAAzL,EAAA,WAA8D,OAAAiZ,IAC9D2kB,EAAAlF,EAAA,MAAA7rB,mBAAA+wB,EAAA1+B,GACA,IAAAwF,EAAA,MAAAvc,EAAAuc,mBAAAvc,EAAAuc,gBACAC,EAAAgyB,EAAA,sBAAAxuC,EAAA2c,kBAAA3c,EAAAwc,iBAAA1Y,EAAAyY,GAWA,OAVAvZ,EAAAK,OACA2T,aAAAw+B,EACAh5B,cACAq3B,gBAAA,EACAgB,cAAA,EACA7C,wBAAA0D,EAAA11C,GACAiyC,qBAAA0D,EAAA31C,GACA+W,WAAA0+B,EACAl5B,mBAEAvZ,EAyiBA,OAxnCAtD,EAAA,UAAA4tC,EAAAhuC,GAilBAg2C,EAAAhI,EACAA,EAAAiI,oBAAA,SAAA3zC,GAEA,IADA,IAAAyzC,KACAzoC,EAAA,EAAuBA,EAAAhL,EAAAgG,OAAqBgF,IAAA,CAC5C,IAAAjH,EAAA/D,EAAAgL,GAAA5M,MAAA+vC,GACA,MAAApqC,IACA0vC,EAAArxB,OAAAre,IAAAiH,GAGA,OAAAyoC,GAeA/H,EAAA3tC,UAAAi2C,8BAAA,SAAAC,EAAAC,GAKA,IAJA,IAAAj+B,EAAArY,KAAAQ,MAAA6X,QACAb,EAAAxX,KAAA6D,MAAA2T,aACA++B,EAAA/+B,EAAApP,OACAmP,KACA9Q,EAAA,EAA8BA,EAAA4R,EAAoB5R,IAAA,CAGlD,IAFA,IAAA+vC,EAAA,EAEA9vC,EAAA,EAAqCA,EAAA6vC,EAA0B7vC,IAAA,CAE/D,IAAA3F,EAAAf,KAAAy2C,4CAAAH,EAAA7vC,EAAAC,GAAA4gB,EAAAvmB,EAAA21C,wBAAAnvB,EAAAxmB,EAAA41C,yBAAAnvB,EAAAzmB,EAAA61C,yBAAA9sC,EAAA/I,EAAA81C,kBACAzvB,EAAAivB,EAAA5vC,EAAAC,GACAowC,EAAA/F,EAAA,MAAA9mC,oBAAAmd,EAAA5P,EAAA9Q,GAAA4gB,EAAAC,EAAAC,EAAA1d,GACAgtC,EAAAN,IACAA,EAAAM,GAGAv/B,EAAAzJ,KAAA0oC,GAEAx2C,KAAAk0C,iBACAl0C,KAAAwuC,2BAAA,EACAxuC,KAAAgE,UAAuBuT,gBAMvBu2B,EAAA3tC,UAAA42C,wBAAA,SAAA3F,GACA,IAAA5tC,EAAAxD,KACAg3C,EAAA,EACA,SAAA5F,EAGA,IADA,IAAA6F,EAAAj3C,KAAAgoB,KAAAxO,uBAAAxZ,KAAA6D,MAAAotC,cACAzzB,EAAAy5B,EAAAx9B,iBAAkE+D,GAAAy5B,EAAAv9B,eAA6C8D,IAC/Gw5B,EAAAh9B,KAAAC,IAAA+8B,EAAAh3C,KAAAuoB,QAAAmW,8BAAAlhB,QAGA,CACA,IACA05B,GADAlzB,MAAAmzB,QAAA/F,UACAjvC,IAAA,SAAAqb,GAA0E,OAAAha,EAAA+kB,QAAAmW,8BAAAlhB,KAC1Ew5B,EAAAh9B,KAAAC,IAAAla,MAAAia,KAAAk9B,GAEA,IAAA3/B,EAAAyM,MAAAhkB,KAAA6D,MAAA0T,WAAAnP,QAAAgvC,KAAAJ,GACAh3C,KAAAk0C,iBACAl0C,KAAAwuC,2BAAA,EACAxuC,KAAAgE,UAAuBuT,gBAmBvBu2B,EAAA3tC,UAAAk3C,eAAA,SAAAz8B,GACA,IAAA7Z,EAAAf,KAAA6D,MAAAic,EAAA/e,EAAAyxC,wBAAA3yB,EAAA9e,EAAA0xC,qBACA5xC,EAAAb,KAAA6D,MAAAotC,aAAAxxB,EAAA5e,EAAA6X,KAAAgH,EAAA7e,EAAA4X,IACA3X,EAAAw2C,EAAA,2BAAA18B,EAAA6E,EAAAC,EAAA1f,KAAAgoB,KAAAjQ,yBAAA/X,KAAAgoB,KAAA7P,0BAAA0H,EAAAC,GAAAG,EAAAnf,EAAAmf,WAAAD,EAAAlf,EAAAkf,UACAu3B,EAAAv3C,KAAAw3C,gCAAA,EAAAv3B,EACAw3B,EAAAz3C,KAAA03C,8BAAA,EAAA13B,EAEAhgB,KAAAouC,sBAAA3G,iBAAA8P,EAAAE,IAIA3J,EAAA3tC,UAAAw3C,gBAAA,WACA,OACAthC,2BAAArW,KAAAQ,MAAA6V,6BAGAy3B,EAAA3tC,UAAAC,sBAAA,SAAAC,EAAA8E,GACA,IAAAyyC,GAAiCn3C,QAAAq1C,EAAAtoB,qCACjCqqB,GAAkCp3C,QAAAq1C,EAAAgC,sCAClC,QAAAjvC,EAAA,MAAAtI,mBAAAP,KAAAQ,MAAAH,EAAAu3C,IACA/uC,EAAA,MAAAtI,mBAAAP,KAAA6D,MAAAsB,EAAA0yC,IACAhvC,EAAA,MAAAnI,gBAAAV,KAAAQ,MAAAH,EAAAy1C,EAAAtoB,sCACA3kB,EAAA,MAAAnI,gBAAAV,KAAA6D,MAAAsB,EAAA2wC,EAAAgC,wCAEAhK,EAAA3tC,UAAAkF,0BAAA,SAAAhF,GACA,IAAAmD,EAAAxD,KAEAF,EAAAK,UAAAkF,0BAAA5B,KAAAzD,KAAAK,GACA,IAAA+B,EAAA/B,EAAA+B,SAAAoV,EAAAnX,EAAAmX,aAAA6S,EAAAhqB,EAAAgqB,mBAAAiH,EAAAjxB,EAAAixB,iBAAAnU,EAAA9c,EAAA8c,kBAAAH,EAAA3c,EAAA2c,YAAA3E,EAAAhY,EAAAgY,QAAAd,EAAAlX,EAAAkX,WAAAwF,EAAA1c,EAAA0c,gBAAAg7B,EAAA13C,EAAA03C,eACAC,EAAAxvC,EAAA,SAAAotC,QAAAxzC,GACA6V,EAAA+/B,EAAA5vC,OAIA6vC,EAAAD,EAAA71C,IAAA,SAAAE,EAAAsR,GACA,IAAAukC,EAAA10C,EAAAqyC,gBAAAxzC,EAAA7B,MAAA+vC,IACA,OAAA/sC,EAAAK,MAAA2T,aAAA,MAAA0gC,IAAAvkC,KAKAqiC,EAAAh2C,KAAA6D,MAAA2T,aACAw+B,EAAAjF,EAAA,MAAAjsB,cAAAkxB,EAAA/9B,EAAAoS,GACA2rB,EAAAjF,EAAA,MAAA7rB,mBAAA8wB,EAAAiC,GACAjC,EAAAjF,EAAA,MAAA7rB,mBAAA8wB,EAAAx+B,GACA,IAAAy+B,EAAAj2C,KAAA6D,MAAA0T,WACA0+B,EAAAlF,EAAA,MAAAjsB,cAAAmxB,EAAA59B,EAAAiZ,GACA2kB,EAAAlF,EAAA,MAAA7rB,mBAAA+wB,EAAA1+B,GACA,IAAA4gC,EAAAp7B,EACA,MAAAA,IAGAo7B,EAAAn4C,KAAA6D,MAAAkZ,gBAAAq7B,OAAA,SAAAx9B,GACA,IAAAy9B,EAAAhJ,EAAA,QAAAv0B,qBAAAF,GACA,OAAApX,EAAAisC,uBAAA4I,EAAAN,IACA1I,EAAA,QAAA7C,sBAAA5xB,EAAAvC,EAAAJ,MAGA,IAAAy8B,EAAA1F,EAAA,sBAAA7xB,EAAAH,EAAAhd,KAAA6D,MAAAmZ,YAAAm7B,GACAn4C,KAAA21C,cAAAqC,EACAh4C,KAAA61C,gBAAAC,EAAAC,oBAAA/1C,KAAA21C,eACA31C,KAAAk0C,iBACAl0C,KAAAgE,UACAwT,aAAAw+B,EACAh5B,YAAA03B,EACAlC,wBAAA0D,EAAA71C,GACAoyC,qBAAA0D,EAAA91C,GACAkX,WAAA0+B,EACAl5B,gBAAAo7B,KAGArK,EAAA3tC,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAA4B,EAAArB,EAAAqB,SAAAV,EAAAX,EAAAW,UAAA89B,EAAAz+B,EAAAy+B,gBAAA8Q,EAAAvvC,EAAAuvC,eAAAj4B,EAAAtX,EAAAsX,QAAAhC,EAAAtV,EAAAsV,2BACAxV,EAAAb,KAAA6D,MAAAs4B,EAAAt7B,EAAAs7B,iBAAAqW,EAAA3xC,EAAA2xC,wBAAAC,EAAA5xC,EAAA4xC,qBAAAvW,EAAAr7B,EAAAq7B,eACAl8B,KAAAs4C,eACA,IAWAx3C,EAXAc,EAAA2G,IAAAinC,EAAA,kBAAA1uC,MACA0uC,EAAA,kBAAAxvC,KAAA6D,MAAAwxC,aACAv0C,EAAA0uC,EAAA,0BAAAxvC,KAAA03C,8BACA52C,EAAA0uC,EAAA,4BAAAxvC,KAAAw3C,gCACA12C,EAAA0uC,EAAA,yBAAAxvC,KAAAyvC,uBAAAJ,EAAA,kBAAAt0B,OACAja,EAAA0uC,EAAA,mBAAAn3B,EACAvX,GAAAY,GACA,OAAA8G,EAAA,qBAA4C9G,UAAAE,EAAAqB,IAAAjD,KAAA0D,YAAA2qC,UAAAnV,SAAAl5B,KAAAm0C,kBAC5C3rC,EAAA,cAAA+vC,EAAA,oBAAqD/X,QAAAxgC,KAAA0D,YAAAqqC,cAAArO,aAAA1/B,KAAAuyC,WAAApS,yBAAAngC,KAAAgxC,mBAAA3I,gBAAAroC,KAAA0D,YAAAk+B,aAAAvrB,6BAAAmpB,kBAAAxX,KAAAhoB,KAAAgoB,KAAA+c,wBAAA/kC,KAAA+kC,wBAAA/C,wBAAAhiC,KAAAgiC,wBAAAkD,qBAAAllC,KAAAklC,qBAAAxC,qBAAA1iC,KAAA0iC,qBAAAkB,2BAAA5jC,KAAAw3C,gCAAA3T,yBAAA7jC,KAAA03C,8BAAApH,iBAAAiG,WAAA/tC,EAAA,SAAA0T,MAAA9Z,GAAA0d,iBAAA0yB,EAAA3yB,cAAA4yB,EAAAp6B,UAAA6gB,SAAAl5B,KAAAo0C,iBAAA/T,YAAArgC,KAAA0D,YAAAuqC,aAAAhrC,IAAAjD,KAAA0D,YAAAyqC,cAAAthB,aAAA7sB,KAAAuvC,WAAApe,sBAAAnxB,KAAA4xC,gBAAAxJ,aAAApoC,KAAA0D,YAAA8+B,UAAAlC,mBAAAtgC,KAAA0D,YAAAy/B,kBACrD36B,EAAA,qBAAwC9G,UAAA6G,IAAAinC,EAAA,oBAAAA,EAAA,mCACxChnC,EAAA,cAAAgwC,EAAA,YAA6C92C,UAAA8tC,EAAA,oBAAAtT,iBAAAC,uBAG7C2R,EAAA3tC,UAAA+F,cAAA,WACA,IAAAuyC,GACAz4C,KAAA04C,wBACA14C,KAAA24C,6BACA34C,KAAA44C,0BACA54C,KAAA64C,qCAEA,OAAArwC,EAAA,cAAAK,EAAA,aAAA4vC,EAAAL,OAAA,SAAA53B,GAAqF,YAAAlc,IAAAkc,MAOrFstB,EAAA3tC,UAAA6E,kBAAA,WACA,IAAAxB,EAAAxD,KACAA,KAAAs4C,eACAt4C,KAAAuoB,QAAA,IAAAuwB,EAAA,QAAA94C,KAAAsuC,iBAAAtuC,KAAAg9B,uBAAAh9B,KAAAi9B,sBACAj9B,KAAA+4C,gBACA/4C,KAAAs0C,mBAAAt0C,KAAAuoB,QAAA2V,mBACAl+B,KAAAg5C,mBAAAC,EAAA,aAAA9lB,OAAAnzB,KAAAsuC,iBAAA,WACA9qC,EAAAK,MAAAwwC,gBACA7wC,EAAA8wC,mBAAA9wC,EAAA+kB,QAAA2V,sBAIA4P,EAAA3tC,UAAAo0B,qBAAA,WACA,MAAAv0B,KAAAg5C,qBACAh5C,KAAAg5C,4BACAh5C,KAAAg5C,oBAEAh5C,KAAAyuC,oBAAA,GAEAX,EAAA3tC,UAAA+E,mBAAA,WACA,MAAAlF,KAAAuoB,UACAvoB,KAAAs4C,eACAt4C,KAAA+4C,iBAEA/4C,KAAAwuC,4BACAxuC,KAAAouC,sBAAA1G,2BACA1nC,KAAAwuC,2BAAA,GAEAxuC,KAAAk5C,4BAEApL,EAAA3tC,UAAAsgC,cAAA,SAAAjgC,GACA,IAAA4B,EAAA5B,EAAA4B,SAAAoV,EAAAhX,EAAAgX,aAAAsI,EAAAtf,EAAAsf,iBAAAD,EAAArf,EAAAqf,cAAAxH,EAAA7X,EAAA6X,QAAAd,EAAA/W,EAAA+W,WACAg/B,EAAA/tC,EAAA,SAAA0T,MAAA9Z,GAEA,SAAAiW,KAAA,EACA,UAAAsG,MAAAw6B,EAAA,yBAEA,SAAAt5B,KAAA,EACA,UAAAlB,MAAAw6B,EAAA,gCAEA,SAAAr5B,KAAA,EACA,UAAAnB,MAAAw6B,EAAA,mCAEA,SAAA9gC,GAAA,MAAAd,KAAAnP,SAAAiQ,EACA,UAAAsG,MAAAw6B,EAAA,qCAEA,SAAA5C,GAAA,MAAA/+B,KAAApP,SAAAmuC,EACA,UAAA53B,MAAAw6B,EAAA,0CAEA3wC,EAAA,SAAAgE,QAAApK,EAAA,SAAAC,GAEA,IAAAC,EAAAD,EAAAE,KAIA,oBAAAF,GAAA,iBAAAC,EACA,UAAAqc,MAAAw6B,EAAA,mCAIA,KADA72C,EAAAnC,YAAAi5C,EAAA,OAAAj5C,WAAAi5C,EAAA,OAAAj5C,UAAAqC,cAAAF,IAEA,UAAAqc,MAAAw6B,EAAA,qCAKA,MAAAt5B,GAAA,MAAAxH,GAAAwH,EAAAxH,GACAsoB,QAAAC,KAAAuY,EAAA,qCAEA,MAAAr5B,KAAAy2B,GACA5V,QAAAC,KAAAuY,EAAA,yCAKArL,EAAA3tC,UAAAu4C,sBAAA,WAEA,aADA14C,KAAAQ,MAAA4uC,qBAEA5mC,EAAA,cAAAK,EAAA,QAAiD1C,IAAA,cAAAC,MAAA,4BAAAC,MAAA,QAAAC,MAAA,QAAApF,UAAAlB,KAAAmvC,kBAGjD,GAGArB,EAAA3tC,UAAA04C,kCAAA,WACA,IAAA93C,EAAAf,KAAAQ,MAAAquB,EAAA9tB,EAAA8tB,wBACAwqB,EADAt4C,EAAAg3C,eACA3vC,OAAA,EACA,OAAAymB,GAAAwqB,GAEA7wC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,sBAAAC,MAAA,0BAAAC,MAAA,QAAAC,MAAA,WAAApF,UAAAlB,KAAA0uC,0BAC7ClmC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,wBAAAC,MAAA,4BAAAC,MAAA,QAAAC,MAAA,aAAApF,UAAAlB,KAAA6uC,4BAC7CrmC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,wBAAAC,MAAA,4BAAAC,MAAA,QAAAC,MAAA,aAAApF,UAAAlB,KAAA8uC,4BAC7CtmC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,yBAAAC,MAAA,6BAAAC,MAAA,QAAAC,MAAA,cAAApF,UAAAlB,KAAA+uC,mCAI7C,GAGAjB,EAAA3tC,UAAAy4C,wBAAA,WAEA,aADA54C,KAAAQ,MAAA2c,mBAGA3U,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,YAAAC,MAAA,uBAAAC,MAAA,QAAAC,MAAA,OAAApF,UAAAlB,KAAAizC,sBAC7CzqC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,aAAAC,MAAA,wBAAAC,MAAA,QAAAC,MAAA,QAAApF,UAAAlB,KAAAqzC,uBAC7C7qC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,UAAAC,MAAA,qBAAAC,MAAA,QAAAC,MAAA,KAAApF,UAAAlB,KAAAuzC,oBAC7C/qC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,YAAAC,MAAA,uBAAAC,MAAA,QAAAC,MAAA,OAAApF,UAAAlB,KAAAyzC,sBAC7CjrC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,WAAAC,MAAA,sBAAAC,MAAA,QAAAC,MAAA,MAAApF,UAAAlB,KAAAszC,6BAAAgG,cAAA,IAC7C9wC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,iBAAAC,MAAA,4BAAAC,MAAA,QAAAC,MAAA,YAAApF,UAAAlB,KAAAmzC,4BAAAmG,cAAA,IAC7C9wC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,aAAAC,MAAA,wBAAAC,MAAA,QAAAC,MAAA,QAAApF,UAAAlB,KAAA0zC,4BAAA4F,cAAA,IAC7C9wC,EAAA,cAAAK,EAAA,QAA6C1C,IAAA,mBAAAC,MAAA,8BAAAC,MAAA,QAAAC,MAAA,cAAApF,UAAAlB,KAAAwzC,0BAAA8F,cAAA,SAO7CxL,EAAA3tC,UAAAw4C,2BAAA,WACA,OAAA34C,KAAAyvC,uBAAAJ,EAAA,kBAAArzB,YACAxT,EAAA,cAAAK,EAAA,QAAiD1C,IAAA,oBAAAC,MAAA,aAAAC,MAAA,QAAAC,MAAA,QAAApF,UAAAlB,KAAAowC,6BAGjD,GAOAtC,EAAA3tC,UAAA+uC,4BAAA,SAAAt0B,EAAAjH,GACA,IAAA5S,EAAAf,KAAAQ,MAAA4B,EAAArB,EAAAqB,SAAAiW,EAAAtX,EAAAsX,QACA0E,EAAA/c,KAAA6D,MAAAkZ,gBACAw5B,EAAA/tC,EAAA,SAAA0T,MAAA9Z,GACAkoC,EAAAtwB,KAAAC,IAAA,EAAA5B,EAAA,GACAkyB,EAAAvwB,KAAAC,IAAA,EAAAs8B,EAAA,GACAgD,EAAAlK,EAAA,QAAAhF,YAAAzvB,EAAA0vB,EAAAC,GACAvT,EAAAqY,EAAA,QAAA9U,OAAAxd,EAAAw8B,EAAA5lC,GACA3T,KAAAy0C,gBAAAzd,IAIA8W,EAAA3tC,UAAA20C,cAAA,SAAA0E,EAAAC,EAAAC,EAAAhF,EAAAG,GACA,IAAA93B,EAAA/c,KAAA6D,MAAAkZ,gBACA48B,EAAA,QAAAH,EAAA,cACAI,EAAA,QAAAH,EAAA,cACAI,EAAAH,GAAA,IACAI,EAAAJ,EAAA,IAMA,IAJAhF,EAAA8E,IAAAK,EACAH,EACAhF,EAAA8E,GAAA3E,EAAA8E,GAAA,GACAjF,EAAA8E,GAAA3E,EAAA8E,GAAA,MAIAjF,EAAA8E,GAAA3E,EAAA8E,GAAAG,GACApF,EAAA+E,IAAAI,EACAH,EACAhF,EAAA+E,GAAA5E,EAAA+E,GAAA,GACAlF,EAAA+E,GAAA5E,EAAA+E,GAAA,IACA,CAIA,IAAAG,EAAArF,EAAAz3B,oBAAA48B,GAEAH,EAAAK,EAAA,EAAAA,GAAAh9B,EAAA3U,UACA2xC,EAAAL,EAAA38B,EAAA3U,OAAA,KAEA,IAAA4xC,EAAA3K,EAAA,QAAArD,wBAAAjvB,EAAAg9B,GAAA/5C,KAAAgoB,KAAA3P,QAAArY,KAAAgoB,KAAA/P,SACAy8B,GACAl3B,IAAAw8B,EAAA9+B,KAAA4+B,GACA78B,oBAAA88B,EACAplC,IAAAqlC,EAAAh/B,KAAA8+B,IAIA,OAAApF,GAEA5G,EAAA3tC,UAAAu3C,4BAAA,WACA,IAAAxG,EAAAlxC,KAAAQ,MAAA0wC,iBACAD,EAAAjxC,KAAA6D,MAAAotC,aACAa,EAAA9xC,KAAAgoB,KAAA3O,oBAAA43B,EAAAC,GACA+I,EAAA,MAAAhJ,GAAA,IAAAA,EAAAx4B,IACAyhC,EAAAl6C,KAAAywC,iBAAAzwC,KAAAQ,MAAA8vC,eAAAjB,EAAA,mBAAA4C,aAEA,OADAf,GAAAlxC,KAAAgoB,KAAA1N,aAAAw3B,EAAAv4B,YAAA,KACA0gC,GAAAC,IAEApM,EAAA3tC,UAAAq3C,8BAAA,WACA,IAAAtG,EAAAlxC,KAAAQ,MAAA0wC,iBACAD,EAAAjxC,KAAA6D,MAAAotC,aACAG,EAAApxC,KAAAgoB,KAAAxO,uBAAAy3B,EAAAC,GACAiJ,EAAA,MAAAlJ,GAAA,IAAAA,EAAAv4B,KACA0hC,EAAAlJ,GAAAlxC,KAAAgoB,KAAA1N,aAAA,EAAA82B,EAAA13B,gBACA2gC,EAAAr6C,KAAAywC,iBAAAzwC,KAAAQ,MAAA8vC,eAAAjB,EAAA,mBAAAkC,gBACA,OAAA6I,IAAAD,GAAAE,IAEAvM,EAAA3tC,UAAA+4C,yBAAA,WACA,IAAAjI,EAAAjxC,KAAA6D,MAAAotC,aACAqJ,EAAAt6C,KAAAgoB,KAAA5P,sBAAApY,KAAAgoB,KAAA3P,QAAA,GACAkiC,EAAAv6C,KAAAgoB,KAAAhQ,qBAAAhY,KAAAgoB,KAAA/P,QAAA,GACAorB,EAAAiX,EAAArJ,EAAAx4B,IAAAw4B,EAAAruC,OAEAoX,KAAAC,IAAA,EAAAqgC,EAAArJ,EAAAruC,QACAquC,EAAAx4B,IACA2qB,EAAAmX,EAAAtJ,EAAAv4B,KAAAu4B,EAAAnuC,MAEAkX,KAAAC,IAAA,EAAAsgC,EAAAtJ,EAAAnuC,OACAmuC,EAAAv4B,KACA1Y,KAAAo1C,qBAAAhS,EAAAC,IAEAyK,EAAA3tC,UAAAkwC,eAAA,SAAA3pC,GAEA,OADA1G,KAAA21C,cAAAjvC,GACAlG,OAEAstC,EAAA3tC,UAAAq6C,gBAAA,WACA,aAAAx6C,KAAA6D,MAAAq4B,gBAAA,MAAAl8B,KAAA6D,MAAAs4B,kBAEA2R,EAAA3tC,UAAAsvC,uBAAA,SAAAgL,EAAA1C,QACA,IAAAA,IAAwCA,EAAA/3C,KAAAQ,MAAAu3C,gBACxC,IAAAh3C,EAAAf,KAAAQ,MAAA4B,EAAArB,EAAAqB,SAAAiW,EAAAtX,EAAAsX,QACAk+B,EAAA/tC,EAAA,SAAA0T,MAAA9Z,GACA,OAAA21C,EAAAnkC,QAAA6mC,IAAA,GAAApiC,EAAA,GAAAk+B,EAAA,GAEAzI,EAAA3tC,UAAA6vC,2BAAA,SAAAyK,GACA,OAAAz6C,KAAAyvC,uBAAAgL,GASAz6C,KAAAy0C,gBAHAz0C,KAAAu0C,gBAMAzG,EAAA3tC,UAAA+zC,eAAA,WACAl0C,KAAAgoB,KAAA,MAEA8lB,EAAA3tC,UAAAm4C,aAAA,WACA,SAAAt4C,KAAAgoB,KAAA,CACA,IAAAjnB,EAAAf,KAAAQ,MAAA8wB,EAAAvwB,EAAAuwB,iBAAAjH,EAAAtpB,EAAAspB,mBACAxpB,EAAAb,KAAA6D,MAAA0T,EAAA1W,EAAA0W,WAAAC,EAAA3W,EAAA2W,aACAxX,KAAAgoB,KAAA,IAAA0yB,EAAA,KAAAnjC,EAAAC,EAAAkjC,EAAA,KAAA9iC,cAAA0Z,EAAAjH,GACArqB,KAAA01C,mCAAA11C,KAAA6D,MAAAotC,gBASAnD,EAAA3tC,UAAAyvC,mBAAA,SAAAj1B,EAAA8kB,GACA,IAAAz/B,KAAAw6C,mBAAAx6C,KAAA6D,MAAAwxC,aAKA,OADAhG,EAAA,QAAA3C,uBAAA1sC,KAAA6D,MAAAkZ,gBAAA/c,KAAAQ,MAAAm6C,mBAAA36C,KAAA6D,MAAAmZ,aACA7a,IAAA,SAAAy4C,EAAAjnC,GACA,IAAA+oB,EAAAke,EAAAvlB,QAAAlzB,IAAA,SAAAyY,GAA0E,OAAAD,EAAAC,EAAA6kB,KAC1E,OAAAj3B,EAAA,cAAAqyC,EAAA,aAAsDn5C,UAAA6G,IAAAqyC,EAAAl5C,WAAAyE,IAAAwN,EAAA0hB,QAAAulB,EAAAvlB,QAAAqH,oBAGtDoR,EAAA3tC,UAAAi1C,qBAAA,SAAAhS,EAAAC,GACA,IAAA4N,EAAAjxC,KAAA6D,MAAAotC,aACA6J,EAAAzX,IAAA4N,EAAAx4B,IACAsiC,EAAA3X,IAAA6N,EAAAv4B,KACA,GAAAoiC,GAAAC,EAAA,CAIA,GAAAD,EAAA,CACA,IAAAE,EAAAh7C,KAAA03C,8BAAA,EAAA13C,KAAAguC,oBAAA7jC,aACAnK,KAAAg9B,uBAAAhd,UAAAqjB,EAAA2X,EAEA,GAAAD,EAAA,CACA,IAAAE,EAAAj7C,KAAAw3C,iCAAA,MAAAx3C,KAAAuuC,iBACA,EACAvuC,KAAAuuC,iBAAAlkC,YACArK,KAAAg9B,uBAAA/c,WAAAmjB,EAAA6X,EAEA,IAAAxF,EAAA,IAAAyF,EAAA,KAAA9X,EAAAC,EAAA4N,EAAAnuC,MAAAmuC,EAAAruC,QACA5C,KAAAs0C,mBAAAmB,KAGA3H,EAAA3tC,UAAA44C,cAAA,WACA/4C,KAAAuoB,QACAwV,QAAA/9B,KAAAgoB,MACAgW,iBAAAh+B,KAAA6D,MAAA4uC,sBACAxU,oBAAAj+B,KAAA6D,MAAA2uC,0BAEA1E,EAAA3tC,UAAAu1C,mCAAA,SAAAzE,GACA,IAAAG,EAAApxC,KAAAgoB,KAAAxO,uBAAAy3B,GACAa,EAAA9xC,KAAAgoB,KAAA3O,oBAAA43B,GACApoC,EAAA,MAAAlC,WAAA3G,KAAAQ,MAAA26C,qBAAArJ,EAAAV,IAQAtD,EAAA3tC,UAAA4yC,wBAAA,WACA,IAAAD,EAAA9yC,KAAAQ,MAAAsyC,WAEA,OADAA,IAAAsI,EAAA,WAAAC,OAAAvI,IAAAsI,EAAA,WAAAE,iBAAAt7C,KAAAyuC,mBACA2M,EAAA,WAAAC,MAAAD,EAAA,WAAAvR,MAMAiE,EAAA3tC,UAAAs2C,4CAAA,SAAAH,EAAA7vC,EAAAC,GAUA,OATA+F,OAAAC,KAAAopC,EAAAyF,uCAQArT,OAPA,SAAAC,EAAAhiC,GAKA,OAJAgiC,EAAAhiC,GACA,MAAAmwC,GAAA,MAAAA,EAAAnwC,GACA0C,EAAA,MAAAyyB,kBAAAgb,EAAAnwC,GAAAM,EAAAC,GACAovC,EAAAyF,sCAAAp1C,GACAgiC,QAKA2F,EAAA1qC,cACAinB,mBAAA,IACAiH,iBAAA,GACAnU,mBAAA,EACA+zB,kBAAA,EACAriB,yBAAA,EACA2Q,iBAAA,EACA8Q,kBACApnB,eAAA,GACAkI,aAAA,GACAtR,iBAAA,EACAD,cAAA,EACAxH,QAAA,EACAy6B,WAAAsI,EAAA,WAAAE,gBACAnqB,sBAAA6gB,EAAA,uBACA+F,eAAA1I,EAAA,eAAA3F,KAEAoE,EAAA0N,kBAAAC,EAAA,iCAGA3N,EAAAyN,uCACA7E,wBAAA,EACAC,yBAAA,GACAC,yBAAA,EAAAkC,EAAA,QAAAluC,wBACAisC,kBAAA,GAEA/I,EAAAtgB,qCACA,mBAEAsgB,EAAAgK,sCACA,kBACA,gBAEAhK,EAAAgI,EAAA51C,EAAA,YACA2I,EAAA,eACAilC,GAEA,IAAAgI,EA1nCA,CA2nCCjtC,EAAA,mBAED,SAAAqtC,EAAA11C,GAGA,OAAAk7C,EAFAl7C,EAAAsf,iBACAtX,EAAA,SAAA0T,MAAA1b,EAAA4B,WAGA,SAAA+zC,EAAA31C,GAEA,OAAAk7C,EADAl7C,EAAAqf,cAAArf,EAAA6X,SAKA,SAAAqjC,EAAAr3C,EAAA4V,GACA,aAAA5V,EAAA,EAAA0sC,EAAA,MAAAzqB,MAAAjiB,EAAA,EAAA4V;;;;m8BC1qCA0hC,EAAAj8C,yBAAA,+DAgBAk8C,GAAA,mBACAC,EAAA,SAAA/7C,GAEA,SAAA+7C,IACA,IAAAr4C,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAsCA,OArCAwD,EAAA+S,kBAAA,SAAAZ,GACA,IAAA5U,EAAAyC,EAAAhD,MAAAwnB,EAAAjnB,EAAAinB,KAAAkH,EAAAnuB,EAAAmuB,cAAAC,EAAApuB,EAAAouB,YAAAujB,EAAA3xC,EAAA2xC,wBAAA31B,EAAAhc,EAAAgc,gBACA1E,EAAA2P,EAAA3P,QAAAJ,EAAA+P,EAAA/P,QACA,SAAAy6B,EAAA,CAGA,IAAAoJ,EAAAt4C,EAAAoqB,YAAAjY,EAAAomC,aACA/kB,EAAAja,EAIA,GADAwQ,EAAA,QAAA2I,qBAAAnZ,EAAA++B,GACA,EAEA3sB,EADA6H,GAAA8kB,IAIA5sB,EADAhvB,EAAA,YAAyDqtB,EAAA,QAAAhQ,kCAAAu+B,IAA4D7+B,oBAAA,KAGrH,IACA++B,EAAAtJ,EADA,IAAAuJ,EAAA,YAAAH,EAAA9kB,EAAA3e,EAAAJ,IAEA,aAAA+jC,OAAA13C,EAAA03C,IAIAx4C,EAAA04C,mBAAA,WACA14C,EAAA24C,eAAA,MAEA34C,EAAAoqB,YAAA,SAAAzO,GAEA,OADA3b,EAAA24C,eAAA34C,EAAAhD,MAAA+nB,QAAA6W,mBAAAjgB,EAAAwD,QAAAxD,EAAA0D,SACA0K,EAAA,QAAA5pB,KAAAH,EAAA24C,eAAAxnC,IAAAnR,EAAA24C,eAAA3+B,MAEAha,EAAAyrB,WAAA,SAAAnqB,EAAAipB,EAAAC,QACA,IAAAA,IAA2CA,GAAA,GAC3C,IAAA7T,EAAA3W,EAAA24C,eACA/hC,EAAA5W,EAAAhD,MAAA+nB,QAAA6W,mBAAArR,EAAAE,QAAA,GAAAF,EAAAE,QAAA,IACA,OAAAD,EAAAT,EAAA,QAAA5pB,KAAAyW,EAAAzF,IAAAyF,EAAAoD,KAAA+P,EAAA,QAAA5pB,KAAAwW,EAAAxF,IAAAwF,EAAAqD,IAAApD,EAAAzF,IAAAyF,EAAAoD,MAEAha,EA0BA,OAlEAtD,EAAA,UAAA27C,EAAA/7C,GA4CA+7C,EAAAO,eAAA,SAAA31C,EAAAC,GACA,OAAA+F,OAAAkvC,EAAA,eAAAlvC,CAAAhG,EAAAC,IAEAm1C,EAAA17C,UAAAC,sBAAA,SAAAC,GACA,OAAAwI,EAAA,MAAAtI,mBAAAP,KAAAQ,MAAAH,GAAsEI,QAAAm7C,MACtE/yC,EAAA,MAAAnI,gBAAAV,KAAAQ,MAAAH,EAAAu7C,IAEAC,EAAA17C,UAAAS,OAAA,WACA,IAAAG,EAAAf,KAAAQ,MAAAwnB,EAAAjnB,EAAAinB,KAAAlI,EAAA/e,EAAA+e,iBAAAD,EAAA9e,EAAA8e,cACAw8B,EAAAr0B,EAAA/O,UAAAwJ,YACA9hB,GACAiC,OAAA,MAAAid,EAAAmI,EAAA5P,sBAAAyH,EAAA,GAAAw8B,EAAAz5C,OACAE,MAAA,MAAAgd,EAAAkI,EAAAhQ,qBAAA8H,EAAA,GAAAu8B,EAAAv5C,OAEA,OAAA0F,EAAA,cAAAomB,EAAA,gBAAqDC,wBAAA7uB,KAAAQ,MAAAquB,wBAAA7R,YAAAhd,KAAAQ,MAAAwc,YAAA4Q,YAAA5tB,KAAA4tB,YAAAqB,WAAAjvB,KAAAivB,WAAAC,cAAAlvB,KAAAQ,MAAA0uB,cAAAC,YAAAnvB,KAAAQ,MAAA2uB,YAAAE,eAAArvB,KAAAk8C,mBAAAn/B,gBAAA/c,KAAAQ,MAAAuc,gBAAAwS,wBAAAvvB,KAAAQ,MAAA+uB,yBACrD/mB,EAAA,cAAA8zC,EAAA,0BAA2D56C,UAAA6G,IAAA/C,EAAA,0BAAAA,EAAA,mBAAA+Q,kBAAAvW,KAAAuW,kBAAA5V,SAC3D6H,EAAA,cAAAmzC,EAAA,gBAAqD5wC,aAAA/K,KAAAQ,MAAAuK,aAAAiS,YAAAhd,KAAAQ,MAAAwc,YAAAgL,OAAAzmB,QAAAvB,KAAAQ,MAAAe,QAAAoxC,iBAAA3yC,KAAAQ,MAAAmyC,iBAAAG,WAAA9yC,KAAAQ,MAAAsyC,WAAAr5B,iBAAAzZ,KAAAQ,MAAAiZ,iBAAAC,eAAA1Z,KAAAQ,MAAAkZ,eAAAJ,cAAAtZ,KAAAQ,MAAA8Y,cAAAC,YAAAvZ,KAAAQ,MAAA+Y,YAAA03B,aAAAjxC,KAAAQ,MAAAywC,kBAErD4K,EAAAz4C,cACA7B,SAAA,EACAuxC,WAAAyJ,EAAA,WAAAlB,OAEAQ,EAnEA,CAoECrzC,EAAA;;;;4wBCrFDg0C,EAAA98C,4BAAA,kEAcA+8C,GAAA,gBAKAC,GACA,iBACA,mBACA,cACA,iBAEAC,EAAA,SAAA78C,GAEA,SAAA68C,IACA,IAAAn5C,EAAA,OAAA1D,KAAAC,MAAAC,KAAAC,YAAAD,KAuCA,OAtCAwD,EAAAo5C,QAAA,IAAAC,EAAA,QAGAr5C,EAAA6qB,cAAA,SAAA5nB,EAAAC,GACA,IAAA3F,EAAAyC,EAAAhD,MAAAkZ,EAAA3Y,EAAA2Y,eAAAsO,EAAAjnB,EAAAinB,KAAAzO,EAAAxY,EAAAwY,YACAqQ,EAAA5B,EAAAzN,kBAAA9T,EAAAC,EAAA6S,EAAAG,GACAojC,EAAA90B,EAAA1N,aAAA7T,EAAAC,GACA,OAAAlD,EAAA8qB,WAAA7nB,EAAAC,EAAAkjB,EAAAkzB,IAEAt5C,EAAA8qB,WAAA,SAAA7nB,EAAAC,EAAAkjB,EAAAkzB,GACA,IAaAj8C,EAbAE,EAAAyC,EAAAhD,MAAAuK,EAAAhK,EAAAgK,aAAAiS,EAAAjc,EAAAic,YAAAzb,EAAAR,EAAAQ,QAAAymB,EAAAjnB,EAAAinB,KACA+0B,EAAAD,EAAArwC,OAAAuwC,EAAA,kBAAAvwC,GAAA1B,EAAAtE,EAAAC,GACAhF,EAAA6G,IAAA6zC,EAAA31C,EAAAC,GAAAkjB,IAAA/oB,MACAo8C,EAAA,kBAAAH,EACAj8C,EAAAo8C,EAAA,uBAAAx2C,EAAA,KACA5F,EAAAo8C,EAAA,wBAAAx2C,EAAA,KACA5F,GAAAk8C,EAAAv8C,MAAAkB,WACAyE,EAAAw2C,EAAAO,aAAAz2C,EAAAC,GACAyS,EAAA2jC,EAAA90B,EAAApP,iBAAAnS,EAAAC,GAAAshB,EAAAxP,YAAA/R,EAAAC,GACAy2C,EAAA,MAAAJ,EAAAv8C,MAAAe,QAAAw7C,EAAAv8C,MAAAe,UACAZ,EAAAT,EAAA,YAA2C68C,EAAAv8C,MAAAG,MAAAy8C,EAAA,KAAAz8C,MAAAwY,IAC3CpV,EAAA,MAAAiZ,KAAArI,MAAAlO,GAAAuW,EAAAQ,MAAA9W,EACA,OAAA8B,EAAA,aAAAu0C,GAAiDr7C,YAAAyE,MAAApC,YAAAxC,QAAA47C,EAAAx8C,WAKjD6C,EAAA65C,sBAAA,SAAA5H,EAAA6H,GACA,aAAA7H,GAAA,MAAA6H,KAGA,MAAA7H,GAAA,MAAA6H,IAIA7H,EAAA3yB,OAAAw6B,KAGA95C,EA8EA,OAvHAtD,EAAA,UAAAy8C,EAAA78C,GA2CA68C,EAAAO,aAAA,SAAAz2C,EAAAC,GACA,cAAAD,EAAA,IAAAC,GAEAi2C,EAAAx8C,UAAA6E,kBAAA,WACAhF,KAAAu9C,+BAEAZ,EAAAx8C,UAAAC,sBAAA,SAAAC,GACA,OAAAwI,EAAA,MAAAtI,mBAAAF,EAAAL,KAAAQ,OAAsEC,QAAAg8C,KAGtEz8C,KAAAq9C,sBAAAh9C,EAAA4wC,aAAAjxC,KAAAQ,MAAAywC,eAEA0L,EAAAx8C,UAAAq9C,oBAAA,SAAAn9C,GACA,IAAAo9C,GAAkCh9C,QAAAi8C,IAClC7zC,EAAA,MAAAtI,mBAAAP,KAAAQ,MAAAH,EAAAo9C,IAEAz9C,KAAA48C,QAAAlxC,SAGAixC,EAAAx8C,UAAA+E,mBAAA,WACAlF,KAAAu9C,+BAEAZ,EAAAx8C,UAAAo0B,qBAAA,WACAv0B,KAAA48C,QAAA5vC,6BAEA2vC,EAAAx8C,UAAAS,OAAA,WACA,IACA0T,EADAtU,KAAAQ,MAAAsyC,aACA0J,EAAA,WAAAnB,MAAAr7C,KAAA09C,qBAAA19C,KAAA29C,iBACA,OAAAn1C,EAAA,qBAA2C9G,UAAA,uBAAmC4S,IAI9EqoC,EAAAx8C,UAAAu9C,mBAAA,WACA,IAAAl6C,EAAAxD,KACAe,EAAAf,KAAAQ,MAAAkZ,EAAA3Y,EAAA2Y,eAAAD,EAAA1Y,EAAA0Y,iBAAAF,EAAAxY,EAAAwY,YAAAD,EAAAvY,EAAAuY,cAEAtZ,KAAA48C,QAAAjxC,gBACA,QAAAlF,EAAA6S,EAA0C7S,GAAA8S,EAAyB9S,IACnE,QAAAC,EAAA+S,EAAoD/S,GAAAgT,EAA+BhT,IACnF1G,KAAA48C,QAAAhxC,eAAAnF,EAAAC,GAQA,OALA1G,KAAA48C,QAAA5wC,gBAAAhM,KAAAquB,eACAruB,KAAA48C,QAAA/vC,UACA7M,KAAA48C,QAAA7vC,aAAA,WAAmD,OAAAvJ,EAAAo6C,gBAEnD59C,KAAA48C,QAAA9vC,WAGA6vC,EAAAx8C,UAAAw9C,eAAA,WAIA,IAHA,IAAA58C,EAAAf,KAAAQ,MAAAkZ,EAAA3Y,EAAA2Y,eAAAD,EAAA1Y,EAAA0Y,iBAAAF,EAAAxY,EAAAwY,YACAjF,KACAupC,KACAp3C,EAHA1F,EAAAuY,cAG0C7S,GAAA8S,EAAyB9S,IACnE,QAAAC,EAAA+S,EAAoD/S,GAAAgT,EAA+BhT,IACnF4N,EAAAxG,KAAA9N,KAAAquB,cAAA5nB,EAAAC,IACAm3C,EAAA/vC,MAAArH,EAAAC,IAOA,OADA1G,KAAA48C,QAAA3vC,QAAA4wC,EAAAvpC,GACAA,GAIAqoC,EAAAx8C,UAAAo9C,4BAAA,WACA,IAAAx8C,EAAAf,KAAAQ,MAAAmyC,EAAA5xC,EAAA4xC,iBAAAG,EAAA/xC,EAAA+xC,YACAA,IAAA0J,EAAA,WAAA3S,MAAAiJ,IAAA0J,EAAA,WAAAnB,OAAAr7C,KAAA48C,QAAA/vC,WACAhE,EAAA,MAAAlC,WAAAgsC,IAGAgK,EAAAv5C,cACA0vC,WAAA0J,EAAA,WAAAnB,OAEAsB,EAxHA,CAyHCn0C,EAAA,WAMD,SAAA4zC,EAAA31C,EAAAC,GACA,OAAAu2C,EAAA,kBAAAx2C,GAAAw2C,EAAA,qBAAAv2C;;;;0JCtJAiN,EAAAlH,OAAAqxC,EAAA,QAAArxC,CAAAsxC,OAAA59C,UAAA8e,KAAA++B,KADA,+vHAGA9vC,EAAA;;;;6DCLAxO,EAAAu+C,EAAA/vC,GAQAA,EAAA,QARA,SAAAgwC,GACA,IAAAja,KACA,gBAAAka,GAEA,YADA75C,IAAA2/B,EAAAka,KAAAla,EAAAka,GAAAD,EAAAC,IACAla,EAAAka;;;;gPCKA,IAIAC,EAJAC,EAAA,sBAKApxB,IAAAmxB,MAAsCC,GAAAC,EAAA/wC,EAAAgxC,OAAAH,GAOtC,IAAAI,EAAAC,EAAA,QACAC,EAAA,SAAAv4C,GACA,gBAAAA,GAAA,aAAAA,GAEAw4C,EAAA,WACA,UAEAC,EAAA,SAAAC,EAAAlzB,GAIA,IAHA,IAAAve,EAAA,EACAhF,EAAAnI,UAAAmI,OAEQgF,EAAAhF,EAAYgF,IAAA,CACpB,IAAAiW,EAAApjB,UAAAmN,GAEA0xC,OAAA,EAEA,IAAAA,KAAAz7B,EACAw7B,EAAAC,KACAnzB,EAAAmzB,GAAAz7B,EAAAy7B,IAKA,OAAAnzB,GA6KAzd,EAAA,QA1KA,SAAA6wC,EAAAC,GACA,IAAAC,EAAA,SAAAC,EAAA5I,GAOA,IAAA6I,EACAC,EACAC,EACAC,OAEAh7C,IAAAgyC,IACA6I,EAAA7I,EAAA3gC,EACAypC,EAAA9I,EAAAlwC,MACAi5C,EAAA/I,EAAA3qB,OACA2zB,EAAAJ,EAAAK,uBAAAjJ,EAAAgJ,kBAAA,SAAAE,GACA,OAAAN,EAAAK,sBAAAC,IACAlJ,EAAAgJ,kBAAAE,IACOlJ,EAAAgJ,mBAGP,IAAAG,EAAAP,EAAAQ,iBAAAR,EACAS,OAAAr7C,IAAA66C,GAAAM,GAAAP,EAAAU,gBAAAV,EAMA,MAJA,mBAAAI,IACAA,EAAA,iBAAAK,KAAAE,OAAA,KAAAF,EAAAE,OAAA,GAAAC,cAAAtB,EAAAE,GAGA,WACA,IAAA7yC,EAAA5L,UACA8/C,EAAAN,QAAAn7C,IAAA46C,EAAAc,iBAAAd,EAAAc,iBAAA/6B,MAAA,MAMA,QAJA3gB,IAAA86C,GACAW,EAAAjyC,KAAA,SAAAsxC,EAAA,UAGA96C,IAAA66C,EACA,SAAAtzC,EAAA,SAAAvH,IAAAuH,EAAA,GAAAo0C,IACAF,EAAAjyC,KAAA/N,MAAAggD,EAAAl0C,OACS,CACTk0C,EAAAjyC,KAAAjC,EAAA,OAIA,IAHA,IAAAq0C,EAAAr0C,EAAAzD,OACAgF,EAAA,EAEgBA,EAAA8yC,EAAS9yC,IACzB2yC,EAAAjyC,KAAAjC,EAAAuB,GAAAvB,EAAA,GAAAuB,IAKA,IAAA+yC,EAEA,SAAAC,GAGA,SAAAD,IACA,OAAAC,EAAArgD,MAAAC,KAAAC,YAAAD,MAtGA,SAAAqgD,EAAAC,GACAD,EAAAlgD,UAAAsM,OAAA8zC,OAAAD,EAAAngD,WACAkgD,EAAAlgD,UAAAqgD,YAAAH,EACAA,EAAAI,UAAAH,EAgGAI,CAAAP,EAAAC,GAMA,IAAAO,EAAAR,EAAAhgD,UAgDA,OA9CAwgD,EAAAC,mBAAA,gBACAt8C,IAAAtE,KAAAuD,QAAA86C,KACAr+C,KAAA6gD,YAAA7gD,KAAAuD,QAAA86C,GAAAyC,UAhGA,SAAAC,GACA/gD,KAAAgE,UACA+8C,WA8FA/C,KAAAh+C,SAIA2gD,EAAApsB,qBAAA,gBACAjwB,IAAAtE,KAAA6gD,aACA7gD,KAAAuD,QAAA86C,GAAAwC,YAAA7gD,KAAA6gD,cAIAF,EAAA//C,OAAA,WACA,IAAAJ,EAAAR,KAAAQ,MACAqD,EAAA7D,KAAA6D,MACA7D,KAAAghD,YAAApC,EAAAD,KAA0Dn+C,GAC1DugD,MAAA,OAAAl9C,KAAAk9C,OAAAvgD,EAAAugD,YAEA,IAAAr/C,EAAA,GACAu/C,KAoBA,OAlBAzgD,EAAAkB,YAEAA,QADA4C,IAAA66C,EACAJ,EAAAmC,oBAAAD,EAAAzgD,EAAAkB,WAEAlB,EAAAkB,UAAA,KAKAA,QADA4C,IAAA66C,EACAJ,EAAAoC,IAAAphD,MAAAC,KAAA+/C,EAAAlT,OAAAoU,IAEA9B,OAGA76C,IAAA+6C,IACA39C,GAAA,IAAA29C,GAGAL,EAAAvqC,cAAAkrC,EACAf,EAAAU,KAA0C9+C,GAC1CkB,YACAuB,IAAAzC,EAAA4gD,aAIAjB,EAvDA,CAwDOnB,EAAAqC,WA+BP,OA7BAlB,EAAAmB,iBAAAh9C,IAAA86C,IAAA,4BAAAO,MAAA2B,aAAA3B,EAAA1zB,MAAA,sBAEA3nB,IAAA46C,EAAA97C,eAEA+8C,EAAA/8C,aAAA87C,EAAA97C,cAGA+8C,EAAAlzB,eACAkzB,EAAAH,iBAAAD,EACAI,EAAAP,eAAAD,EACAQ,EAAAT,eAAAS,EACAA,EAAAZ,sBAAAD,EACA7yC,OAAA80C,eAAApB,EAAA,YACAqB,YAAA,EACAn9C,MAAA,WAMA,UAAAg7C,KAIAc,EAAAsB,cAAA,SAAAC,EAAAC,GACA,OAAA1C,EAAAyC,OAAAp9C,IAAAq9C,EACA/C,EAAAD,KAAqCrI,EAAAqL,GAAArL,GAAAv2C,WAAA,EAAAggD,IAGrCI,IA0BA,OAAAlB;;;;2hCCjNAtrC,EAAAlH,OAAAm1C,EAAA,QAAAn1C,CAAAo1C,EAAAC,EAAAv0C,GAEAW,EAAA","file":"3.chunk.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Classes as CoreClasses, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { JSONFormat } from \"./formats/jsonFormat\";\nimport { TruncatedFormat } from \"./formats/truncatedFormat\";\nexport var emptyCellRenderer = function () { return React.createElement(Cell, null); };\nvar Cell = /** @class */ (function (_super) {\n    tslib_1.__extends(Cell, _super);\n    function Cell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Cell.prototype.shouldComponentUpdate = function (nextProps) {\n        // deeply compare \"style,\" because a new but identical object might have been provided.\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.deepCompareKeys(this.props.style, nextProps.style));\n    };\n    Cell.prototype.render = function () {\n        var _a = this.props, cellRef = _a.cellRef, tabIndex = _a.tabIndex, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, onKeyPress = _a.onKeyPress, style = _a.style, intent = _a.intent, interactive = _a.interactive, loading = _a.loading, tooltip = _a.tooltip, truncated = _a.truncated, className = _a.className, wrapText = _a.wrapText;\n        var classes = classNames(Classes.TABLE_CELL, CoreClasses.intentClass(intent), (_b = {},\n            _b[Classes.TABLE_CELL_INTERACTIVE] = interactive,\n            _b[CoreClasses.LOADING] = loading,\n            _b[Classes.TABLE_TRUNCATED_CELL] = truncated,\n            _b), className);\n        var textClasses = classNames((_c = {},\n            _c[Classes.TABLE_TRUNCATED_TEXT] = truncated,\n            _c[Classes.TABLE_NO_WRAP_TEXT] = !wrapText,\n            _c));\n        // add width and height to the children, for use in shouldComponentUpdate in truncatedFormat\n        // note: these aren't actually used by truncated format, just in shouldComponentUpdate\n        var modifiedChildren = React.Children.map(this.props.children, function (child) {\n            if (style != null && React.isValidElement(child)) {\n                var childType = child.type;\n                // can't get prototype of \"string\" child, so treat those separately\n                if (typeof child === \"string\" || typeof childType === \"string\") {\n                    return child;\n                }\n                else {\n                    var isTruncatedFormat = childType.prototype === TruncatedFormat.prototype ||\n                        TruncatedFormat.prototype.isPrototypeOf(childType) ||\n                        childType.prototype === JSONFormat.prototype ||\n                        JSONFormat.prototype.isPrototypeOf(childType);\n                    // only add props if child is truncated format\n                    if (isTruncatedFormat) {\n                        return React.cloneElement(child, {\n                            parentCellHeight: parseInt(style.height, 10),\n                            parentCellWidth: parseInt(style.width, 10),\n                        });\n                    }\n                }\n            }\n            return child;\n        });\n        var content = React.createElement(\"div\", { className: textClasses }, modifiedChildren);\n        return (React.createElement(\"div\", tslib_1.__assign({ className: classes, title: tooltip, ref: cellRef }, { style: style, tabIndex: tabIndex, onKeyDown: onKeyDown, onKeyUp: onKeyUp, onKeyPress: onKeyPress }),\n            React.createElement(LoadableContent, { loading: loading, variableLength: true }, content)));\n        var _b, _c;\n    };\n    Cell.defaultProps = {\n        truncated: true,\n        wrapText: false,\n    };\n    return Cell;\n}(React.Component));\nexport { Cell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { EditableText, Hotkey, Hotkeys, HotkeysTarget, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"../interactions/draggable\";\nimport { Cell } from \"./cell\";\nvar EditableCell = /** @class */ (function (_super) {\n    tslib_1.__extends(EditableCell, _super);\n    function EditableCell(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.refHandlers = {\n            cell: function (ref) {\n                _this.cellRef = ref;\n            },\n        };\n        _this.handleKeyPress = function () {\n            if (_this.state.isEditing || !_this.props.isFocused) {\n                return;\n            }\n            // setting dirty value to empty string because apparently the text field will pick up the key and write it in there\n            _this.setState({ isEditing: true, dirtyValue: \"\", savedValue: _this.state.savedValue });\n        };\n        _this.handleEdit = function () {\n            _this.setState({ isEditing: true, dirtyValue: _this.state.savedValue });\n        };\n        _this.handleCancel = function (value) {\n            // don't strictly need to clear the dirtyValue, but it's better hygiene\n            _this.setState({ isEditing: false, dirtyValue: undefined });\n            _this.invokeCallback(_this.props.onCancel, value);\n        };\n        _this.handleChange = function (value) {\n            _this.setState({ dirtyValue: value });\n            _this.invokeCallback(_this.props.onChange, value);\n        };\n        _this.handleConfirm = function (value) {\n            _this.setState({ isEditing: false, savedValue: value, dirtyValue: undefined });\n            _this.invokeCallback(_this.props.onConfirm, value);\n        };\n        _this.handleCellActivate = function (_event) {\n            return true;\n        };\n        _this.handleCellDoubleClick = function (_event) {\n            _this.handleEdit();\n        };\n        _this.state = {\n            isEditing: false,\n            savedValue: props.value,\n        };\n        return _this;\n    }\n    EditableCell.prototype.componentDidMount = function () {\n        this.checkShouldFocus();\n    };\n    EditableCell.prototype.componentDidUpdate = function () {\n        this.checkShouldFocus();\n    };\n    EditableCell.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.shallowCompareKeys(this.state, nextState) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, [\"style\"]));\n    };\n    EditableCell.prototype.componentWillReceiveProps = function (nextProps) {\n        var value = nextProps.value;\n        if (value != null) {\n            this.setState({ savedValue: value, dirtyValue: value });\n        }\n    };\n    EditableCell.prototype.render = function () {\n        var _a = this.props, onCancel = _a.onCancel, onChange = _a.onChange, onConfirm = _a.onConfirm, truncated = _a.truncated, wrapText = _a.wrapText, spreadableProps = tslib_1.__rest(_a, [\"onCancel\", \"onChange\", \"onConfirm\", \"truncated\", \"wrapText\"]);\n        var _b = this.state, isEditing = _b.isEditing, dirtyValue = _b.dirtyValue, savedValue = _b.savedValue;\n        var interactive = spreadableProps.interactive || isEditing;\n        var cellContents = null;\n        if (isEditing) {\n            cellContents = (React.createElement(EditableText, { isEditing: true, className: classNames(Classes.TABLE_EDITABLE_TEXT, Classes.TABLE_EDITABLE_NAME), intent: spreadableProps.intent, minWidth: null, onCancel: this.handleCancel, onChange: this.handleChange, onConfirm: this.handleConfirm, onEdit: this.handleEdit, placeholder: \"\", selectAllOnFocus: false, value: dirtyValue }));\n        }\n        else {\n            var textClasses = classNames(Classes.TABLE_EDITABLE_TEXT, (_c = {},\n                _c[Classes.TABLE_TRUNCATED_TEXT] = truncated,\n                _c[Classes.TABLE_NO_WRAP_TEXT] = !wrapText,\n                _c));\n            cellContents = React.createElement(\"div\", { className: textClasses }, savedValue);\n        }\n        return (React.createElement(Cell, tslib_1.__assign({}, spreadableProps, { truncated: false, interactive: interactive, cellRef: this.refHandlers.cell, onKeyPress: this.handleKeyPress }),\n            React.createElement(Draggable, { onActivate: this.handleCellActivate, onDoubleClick: this.handleCellDoubleClick, preventDefault: false, stopPropagation: interactive }, cellContents)));\n        var _c;\n    };\n    EditableCell.prototype.renderHotkeys = function () {\n        return (React.createElement(Hotkeys, null,\n            React.createElement(Hotkey, { key: \"edit-cell\", label: \"Edit the currently focused cell\", group: \"Table\", combo: \"f2\", onKeyDown: this.handleEdit })));\n    };\n    EditableCell.prototype.checkShouldFocus = function () {\n        if (this.props.isFocused && !this.state.isEditing) {\n            // don't focus if we're editing -- we'll lose the fact that we're editing\n            this.cellRef.focus();\n        }\n    };\n    EditableCell.prototype.invokeCallback = function (callback, value) {\n        // pass through the row and column indices if they were provided as props by the consumer\n        var _a = this.props, rowIndex = _a.rowIndex, columnIndex = _a.columnIndex;\n        CoreUtils.safeInvoke(callback, value, rowIndex, columnIndex);\n    };\n    EditableCell.defaultProps = {\n        truncated: true,\n        wrapText: false,\n    };\n    EditableCell = tslib_1.__decorate([\n        HotkeysTarget\n    ], EditableCell);\n    return EditableCell;\n}(React.Component));\nexport { EditableCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { TruncatedFormat, TruncatedPopoverMode } from \"./truncatedFormat\";\nvar JSONFormat = /** @class */ (function (_super) {\n    tslib_1.__extends(JSONFormat, _super);\n    function JSONFormat() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    JSONFormat.prototype.render = function () {\n        var _a = this.props, children = _a.children, omitQuotesOnStrings = _a.omitQuotesOnStrings, stringify = _a.stringify;\n        var showPopover = this.props.showPopover;\n        // always hide popover if value is nully\n        var isNully = children == null;\n        if (isNully) {\n            showPopover = TruncatedPopoverMode.NEVER;\n        }\n        var className = classNames(this.props.className, (_b = {},\n            _b[Classes.TABLE_NULL] = isNully,\n            _b));\n        var displayValue = \"\";\n        if (omitQuotesOnStrings && typeof children === \"string\") {\n            displayValue = children;\n        }\n        else {\n            displayValue = stringify(children);\n        }\n        return (React.createElement(TruncatedFormat, tslib_1.__assign({}, this.props, { className: className, showPopover: showPopover }), displayValue));\n        var _b;\n    };\n    JSONFormat.defaultProps = {\n        omitQuotesOnStrings: true,\n        stringify: function (obj) { return JSON.stringify(obj, null, 2); },\n    };\n    return JSONFormat;\n}(React.Component));\nexport { JSONFormat };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Icon, Popover, Position } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { Utils } from \"../../common/utils\";\nimport { Locator } from \"../../locator\";\n// amount in pixels that the content div width changes when truncated vs when\n// not truncated. Note: could be modified by styles\n// Note 2: this doesn't come from the width of the popover element, but the \"right\" style\n// on the div, which comes from styles\nvar CONTENT_DIV_WIDTH_DELTA = 25;\nexport var TruncatedPopoverMode;\n(function (TruncatedPopoverMode) {\n    TruncatedPopoverMode[\"ALWAYS\"] = \"always\";\n    TruncatedPopoverMode[\"NEVER\"] = \"never\";\n    TruncatedPopoverMode[\"WHEN_TRUNCATED\"] = \"when-truncated\";\n    TruncatedPopoverMode[\"WHEN_TRUNCATED_APPROX\"] = \"when-truncated-approx\";\n})(TruncatedPopoverMode || (TruncatedPopoverMode = {}));\nvar TruncatedFormat = /** @class */ (function (_super) {\n    tslib_1.__extends(TruncatedFormat, _super);\n    function TruncatedFormat() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isPopoverOpen: false,\n            isTruncated: false,\n        };\n        _this.handleContentDivRef = function (ref) { return (_this.contentDiv = ref); };\n        _this.handlePopoverOpen = function () {\n            _this.setState({ isPopoverOpen: true });\n        };\n        _this.handlePopoverClose = function () {\n            _this.setState({ isPopoverOpen: false });\n        };\n        return _this;\n    }\n    TruncatedFormat.prototype.componentDidMount = function () {\n        this.setTruncationState();\n    };\n    TruncatedFormat.prototype.componentDidUpdate = function () {\n        this.setTruncationState();\n    };\n    TruncatedFormat.prototype.render = function () {\n        var _a = this.props, children = _a.children, detectTruncation = _a.detectTruncation, truncateLength = _a.truncateLength, truncationSuffix = _a.truncationSuffix;\n        var content = \"\" + children;\n        var cellContent = content;\n        if (!detectTruncation && truncateLength > 0 && cellContent.length > truncateLength) {\n            cellContent = cellContent.substring(0, truncateLength) + truncationSuffix;\n        }\n        if (this.shouldShowPopover(content)) {\n            var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT);\n            return (React.createElement(\"div\", { className: className },\n                React.createElement(\"div\", { className: Classes.TABLE_TRUNCATED_VALUE, ref: this.handleContentDivRef }, cellContent),\n                this.renderPopover()));\n        }\n        else {\n            var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT_TEXT);\n            return (React.createElement(\"div\", { className: className, ref: this.handleContentDivRef }, cellContent));\n        }\n    };\n    TruncatedFormat.prototype.renderPopover = function () {\n        var _a = this.props, children = _a.children, preformatted = _a.preformatted;\n        // `<Popover>` will always check the content's position on update\n        // regardless if it is open or not. This negatively affects perf due to\n        // layout thrashing. So instead we manage the popover state ourselves\n        // and mimic its popover target\n        if (this.state.isPopoverOpen) {\n            var popoverClasses = classNames(Classes.TABLE_TRUNCATED_POPOVER, preformatted ? Classes.TABLE_POPOVER_WHITESPACE_PRE : Classes.TABLE_POPOVER_WHITESPACE_NORMAL);\n            var popoverContent = React.createElement(\"div\", { className: popoverClasses }, children);\n            return (React.createElement(Popover, { className: Classes.TABLE_TRUNCATED_POPOVER_TARGET, modifiers: { preventOverflow: { boundariesElement: \"window\" } }, content: popoverContent, position: Position.BOTTOM, isOpen: true, onClose: this.handlePopoverClose },\n                React.createElement(Icon, { icon: \"more\" })));\n        }\n        else {\n            // NOTE: This structure matches what `<Popover>` does internally. If\n            // `<Popover>` changes, this must be updated.\n            return (React.createElement(\"span\", { className: Classes.TABLE_TRUNCATED_POPOVER_TARGET, onClick: this.handlePopoverOpen },\n                React.createElement(Icon, { icon: \"more\" })));\n        }\n    };\n    TruncatedFormat.prototype.shouldShowPopover = function (content) {\n        var _a = this.props, detectTruncation = _a.detectTruncation, measureByApproxOptions = _a.measureByApproxOptions, showPopover = _a.showPopover, truncateLength = _a.truncateLength;\n        switch (showPopover) {\n            case TruncatedPopoverMode.ALWAYS:\n                return true;\n            case TruncatedPopoverMode.NEVER:\n                return false;\n            case TruncatedPopoverMode.WHEN_TRUNCATED:\n                return detectTruncation\n                    ? this.state.isTruncated\n                    : truncateLength > 0 && content.length > truncateLength;\n            case TruncatedPopoverMode.WHEN_TRUNCATED_APPROX:\n                if (!detectTruncation) {\n                    return truncateLength > 0 && content.length > truncateLength;\n                }\n                if (this.props.parentCellHeight == null || this.props.parentCellWidth == null) {\n                    return false;\n                }\n                var approximateCharWidth = measureByApproxOptions.approximateCharWidth, approximateLineHeight = measureByApproxOptions.approximateLineHeight, cellHorizontalPadding = measureByApproxOptions.cellHorizontalPadding, numBufferLines = measureByApproxOptions.numBufferLines;\n                var cellWidth = this.props.parentCellWidth;\n                var approxCellHeight = Utils.getApproxCellHeight(content, cellWidth, approximateCharWidth, approximateLineHeight, cellHorizontalPadding, numBufferLines);\n                var shouldTruncate = approxCellHeight > this.props.parentCellHeight;\n                return shouldTruncate;\n            default:\n                return false;\n        }\n    };\n    TruncatedFormat.prototype.setTruncationState = function () {\n        if (!this.props.detectTruncation || this.props.showPopover !== TruncatedPopoverMode.WHEN_TRUNCATED) {\n            return;\n        }\n        if (this.contentDiv === undefined) {\n            this.setState({ isTruncated: false });\n            return;\n        }\n        var isTruncated = this.state.isTruncated;\n        // take all measurements at once to avoid excessive DOM reflows.\n        var _a = this.contentDiv, containerHeight = _a.clientHeight, containerWidth = _a.clientWidth, actualContentHeight = _a.scrollHeight, contentWidth = _a.scrollWidth;\n        // if the content is truncated, then a popover handle will be present as a\n        // sibling of the content. we don't want to consider that handle when\n        // calculating the width of the actual content, so subtract it.\n        var actualContentWidth = isTruncated ? contentWidth - CONTENT_DIV_WIDTH_DELTA : contentWidth;\n        // we of course truncate the content if it doesn't fit in the container. but we\n        // also aggressively truncate if they're the same size with truncation enabled;\n        // this addresses browser-crashing stack-overflow bugs at various zoom levels.\n        // (see: https://github.com/palantir/blueprint/pull/1519)\n        var shouldTruncate = (isTruncated && actualContentWidth === containerWidth) ||\n            actualContentWidth > containerWidth ||\n            actualContentHeight > containerHeight;\n        this.setState({ isTruncated: shouldTruncate });\n    };\n    TruncatedFormat.defaultProps = {\n        detectTruncation: false,\n        measureByApproxOptions: {\n            approximateCharWidth: 8,\n            approximateLineHeight: 18,\n            cellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n            numBufferLines: 0,\n        },\n        preformatted: false,\n        showPopover: TruncatedPopoverMode.WHEN_TRUNCATED,\n        truncateLength: 2000,\n        truncationSuffix: \"...\",\n    };\n    return TruncatedFormat;\n}(React.PureComponent));\nexport { TruncatedFormat };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { emptyCellRenderer } from \"./cell/cell\";\nvar Column = /** @class */ (function (_super) {\n    tslib_1.__extends(Column, _super);\n    function Column() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Column.defaultProps = {\n        cellRenderer: emptyCellRenderer,\n    };\n    return Column;\n}(React.PureComponent));\nexport { Column };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { Utils } from \"@blueprintjs/core\";\nimport { requestIdleCallback } from \"./requestIdleCallback\";\n/**\n * This class helps batch updates to large lists.\n *\n * For example, if your React component has many children, updating them all at\n * once may cause jank when reconciling the DOM. This class helps you update\n * only a few children per frame.\n *\n * A typical usage would be:\n *\n * ```tsx\n * public renderChildren = (allChildrenKeys: string[]) => {\n *\n *     batcher.startNewBatch();\n *\n *     allChildrenKeys.forEach((prop1: string, index: number) => {\n *         batcher.addArgsToBatch(prop1, \"prop2\", index);\n *     });\n *\n *     batcher.removeOldAddNew((prop1: string, prop2: string, other: number) => {\n *         return <Child prop1={prop1} prop2={prop2} other={other} />;\n *     });\n *\n *     if (!batcher.isDone()) {\n *         batcher.idleCallback(this.forceUpdate());\n *     }\n *\n *     const currentChildren = batcher.getList();\n *     return currentChildren;\n * }\n *\n * ```\n */\nvar Batcher = /** @class */ (function () {\n    function Batcher() {\n        var _this = this;\n        this.currentObjects = {};\n        this.oldObjects = {};\n        this.batchArgs = {};\n        this.done = true;\n        this.handleIdleCallback = function () {\n            var callback = _this.callback;\n            delete _this.callback;\n            Utils.safeInvoke(callback);\n        };\n        this.mapCurrentObjectKey = function (key) {\n            return _this.currentObjects[key];\n        };\n    }\n    /**\n     * Resets the \"batch\" and \"current\" sets. This essentially clears the cache\n     * and prevents accidental re-use of \"current\" objects.\n     */\n    Batcher.prototype.reset = function () {\n        this.batchArgs = {};\n        this.oldObjects = this.currentObjects;\n        this.currentObjects = {};\n    };\n    /**\n     * Starts a new \"batch\" argument set\n     */\n    Batcher.prototype.startNewBatch = function () {\n        this.batchArgs = {};\n    };\n    /**\n     * Stores the variadic arguments to be later batched together.\n     *\n     * The arguments must be simple stringifyable objects.\n     */\n    Batcher.prototype.addArgsToBatch = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.batchArgs[this.getKey(args)] = args;\n    };\n    /**\n     * Compares the set of \"batch\" arguments to the \"current\" set. Creates any\n     * new objects using the callback as a factory. Removes old objects.\n     *\n     * Arguments that are in the \"current\" set but were not part of the last\n     * \"batch\" set are considered candidates for removal. Similarly, Arguments\n     * that are part of the \"batch\" set but not the \"current\" set are candidates\n     * for addition.\n     *\n     * The number of objects added and removed may be limited with the\n     * `...Limit` parameters.\n     *\n     * Finally, the batcher determines if the batching is complete if the\n     * \"current\" arguments match the \"batch\" arguments.\n     */\n    Batcher.prototype.removeOldAddNew = function (callback, addNewLimit, removeOldLimit, updateLimit) {\n        var _this = this;\n        if (addNewLimit === void 0) { addNewLimit = Batcher.DEFAULT_ADD_LIMIT; }\n        if (removeOldLimit === void 0) { removeOldLimit = Batcher.DEFAULT_REMOVE_LIMIT; }\n        if (updateLimit === void 0) { updateLimit = Batcher.DEFAULT_UPDATE_LIMIT; }\n        // remove old\n        var keysToRemove = this.setKeysDifference(this.currentObjects, this.batchArgs, removeOldLimit);\n        keysToRemove.forEach(function (key) { return delete _this.currentObjects[key]; });\n        // remove ALL old objects not in batch\n        var keysToRemoveOld = this.setKeysDifference(this.oldObjects, this.batchArgs, -1);\n        keysToRemoveOld.forEach(function (key) { return delete _this.oldObjects[key]; });\n        // copy ALL old objects into current objects if not defined\n        var keysToShallowCopy = Object.keys(this.oldObjects);\n        keysToShallowCopy.forEach(function (key) {\n            if (_this.currentObjects[key] == null) {\n                _this.currentObjects[key] = _this.oldObjects[key];\n            }\n        });\n        // update old objects with factory\n        var keysToUpdate = this.setKeysIntersection(this.oldObjects, this.currentObjects, updateLimit);\n        keysToUpdate.forEach(function (key) {\n            delete _this.oldObjects[key];\n            _this.currentObjects[key] = callback.apply(undefined, _this.batchArgs[key]);\n        });\n        // add new objects with factory\n        var keysToAdd = this.setKeysDifference(this.batchArgs, this.currentObjects, addNewLimit);\n        keysToAdd.forEach(function (key) { return (_this.currentObjects[key] = callback.apply(undefined, _this.batchArgs[key])); });\n        // set `done` to true of sets match exactly after add/remove and there\n        // are no \"old objects\" remaining\n        this.done =\n            this.setHasSameKeys(this.batchArgs, this.currentObjects) && Object.keys(this.oldObjects).length === 0;\n    };\n    /**\n     * Returns true of the \"current\" set matches the \"batch\" set.\n     */\n    Batcher.prototype.isDone = function () {\n        return this.done;\n    };\n    /**\n     * Returns all the objects in the \"current\" set.\n     */\n    Batcher.prototype.getList = function () {\n        return Object.keys(this.currentObjects).map(this.mapCurrentObjectKey);\n    };\n    /**\n     * Registers a callback to be invoked on the next idle frame. If a callback\n     * has already been registered, we do not register a new one.\n     */\n    Batcher.prototype.idleCallback = function (callback) {\n        if (!this.callback) {\n            this.callback = callback;\n            requestIdleCallback(this.handleIdleCallback);\n        }\n    };\n    Batcher.prototype.cancelOutstandingCallback = function () {\n        delete this.callback;\n    };\n    /**\n     * Forcibly overwrites the current list of batched objects. Not recommended\n     * for normal usage.\n     */\n    Batcher.prototype.setList = function (objectsArgs, objects) {\n        var _this = this;\n        this.reset();\n        objectsArgs.forEach(function (args, i) {\n            _this.addArgsToBatch.apply(_this, args);\n            _this.currentObjects[_this.getKey(args)] = objects[i];\n        });\n        this.done = true;\n    };\n    Batcher.prototype.getKey = function (args) {\n        return args.join(Batcher.ARG_DELIMITER);\n    };\n    Batcher.prototype.setKeysDifference = function (a, b, limit) {\n        return this.setKeysOperation(a, b, \"difference\", limit);\n    };\n    Batcher.prototype.setKeysIntersection = function (a, b, limit) {\n        return this.setKeysOperation(a, b, \"intersect\", limit);\n    };\n    /**\n     * Compares the keys of A from B -- and performs an \"intersection\" or\n     * \"difference\" operation on the keys.\n     *\n     * Note that the order of operands A and B matters for the \"difference\"\n     * operation.\n     *\n     * Returns an array of at most `limit` keys.\n     */\n    Batcher.prototype.setKeysOperation = function (a, b, operation, limit) {\n        var result = [];\n        var aKeys = Object.keys(a);\n        for (var i = 0; i < aKeys.length && (limit < 0 || result.length < limit); i++) {\n            var key = aKeys[i];\n            if ((operation === \"difference\" && a[key] && !b[key]) || (operation === \"intersect\" && a[key] && b[key])) {\n                result.push(key);\n            }\n        }\n        return result;\n    };\n    /**\n     * Returns true of objects `a` and `b` have exactly the same keys.\n     */\n    Batcher.prototype.setHasSameKeys = function (a, b) {\n        var aKeys = Object.keys(a);\n        var bKeys = Object.keys(b);\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n        for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {\n            var aKey = aKeys_1[_i];\n            if (b[aKey] === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Batcher.DEFAULT_ADD_LIMIT = 20;\n    Batcher.DEFAULT_UPDATE_LIMIT = 20;\n    Batcher.DEFAULT_REMOVE_LIMIT = 20;\n    Batcher.ARG_DELIMITER = \"|\";\n    return Batcher;\n}());\nexport { Batcher };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport var TABLE_BODY = \"pt-table-body\";\nexport var TABLE_BODY_SCROLL_CLIENT = \"pt-table-body-scroll-client\";\nexport var TABLE_BODY_VIRTUAL_CLIENT = \"pt-table-body-virtual-client\";\nexport var TABLE_BOTTOM_CONTAINER = \"pt-table-bottom-container\";\nexport var TABLE_CELL = \"pt-table-cell\";\nexport var TABLE_CELL_CLIENT = \"pt-table-cell-client\";\nexport var TABLE_CELL_GHOST = \"pt-table-cell-ghost\";\nexport var TABLE_CELL_INTERACTIVE = \"pt-table-cell-interactive\";\nexport var TABLE_CELL_LEDGER_EVEN = \"pt-table-cell-ledger-even\";\nexport var TABLE_CELL_LEDGER_ODD = \"pt-table-cell-ledger-odd\";\nexport var TABLE_COLUMN_HEADER_TR = \"pt-table-column-header-tr\";\nexport var TABLE_COLUMN_HEADERS = \"pt-table-column-headers\";\nexport var TABLE_COLUMN_HEADER_CELL = \"pt-table-column-header-cell\";\nexport var TABLE_COLUMN_NAME = \"pt-table-column-name\";\nexport var TABLE_COLUMN_NAME_TEXT = \"pt-table-column-name-text\";\nexport var TABLE_CONTAINER = \"pt-table-container\";\nexport var TABLE_DRAGGING = \"pt-table-dragging\";\nexport var TABLE_EDITABLE_NAME = \"pt-table-editable-name\";\nexport var TABLE_EDITABLE_TEXT = \"pt-table-editable-text\";\nexport var TABLE_FOCUS_REGION = \"pt-table-focus-region\";\nexport var TABLE_HAS_INTERACTION_BAR = \"pt-table-has-interaction-bar\";\nexport var TABLE_HAS_REORDER_HANDLE = \"pt-table-has-reorder-handle\";\nexport var TABLE_HEADER = \"pt-table-header\";\nexport var TABLE_HEADER_ACTIVE = \"pt-table-header-active\";\nexport var TABLE_HEADER_CONTENT = \"pt-table-header-content\";\nexport var TABLE_HEADER_REORDERABLE = \"pt-table-header-reorderable\";\nexport var TABLE_HEADER_SELECTED = \"pt-table-header-selected\";\nexport var TABLE_HORIZONTAL_CELL_DIVIDER = \"pt-table-horizontal-cell-divider\";\nexport var TABLE_HORIZONTAL_GUIDE = \"pt-table-horizontal-guide\";\nexport var TABLE_INTERACTION_BAR = \"pt-table-interaction-bar\";\nexport var TABLE_LAST_IN_COLUMN = \"pt-table-last-in-column\";\nexport var TABLE_LAST_IN_ROW = \"pt-table-last-in-row\";\nexport var TABLE_MENU = \"pt-table-menu\";\nexport var TABLE_NO_HORIZONTAL_SCROLL = \"pt-table-no-horizontal-scroll\";\nexport var TABLE_NO_LAYOUT = \"pt-table-no-layout\";\nexport var TABLE_NO_ROWS = \"pt-table-no-rows\";\nexport var TABLE_NO_VERTICAL_SCROLL = \"pt-table-no-vertical-scroll\";\nexport var TABLE_NO_WRAP_TEXT = \"pt-table-no-wrap-text\";\nexport var TABLE_NULL = \"pt-table-null\";\nexport var TABLE_OVERLAY = \"pt-table-overlay\";\nexport var TABLE_OVERLAY_LAYER = \"pt-table-overlay-layer\";\nexport var TABLE_OVERLAY_REORDERING_CURSOR = \"pt-table-reordering-cursor-overlay\";\nexport var TABLE_POPOVER_WHITESPACE_NORMAL = \"pt-table-popover-whitespace-normal\";\nexport var TABLE_POPOVER_WHITESPACE_PRE = \"pt-table-popover-whitespace-pre\";\nexport var TABLE_QUADRANT = \"pt-table-quadrant\";\nexport var TABLE_QUADRANT_BODY_CONTAINER = \"pt-table-quadrant-body-container\";\nexport var TABLE_QUADRANT_LEFT = \"pt-table-quadrant-left\";\nexport var TABLE_QUADRANT_MAIN = \"pt-table-quadrant-main\";\nexport var TABLE_QUADRANT_SCROLL_CONTAINER = \"pt-table-quadrant-scroll-container\";\nexport var TABLE_QUADRANT_STACK = \"pt-table-quadrant-stack\";\nexport var TABLE_QUADRANT_TOP = \"pt-table-quadrant-top\";\nexport var TABLE_QUADRANT_TOP_LEFT = \"pt-table-quadrant-top-left\";\nexport var TABLE_REGION = \"pt-table-region\";\nexport var TABLE_REORDER_HANDLE = \"pt-table-reorder-handle\";\nexport var TABLE_REORDER_HANDLE_TARGET = \"pt-table-reorder-handle-target\";\nexport var TABLE_REORDERING = \"pt-table-reordering\";\nexport var TABLE_RESIZE_GUIDES = \"pt-table-resize-guides\";\nexport var TABLE_RESIZE_HANDLE = \"pt-table-resize-handle\";\nexport var TABLE_RESIZE_HANDLE_TARGET = \"pt-table-resize-handle-target\";\nexport var TABLE_RESIZE_HORIZONTAL = \"pt-table-resize-horizontal\";\nexport var TABLE_RESIZE_SENSOR = \"pt-table-resize-sensor\";\nexport var TABLE_RESIZE_SENSOR_EXPAND = \"pt-table-resize-sensor-expand\";\nexport var TABLE_RESIZE_SENSOR_SHRINK = \"pt-table-resize-sensor-shrink\";\nexport var TABLE_RESIZE_VERTICAL = \"pt-table-resize-vertical\";\nexport var TABLE_ROUNDED_LAYOUT = \"pt-table-rounded-layout\";\nexport var TABLE_ROW_HEADERS = \"pt-table-row-headers\";\nexport var TABLE_ROW_HEADERS_CELLS_CONTAINER = \"pt-table-row-headers-cells-container\";\nexport var TABLE_ROW_NAME = \"pt-table-row-name\";\nexport var TABLE_ROW_NAME_TEXT = \"pt-table-row-name-text\";\nexport var TABLE_SELECTION_ENABLED = \"pt-table-selection-enabled\";\nexport var TABLE_SELECTION_REGION = \"pt-table-selection-region\";\nexport var TABLE_TH_MENU = \"pt-table-th-menu\";\nexport var TABLE_TH_MENU_CONTAINER = \"pt-table-th-menu-container\";\nexport var TABLE_TH_MENU_CONTAINER_BACKGROUND = \"pt-table-th-menu-container-background\";\nexport var TABLE_TH_MENU_OPEN = \"pt-table-th-menu-open\";\nexport var TABLE_THEAD = \"pt-table-thead\";\nexport var TABLE_TOP_CONTAINER = \"pt-table-top-container\";\nexport var TABLE_TRUNCATED_CELL = \"pt-table-truncated-cell\";\nexport var TABLE_TRUNCATED_FORMAT = \"pt-table-truncated-format\";\nexport var TABLE_TRUNCATED_FORMAT_TEXT = \"pt-table-truncated-format-text\";\nexport var TABLE_TRUNCATED_POPOVER = \"pt-table-truncated-popover\";\nexport var TABLE_TRUNCATED_POPOVER_TARGET = \"pt-table-truncated-popover-target\";\nexport var TABLE_TRUNCATED_TEXT = \"pt-table-truncated-text\";\nexport var TABLE_TRUNCATED_VALUE = \"pt-table-truncated-value\";\nexport var TABLE_VERTICAL_GUIDE = \"pt-table-vertical-guide\";\n/** Common code for row and column index class generator functions, since they're essentially the same. */\nfunction dimensionIndexClass(classPrefix, index) {\n    if (index == null) {\n        return undefined;\n    }\n    if (typeof index === \"number\") {\n        return \"\" + classPrefix + index;\n    }\n    return index.indexOf(classPrefix) === 0 ? index : \"\" + classPrefix + index;\n}\n/** Return CSS class for table colummn index, whether or not 'pt-table-col-' prefix is included. */\nexport function columnIndexClass(columnIndex) {\n    return dimensionIndexClass(\"pt-table-col-\", columnIndex);\n}\n/** Return CSS class for table row index, whether or not 'pt-table-row-' prefix is included. */\nexport function rowIndexClass(rowIndex) {\n    return dimensionIndexClass(\"pt-table-row-\", rowIndex);\n}\n/** Return CSS class for table colummn cell index, whether or not 'pt-table-cell-col-' prefix is included. */\nexport function columnCellIndexClass(columnIndex) {\n    return dimensionIndexClass(\"pt-table-cell-col-\", columnIndex);\n}\n/** Return CSS class for table row cell index, whether or not 'pt-table-cell-row-' prefix is included. */\nexport function rowCellIndexClass(rowIndex) {\n    return dimensionIndexClass(\"pt-table-cell-row-\", rowIndex);\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n/* istanbul ignore next */\nexport var Clipboard = {\n    /**\n     * Overrides the inherited CSS of the element to make sure it is\n     * selectable. This method also makes the element pseudo-invisible.\n     */\n    applySelectableStyles: function (elem) {\n        elem.style.overflow = \"hidden\";\n        elem.style.height = \"0px\";\n        elem.style.setProperty(\"-webkit-user-select\", \"all\");\n        elem.style.setProperty(\"-moz-user-select\", \"all\");\n        elem.style.setProperty(\"-ms-user-select\", \"all\");\n        elem.style.setProperty(\"user-select\", \"all\");\n        return elem;\n    },\n    /**\n     * Copies table cells to the clipboard. The parameter is a row-major\n     * 2-dimensional `Array` of strings and can contain nulls. We assume all\n     * rows are the same length. If not, the cells will still be copied, but\n     * the columns may not align. Returns a boolean indicating whether the\n     * copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyCells: function (cells) {\n        var table = document.createElement(\"table\");\n        Clipboard.applySelectableStyles(table);\n        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n            var row = cells_1[_i];\n            var tr = table.appendChild(document.createElement(\"tr\"));\n            for (var _a = 0, row_1 = row; _a < row_1.length; _a++) {\n                var cell = row_1[_a];\n                var td = tr.appendChild(document.createElement(\"td\"));\n                td.textContent = cell;\n            }\n        }\n        var tsv = cells.map(function (row) { return row.join(\"\\t\"); }).join(\"\\n\");\n        return Clipboard.copyElement(table, tsv);\n    },\n    /**\n     * Copies the text to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyString: function (value) {\n        var text = document.createElement(\"textarea\");\n        Clipboard.applySelectableStyles(text);\n        text.value = value;\n        return Clipboard.copyElement(text, value);\n    },\n    /**\n     * Copies the element and its children to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * If a plaintext argument is supplied, we add both the text/html and\n     * text/plain mime types to the clipboard. This preserves the built in\n     * semantics of copying elements to the clipboard while allowing custom\n     * plaintext output for programs that can't cope with HTML data in the\n     * clipboard.\n     *\n     * Verified on Firefox 47, Chrome 51.\n     *\n     * Note: Sometimes the copy does not succeed. Presumably, in order to\n     * prevent memory issues, browsers will limit the total amount of data you\n     * can copy to the clipboard. Based on ad hoc testing, we found an\n     * inconsistent limit at about 300KB or 40,000 cells. Depending on the on\n     * the content of cells, your limits may vary.\n     */\n    copyElement: function (elem, plaintext) {\n        if (!Clipboard.isCopySupported()) {\n            return false;\n        }\n        // must be document.body instead of document.documentElement for firefox\n        document.body.appendChild(elem);\n        try {\n            window.getSelection().selectAllChildren(elem);\n            if (plaintext != null) {\n                // add plaintext fallback\n                // http://stackoverflow.com/questions/23211018/copy-to-clipboard-with-jquery-js-in-chrome\n                elem.addEventListener(\"copy\", function (e) {\n                    e.preventDefault();\n                    var clipboardData = e.clipboardData || window.clipboardData;\n                    if (clipboardData != null) {\n                        clipboardData.setData(\"text/html\", elem.outerHTML);\n                        clipboardData.setData(\"text/plain\", plaintext);\n                    }\n                });\n            }\n            return document.execCommand(\"copy\");\n        }\n        catch (err) {\n            return false;\n        }\n        finally {\n            document.body.removeChild(elem);\n        }\n    },\n    /**\n     * Returns a boolean indicating whether the current browser nominally\n     * supports the `copy` operation using the `execCommand` API.\n     */\n    isCopySupported: function () {\n        return document.queryCommandSupported != null && document.queryCommandSupported(\"copy\");\n    },\n};\n","/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as PropTypes from \"prop-types\";\nexport var columnInteractionBarContextTypes = {\n    enableColumnInteractionBar: PropTypes.bool,\n};\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { ContextMenuTarget } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n/**\n * Since the ContextMenuTarget uses the `onContextMenu` prop instead\n * `element.addEventListener`, the prop can be lost. This wrapper helps us\n * maintain context menu fuctionality when doing fancy React.cloneElement\n * chains.\n */\nvar ContextMenuTargetWrapper = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextMenuTargetWrapper, _super);\n    function ContextMenuTargetWrapper() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ContextMenuTargetWrapper.prototype.render = function () {\n        var _a = this.props, className = _a.className, children = _a.children, style = _a.style;\n        return (React.createElement(\"div\", { className: className, style: style }, children));\n    };\n    ContextMenuTargetWrapper.prototype.renderContextMenu = function (e) {\n        return this.props.renderContextMenu(e);\n    };\n    ContextMenuTargetWrapper = tslib_1.__decorate([\n        ContextMenuTarget\n    ], ContextMenuTargetWrapper);\n    return ContextMenuTargetWrapper;\n}(React.PureComponent));\nexport { ContextMenuTargetWrapper };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport var Direction;\n(function (Direction) {\n    Direction[\"UP\"] = \"up\";\n    Direction[\"DOWN\"] = \"down\";\n    Direction[\"LEFT\"] = \"left\";\n    Direction[\"RIGHT\"] = \"right\";\n})(Direction || (Direction = {}));\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar ns = \"[Blueprint Table]\";\n// const deprec = `${ns} DEPRECATION:`;\nexport var QUADRANT_ON_SCROLL_UNNECESSARILY_DEFINED = ns + \" <TableQuadrant> onScroll need not be defined for any quadrant aside from the MAIN quadrant.\";\nexport var TABLE_EXPAND_FOCUSED_REGION_MULTI_COLUMN_REGION = ns + \" <Table> Cannot expand a FULL_COLUMNS selection using a multi-column region.\";\nexport var TABLE_EXPAND_FOCUSED_REGION_MULTI_ROW_REGION = ns + \" <Table> Cannot expand a FULL_COLUMNS selection using a multi-row region.\";\nexport var TABLE_NON_COLUMN_CHILDREN_WARNING = ns + \" <Table> Children of Table must be Columns\\\"\";\nexport var TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING = ns +\n    \" <Table> numFrozenColumns must be in less than or equal to the number of columns. Clamping the value for you.\";\nexport var TABLE_NUM_FROZEN_COLUMNS_NEGATIVE = ns + \" <Table> requires numFrozenColumns to be greater than or equal to 0.\";\nexport var TABLE_NUM_FROZEN_ROWS_BOUND_WARNING = ns + \" <Table> numFrozenRows must be less than or equal to numRows. Clamping the value for you.\";\nexport var TABLE_NUM_FROZEN_ROWS_NEGATIVE = ns + \" <Table> requires numFrozenRows to be greater than or equal to 0.\";\nexport var TABLE_NUM_ROWS_ROW_HEIGHTS_MISMATCH = ns + \" <Table> requires rowHeights.length to equal numRows when both props are provided.\";\nexport var TABLE_NUM_ROWS_NEGATIVE = ns + \" <Table> requires numRows to be greater than or equal to 0.\";\nexport var TABLE_NUM_COLUMNS_COLUMN_WIDTHS_MISMATCH = ns + \" <Table> requires columnWidths.length to equal the number of <Column>s if provided.\";\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport * as Classes from \"./classes\";\nimport { Rect } from \"./rect\";\nimport { Utils } from \"./utils\";\n/**\n * This class manages the sizes of grid cells using arrays of individual row/column sizes.\n */\nvar Grid = /** @class */ (function () {\n    /**\n     * This constructor accumulates the heights and widths in `O(n)`, saving\n     * time in later calculations.\n     *\n     * @param bleed - The number of rows/cols that we expand beyond the\n     *     viewport (on all sides). This helps avoid displaying an empty\n     *     viewport when the user scrolls quickly.\n     */\n    function Grid(rowHeights, columnWidths, bleed, ghostHeight, ghostWidth) {\n        if (bleed === void 0) { bleed = Grid.DEFAULT_BLEED; }\n        if (ghostHeight === void 0) { ghostHeight = Grid.DEFAULT_GHOST_HEIGHT; }\n        if (ghostWidth === void 0) { ghostWidth = Grid.DEFAULT_GHOST_WIDTH; }\n        var _this = this;\n        this.getCumulativeWidthBefore = function (index) {\n            return index === 0 ? 0 : _this.getCumulativeWidthAt(index - 1);\n        };\n        this.getCumulativeWidthAt = function (index) {\n            if (_this.numCols === 0) {\n                return _this.ghostWidth * index;\n            }\n            else if (index >= _this.numCols) {\n                return _this.cumulativeColumnWidths[_this.numCols - 1] + _this.ghostWidth * (index - _this.numCols + 1);\n            }\n            else {\n                return _this.cumulativeColumnWidths[index];\n            }\n        };\n        this.getCumulativeHeightBefore = function (index) {\n            return index === 0 ? 0 : _this.getCumulativeHeightAt(index - 1);\n        };\n        this.getCumulativeHeightAt = function (index) {\n            if (_this.numRows === 0) {\n                return _this.ghostHeight * index;\n            }\n            else if (index >= _this.numRows) {\n                return _this.cumulativeRowHeights[_this.numRows - 1] + _this.ghostHeight * (index - _this.numRows + 1);\n            }\n            else {\n                return _this.cumulativeRowHeights[index];\n            }\n        };\n        this.columnWidths = columnWidths;\n        this.rowHeights = rowHeights;\n        this.cumulativeColumnWidths = Utils.accumulate(columnWidths);\n        this.cumulativeRowHeights = Utils.accumulate(rowHeights);\n        this.numCols = columnWidths.length;\n        this.numRows = rowHeights.length;\n        this.bleed = bleed;\n        this.ghostHeight = ghostHeight;\n        this.ghostWidth = ghostWidth;\n    }\n    /**\n     * Returns the `Rect` bounds of a cell in scrollpane client space.\n     *\n     * Scrollpane client coordinate space uses the origin of the scrollpane\n     * client (the inside part that you're moving around).\n     *\n     * For example, let's say you're scrolling around a block of 1000 x 1000\n     * cells. Regardless where you've scrolled, the first cell is always at\n     * 0,0 in scrollpane client space. the cell to the right of it is always\n     * at, e.g., 100,0.\n     */\n    Grid.prototype.getCellRect = function (rowIndex, columnIndex) {\n        var height = this.rowHeights[rowIndex];\n        var top = this.cumulativeRowHeights[rowIndex] - height;\n        var width = this.columnWidths[columnIndex];\n        var left = this.cumulativeColumnWidths[columnIndex] - width;\n        return new Rect(left, top, width, height);\n    };\n    /**\n     * Returns the `Rect` bounds of a cell in scrollpane client space.\n     *\n     * If the cell is beyond the bounds of the user-defined table cells, it is\n     * considered a \"ghost\" cell. If a width/height is not defined for that\n     * row/column, we use the default width/height.\n     */\n    Grid.prototype.getGhostCellRect = function (rowIndex, columnIndex) {\n        var left = 0;\n        var top = 0;\n        var width = 0;\n        var height = 0;\n        if (rowIndex >= this.rowHeights.length) {\n            height = this.ghostHeight;\n            top = this.getHeight() + this.ghostHeight * (rowIndex - this.numRows);\n        }\n        else {\n            height = this.rowHeights[rowIndex];\n            top = this.cumulativeRowHeights[rowIndex] - height;\n        }\n        if (columnIndex >= this.columnWidths.length) {\n            width = this.ghostWidth;\n            left = this.getWidth() + this.ghostWidth * (columnIndex - this.numCols);\n        }\n        else {\n            width = this.columnWidths[columnIndex];\n            left = this.cumulativeColumnWidths[columnIndex] - width;\n        }\n        return new Rect(left, top, width, height);\n    };\n    /**\n     * Returns the `Rect` with the base coordinate and height of the specified row.\n     */\n    Grid.prototype.getRowRect = function (rowIndex) {\n        var height = this.rowHeights[rowIndex];\n        var top = this.cumulativeRowHeights[rowIndex] - height;\n        return new Rect(0, top, this.getWidth(), height);\n    };\n    /**\n     * Returns the `Rect` with the base coordinate and width of the specified column.\n     */\n    Grid.prototype.getColumnRect = function (columnIndex) {\n        var width = this.columnWidths[columnIndex];\n        var left = this.cumulativeColumnWidths[columnIndex] - width;\n        return new Rect(left, 0, width, this.getHeight());\n    };\n    /**\n     * Returns the total width of the entire grid\n     */\n    Grid.prototype.getWidth = function () {\n        return this.numCols === 0 ? 0 : this.cumulativeColumnWidths[this.numCols - 1];\n    };\n    /**\n     * Returns the total width of the entire grid\n     */\n    Grid.prototype.getHeight = function () {\n        return this.numRows === 0 ? 0 : this.cumulativeRowHeights[this.numRows - 1];\n    };\n    /**\n     * Returns the `Rect` bounds of entire grid\n     */\n    Grid.prototype.getRect = function () {\n        return new Rect(0, 0, this.getWidth(), this.getHeight());\n    };\n    /**\n     * Maps each cell that intersects with the given `Rect` argument. The\n     * indices of iteration are extended in both directions by the integer\n     * `bleed` class property, then are clamped between 0 and the number of\n     * rows/columns.\n     *\n     * Uses a binary search for each of the 4 edges of the bounds, resulting\n     * in a runtime of `O(log(rows) + log(cols))` plus the `O(irows * icols)`\n     * iteration of intersecting cells.\n     */\n    Grid.prototype.mapCellsInRect = function (rect, callback) {\n        var results = [];\n        if (rect == null) {\n            return results;\n        }\n        var _a = this.getRowIndicesInRect(rect), rowIndexStart = _a.rowIndexStart, rowIndexEnd = _a.rowIndexEnd;\n        var _b = this.getColumnIndicesInRect(rect), columnIndexStart = _b.columnIndexStart, columnIndexEnd = _b.columnIndexEnd;\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n                results.push(callback(rowIndex, columnIndex));\n            }\n        }\n        return results;\n    };\n    /**\n     * Maps each row that intersects with the given `Rect` argument.\n     *\n     * See Grid.mapCellsInRect for more details.\n     */\n    Grid.prototype.mapRowsInRect = function (rect, callback) {\n        var results = [];\n        if (rect == null) {\n            return results;\n        }\n        var _a = this.getRowIndicesInRect(rect), rowIndexStart = _a.rowIndexStart, rowIndexEnd = _a.rowIndexEnd;\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            results.push(callback(rowIndex));\n        }\n        return results;\n    };\n    /**\n     * Maps each column that intersects with the given `Rect` argument.\n     *\n     * See Grid.mapCellsInRect for more details.\n     */\n    Grid.prototype.mapColumnsInRect = function (rect, callback) {\n        var results = [];\n        if (rect == null) {\n            return results;\n        }\n        var _a = this.getColumnIndicesInRect(rect), columnIndexStart = _a.columnIndexStart, columnIndexEnd = _a.columnIndexEnd;\n        for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n            results.push(callback(columnIndex));\n        }\n        return results;\n    };\n    /**\n     * Returns the start and end indices of rows that intersect with the given\n     * `Rect` argument.\n     */\n    Grid.prototype.getRowIndicesInRect = function (rect, includeGhostCells, limit) {\n        if (includeGhostCells === void 0) { includeGhostCells = false; }\n        if (limit === void 0) { limit = Grid.DEFAULT_MAX_ROWS; }\n        if (rect == null) {\n            return { rowIndexEnd: 0, rowIndexStart: 0 };\n        }\n        var searchEnd = includeGhostCells ? Math.max(this.numRows, Grid.DEFAULT_MAX_ROWS) : this.numRows;\n        var _a = this.getIndicesInInterval(rect.top, rect.top + rect.height, searchEnd, !includeGhostCells, this.getCumulativeHeightAt), start = _a.start, end = _a.end;\n        var rowIndexEnd = limit > 0 && end - start > limit ? start + limit : end;\n        return {\n            rowIndexEnd: rowIndexEnd,\n            rowIndexStart: start,\n        };\n    };\n    /**\n     * Returns the start and end indices of columns that intersect with the\n     * given `Rect` argument.\n     */\n    Grid.prototype.getColumnIndicesInRect = function (rect, includeGhostCells, limit) {\n        if (includeGhostCells === void 0) { includeGhostCells = false; }\n        if (limit === void 0) { limit = Grid.DEFAULT_MAX_COLUMNS; }\n        if (rect == null) {\n            return { columnIndexEnd: 0, columnIndexStart: 0 };\n        }\n        var searchEnd = includeGhostCells ? Math.max(this.numCols, Grid.DEFAULT_MAX_COLUMNS) : this.numCols;\n        var _a = this.getIndicesInInterval(rect.left, rect.left + rect.width, searchEnd, !includeGhostCells, this.getCumulativeWidthAt), start = _a.start, end = _a.end;\n        var columnIndexEnd = limit > 0 && end - start > limit ? start + limit : end;\n        return {\n            columnIndexEnd: columnIndexEnd,\n            columnIndexStart: start,\n        };\n    };\n    Grid.prototype.isGhostIndex = function (rowIndex, columnIndex) {\n        return rowIndex >= this.numRows || columnIndex >= this.numCols;\n    };\n    Grid.prototype.getExtremaClasses = function (rowIndex, columnIndex, rowEnd, columnEnd) {\n        if (rowIndex === rowEnd && columnIndex === columnEnd) {\n            return [Classes.TABLE_LAST_IN_COLUMN, Classes.TABLE_LAST_IN_ROW];\n        }\n        if (rowIndex === rowEnd) {\n            return [Classes.TABLE_LAST_IN_COLUMN];\n        }\n        if (columnIndex === columnEnd) {\n            return [Classes.TABLE_LAST_IN_ROW];\n        }\n        return [];\n    };\n    Grid.prototype.getRegionStyle = function (region) {\n        var cardinality = Regions.getRegionCardinality(region);\n        switch (cardinality) {\n            case RegionCardinality.CELLS: {\n                var _a = region.rows, rowStart = _a[0], rowEnd = _a[1];\n                var _b = region.cols, colStart = _b[0], colEnd = _b[1];\n                // if the region is outside the bounds of the table, don't display it\n                if (this.isGhostIndex(rowStart, colStart) || this.isGhostIndex(rowEnd, colEnd)) {\n                    return { display: \"none\" };\n                }\n                var cellRect0 = this.getCellRect(rowStart, colStart);\n                var cellRect1 = this.getCellRect(rowEnd, colEnd);\n                var offsetLeft = colStart === 0 ? 0 : 1;\n                var offsetTop = rowStart === 0 ? 0 : 1;\n                var rect = cellRect0.union(cellRect1);\n                rect.height += offsetTop;\n                rect.left -= offsetLeft;\n                rect.width += offsetLeft;\n                rect.top -= offsetTop;\n                return tslib_1.__assign({}, rect.style(), { display: \"block\" });\n            }\n            case RegionCardinality.FULL_COLUMNS: {\n                var _c = region.cols, colStart = _c[0], colEnd = _c[1];\n                // if the region is outside the bounds of the table, don't display it\n                if (this.isGhostIndex(0, colStart) || this.isGhostIndex(0, colEnd)) {\n                    return { display: \"none\" };\n                }\n                var cellRect0 = this.getCellRect(0, colStart);\n                var cellRect1 = this.getCellRect(0, colEnd);\n                var rect = cellRect0.union(cellRect1);\n                var offsetLeft = colStart === 0 ? 0 : 1;\n                return {\n                    bottom: 0,\n                    display: \"block\",\n                    left: rect.left - offsetLeft,\n                    top: 0,\n                    width: rect.width + offsetLeft,\n                };\n            }\n            case RegionCardinality.FULL_ROWS: {\n                var _d = region.rows, rowStart = _d[0], rowEnd = _d[1];\n                // if the region is outside the bounds of the table, don't display it\n                if (this.isGhostIndex(rowStart, 0) || this.isGhostIndex(rowEnd, 0)) {\n                    return { display: \"none\" };\n                }\n                var cellRect0 = this.getCellRect(rowStart, 0);\n                var cellRect1 = this.getCellRect(rowEnd, 0);\n                var rect = cellRect0.union(cellRect1);\n                var offsetTop = rowStart === 0 ? 0 : 1;\n                return {\n                    display: \"block\",\n                    height: rect.height + offsetTop,\n                    left: 0,\n                    right: 0,\n                    top: rect.top - offsetTop,\n                };\n            }\n            case RegionCardinality.FULL_TABLE:\n                return {\n                    bottom: 0,\n                    display: \"block\",\n                    left: 0,\n                    right: 0,\n                    top: 0,\n                };\n            default:\n                return { display: \"none\" };\n        }\n    };\n    Grid.prototype.getIndicesInInterval = function (min, max, count, useEndBleed, lookup) {\n        var start = Utils.binarySearch(min, count - 1, lookup);\n        var end = Utils.binarySearch(max, count - 1, lookup);\n        // correct exact pixel alignment\n        if (start >= 0 && min === lookup(start)) {\n            start += 1;\n        }\n        // apply bounded bleeds\n        start = Math.max(0, start - this.bleed);\n        if (useEndBleed) {\n            end = Math.min(count - 1, end + this.bleed);\n        }\n        else {\n            end = Math.min(count - 1, end);\n        }\n        return { start: start, end: end };\n    };\n    Grid.DEFAULT_BLEED = 3;\n    Grid.DEFAULT_MAX_COLUMNS = 50;\n    Grid.DEFAULT_MAX_ROWS = 200;\n    Grid.DEFAULT_GHOST_HEIGHT = 20;\n    Grid.DEFAULT_GHOST_WIDTH = 150;\n    return Grid;\n}());\nexport { Grid };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport { Clipboard } from \"./clipboard\";\nexport { Grid } from \"./grid\";\nexport { Rect } from \"./rect\";\nexport { RenderMode } from \"./renderMode\";\nexport { Utils } from \"./utils\";\n// NOTE: The following are not exported in the public API:\n// - Errors\n// - internal/\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { Direction } from \"../direction\";\nexport function directionToDelta(direction) {\n    switch (direction) {\n        case Direction.UP:\n            return { rows: -1, cols: 0 };\n        case Direction.DOWN:\n            return { rows: +1, cols: 0 };\n        case Direction.LEFT:\n            return { rows: 0, cols: -1 };\n        case Direction.RIGHT:\n            return { rows: 0, cols: +1 };\n        default:\n            return undefined;\n    }\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { RegionCardinality, Regions } from \"../../regions\";\nimport * as Errors from \"../errors\";\n/**\n * Returns the `focusedSelectionIndex` if both the focused cell and that\n * property are defined, or the last index of `selectedRegions` otherwise. If\n * `selectedRegions` is empty, the function always returns `undefined`.\n */\nexport function getFocusedOrLastSelectedIndex(selectedRegions, focusedCell) {\n    if (selectedRegions.length === 0) {\n        return undefined;\n    }\n    else if (focusedCell != null) {\n        return focusedCell.focusSelectionIndex;\n    }\n    else {\n        return selectedRegions.length - 1;\n    }\n}\n/**\n * Returns the proper focused cell for the given set of initial conditions.\n */\nexport function getInitialFocusedCell(enableFocusedCell, focusedCellFromProps, focusedCellFromState, selectedRegions) {\n    if (!enableFocusedCell) {\n        return undefined;\n    }\n    else if (focusedCellFromProps != null) {\n        // controlled mode\n        return focusedCellFromProps;\n    }\n    else if (focusedCellFromState != null) {\n        // use the current focused cell from state\n        return focusedCellFromState;\n    }\n    else if (selectedRegions.length > 0) {\n        // focus the top-left cell of the last selection\n        var lastIndex = selectedRegions.length - 1;\n        return tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(selectedRegions[lastIndex]), { focusSelectionIndex: lastIndex });\n    }\n    else {\n        // focus the top-left cell of the table\n        return { col: 0, row: 0, focusSelectionIndex: 0 };\n    }\n}\n/**\n * Returns `true` if the focused cell is located along the top boundary of the\n * provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionTop(region, focusedCell) {\n    return region.rows != null && focusedCell.row === region.rows[0];\n}\n/**\n * Returns `true` if the focused cell is located along the bottom boundary of\n * the provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionBottom(region, focusedCell) {\n    return region.rows != null && focusedCell.row === region.rows[1];\n}\n/**\n * Returns `true` if the focused cell is located along the left boundary of the\n * provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionLeft(region, focusedCell) {\n    return region.cols != null && focusedCell.col === region.cols[0];\n}\n/**\n * Returns `true` if the focused cell is located along the right boundary of the\n * provided region, or `false` otherwise.\n */\nexport function isFocusedCellAtRegionRight(region, focusedCell) {\n    return region.cols != null && focusedCell.col === region.cols[1];\n}\n/**\n * Returns a new cell-coordinates object that includes a focusSelectionIndex property.\n * The returned object will have the proper IFocusedCellCoordinates type.\n */\nexport function toFullCoordinates(cellCoords, focusSelectionIndex) {\n    if (focusSelectionIndex === void 0) { focusSelectionIndex = 0; }\n    return tslib_1.__assign({}, cellCoords, { focusSelectionIndex: focusSelectionIndex });\n}\n/**\n * Expands an existing region to new region based on the current focused cell.\n * The focused cell is an invariant and should not move as a result of this\n * operation. This function is used, for instance, to expand a selected region\n * on shift+click.\n */\nexport function expandFocusedRegion(focusedCell, newRegion) {\n    switch (Regions.getRegionCardinality(newRegion)) {\n        case RegionCardinality.FULL_COLUMNS: {\n            var _a = getExpandedRegionIndices(focusedCell, newRegion, \"col\", \"cols\"), indexStart = _a[0], indexEnd = _a[1];\n            return Regions.column(indexStart, indexEnd);\n        }\n        case RegionCardinality.FULL_ROWS: {\n            var _b = getExpandedRegionIndices(focusedCell, newRegion, \"row\", \"rows\"), indexStart = _b[0], indexEnd = _b[1];\n            return Regions.row(indexStart, indexEnd);\n        }\n        case RegionCardinality.CELLS:\n            var _c = getExpandedRegionIndices(focusedCell, newRegion, \"row\", \"rows\"), rowIndexStart = _c[0], rowIndexEnd = _c[1];\n            var _d = getExpandedRegionIndices(focusedCell, newRegion, \"col\", \"cols\"), colIndexStart = _d[0], colIndexEnd = _d[1];\n            return Regions.cell(rowIndexStart, colIndexStart, rowIndexEnd, colIndexEnd);\n        default:\n            // i.e. `case RegionCardinality.FULL_TABLE:`\n            return Regions.table();\n    }\n}\nfunction getExpandedRegionIndices(focusedCell, newRegion, focusedCellDimension, regionDimension) {\n    var sourceIndex = focusedCell[focusedCellDimension];\n    var _a = newRegion[regionDimension], destinationIndex = _a[0], destinationIndexEnd = _a[1];\n    if (destinationIndex !== destinationIndexEnd) {\n        if (regionDimension === \"rows\") {\n            throw new Error(Errors.TABLE_EXPAND_FOCUSED_REGION_MULTI_ROW_REGION);\n        }\n        else if (regionDimension === \"cols\") {\n            throw new Error(Errors.TABLE_EXPAND_FOCUSED_REGION_MULTI_COLUMN_REGION);\n        }\n    }\n    return sourceIndex <= destinationIndex ? [sourceIndex, destinationIndex] : [destinationIndex, sourceIndex];\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n/**\n * Returns `true` if `navigator.platform` matches a known Mac platform, or\n * `false` otherwise.\n */\nexport function isMac(platformOverride) {\n    var platformActual = typeof navigator !== \"undefined\" ? navigator.platform : undefined;\n    var platform = platformOverride != null ? platformOverride : platformActual;\n    return platform == null ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}\n/**\n * Returns `true` if (1) the platform is Mac and the keypress includes the `cmd`\n * key, or (2) the platform is non-Mac and the keypress includes the `ctrl` key.\n */\nexport var isModKeyPressed = function (event, platformOverride) {\n    var isMacPlatform = isMac(platformOverride);\n    return (isMacPlatform && event.metaKey) || (!isMacPlatform && event.ctrlKey);\n};\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { RegionCardinality, Regions } from \"../../regions\";\n/**\n * Returns the scroll{Left,Top} offsets of the provided region based on its\n * cardinality.\n */\nexport function getScrollPositionForRegion(region, currScrollLeft, currScrollTop, getLeftOffset, getTopOffset, numFrozenRows, numFrozenColumns) {\n    if (numFrozenRows === void 0) { numFrozenRows = 0; }\n    if (numFrozenColumns === void 0) { numFrozenColumns = 0; }\n    var cardinality = Regions.getRegionCardinality(region);\n    var scrollTop = currScrollTop;\n    var scrollLeft = currScrollLeft;\n    // if these were max-frozen-index values, we would have added 1 before passing to the get*Offset\n    // functions, but the counts are already 1-indexed, so we can just pass those.\n    var frozenColumnsCumulativeWidth = getLeftOffset(numFrozenColumns);\n    var frozenRowsCumulativeHeight = getTopOffset(numFrozenRows);\n    switch (cardinality) {\n        case RegionCardinality.CELLS: {\n            // scroll to the top-left corner of the block of cells\n            var topOffset = getTopOffset(region.rows[0]);\n            var leftOffset = getLeftOffset(region.cols[0]);\n            scrollTop = getClampedScrollPosition(topOffset, frozenRowsCumulativeHeight);\n            scrollLeft = getClampedScrollPosition(leftOffset, frozenColumnsCumulativeWidth);\n            break;\n        }\n        case RegionCardinality.FULL_ROWS: {\n            // scroll to the top of the row block\n            var topOffset = getTopOffset(region.rows[0]);\n            scrollTop = getClampedScrollPosition(topOffset, frozenRowsCumulativeHeight);\n            break;\n        }\n        case RegionCardinality.FULL_COLUMNS: {\n            // scroll to the left side of the column block\n            var leftOffset = getLeftOffset(region.cols[0]);\n            scrollLeft = getClampedScrollPosition(leftOffset, frozenColumnsCumulativeWidth);\n            break;\n        }\n        default: {\n            // if it's a FULL_TABLE region, scroll back to the top-left cell of the table\n            scrollTop = 0;\n            scrollLeft = 0;\n            break;\n        }\n    }\n    return { scrollLeft: scrollLeft, scrollTop: scrollTop };\n}\n/**\n * Returns the thickness of the target scroll bar in pixels.\n * If the target scroll bar is not present, 0 is returned.\n */\nexport function measureScrollBarThickness(element, direction) {\n    // offset size includes the scroll bar. client size does not.\n    // the difference gives the thickness of the scroll bar.\n    return direction === \"horizontal\"\n        ? element.offsetHeight - element.clientHeight\n        : element.offsetWidth - element.clientWidth;\n}\n/**\n * Adjust the scroll position to align content just beyond the frozen region, if necessary.\n */\nfunction getClampedScrollPosition(scrollOffset, frozenRegionCumulativeSize) {\n    // if the new scroll offset falls within the frozen region, clamp it to 0\n    return Math.max(scrollOffset - frozenRegionCumulativeSize, 0);\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { RegionCardinality, Regions } from \"../../regions\";\nimport { Direction } from \"../direction\";\nimport * as DirectionUtils from \"./directionUtils\";\nimport * as FocusedCellUtils from \"./focusedCellUtils\";\n/**\n * Resizes the provided region by 1 row/column in the specified direction,\n * returning a new region instance. The region may either expand *or* contract\n * depending on the presence and location of the focused cell.\n *\n * If no focused cell is provided, the region will always be *expanded* in the\n * specified direction.\n *\n * If a focused cell *is* provided, the behavior will change depending on where\n * the focused cell is within the region:\n *\n *   1. If along a top/bottom boundary while resizing UP/DOWN, the resize will\n *      expand from or shrink to the focused cell (same if along a left/right\n *      boundary while moving LEFT/RIGHT).\n *   2. If *not* along a top/bottom boundary while resizing UP/DOWN (or if *not*\n *      along a left/right boundary while moving LEFT/RIGHT), the region will\n *      simply expand in the specified direction.\n *\n * Other notes:\n * - A CELLS region can be resized vertically or horizontally.\n * - A FULL_ROWS region can be resized only vertically.\n * - A FULL_COLUMNS region can be resized only horizontally.\n * - A FULL_TABLE region cannot be resized.\n *\n * This function does not clamp the indices of the returned region; that is the\n * responsibility of the caller.\n */\nexport function resizeRegion(region, direction, focusedCell) {\n    if (Regions.getRegionCardinality(region) === RegionCardinality.FULL_TABLE) {\n        // return the same instance to maintain referential integrity and\n        // possibly avoid unnecessary update lifecycles.\n        return region;\n    }\n    var nextRegion = Regions.copy(region);\n    var affectedRowIndex = 0;\n    var affectedColumnIndex = 0;\n    if (focusedCell != null) {\n        var isAtTop = FocusedCellUtils.isFocusedCellAtRegionTop(nextRegion, focusedCell);\n        var isAtBottom = FocusedCellUtils.isFocusedCellAtRegionBottom(nextRegion, focusedCell);\n        var isAtLeft = FocusedCellUtils.isFocusedCellAtRegionLeft(nextRegion, focusedCell);\n        var isAtRight = FocusedCellUtils.isFocusedCellAtRegionRight(nextRegion, focusedCell);\n        // the focused cell is found along the top and bottom boundary\n        // simultaneously when the region is 1 row tall. check for this and\n        // similar special cases.\n        if (direction === Direction.UP) {\n            affectedRowIndex = isAtTop && !isAtBottom ? 1 : 0;\n        }\n        else if (direction === Direction.DOWN) {\n            affectedRowIndex = isAtBottom && !isAtTop ? 0 : 1;\n        }\n        else if (direction === Direction.LEFT) {\n            affectedColumnIndex = isAtLeft && !isAtRight ? 1 : 0;\n        }\n        else {\n            // i.e. `Direction.RIGHT:`\n            affectedColumnIndex = isAtRight && !isAtLeft ? 0 : 1;\n        }\n    }\n    else {\n        // when there is no focused cell, expand in the specified direction.\n        affectedRowIndex = direction === Direction.DOWN ? 1 : 0;\n        affectedColumnIndex = direction === Direction.RIGHT ? 1 : 0;\n    }\n    var delta = DirectionUtils.directionToDelta(direction);\n    if (nextRegion.rows != null) {\n        nextRegion.rows[affectedRowIndex] += delta.rows;\n    }\n    if (nextRegion.cols != null) {\n        nextRegion.cols[affectedColumnIndex] += delta.cols;\n    }\n    // the new coordinates might be out of bounds. the caller is responsible for\n    // sanitizing the result.\n    return nextRegion;\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { Classes } from \"@blueprintjs/core\";\n// This class expects a single, non-string child.\nvar LoadableContent = /** @class */ (function (_super) {\n    tslib_1.__extends(LoadableContent, _super);\n    function LoadableContent(props) {\n        var _this = _super.call(this, props) || this;\n        _this.style = _this.calculateStyle(props.variableLength);\n        return _this;\n    }\n    LoadableContent.prototype.componentWillReceiveProps = function (nextProps) {\n        if ((!this.props.loading && nextProps.loading) || this.props.variableLength !== nextProps.variableLength) {\n            this.style = this.calculateStyle(nextProps.variableLength);\n        }\n    };\n    LoadableContent.prototype.render = function () {\n        if (this.props.loading) {\n            return React.createElement(\"div\", { className: Classes.SKELETON, style: this.style });\n        }\n        return React.Children.only(this.props.children);\n    };\n    LoadableContent.prototype.calculateStyle = function (variableLength) {\n        var skeletonLength = variableLength ? 75 - Math.floor(Math.random() * 11) * 5 : 100;\n        return { width: skeletonLength + \"%\" };\n    };\n    return LoadableContent;\n}(React.PureComponent));\nexport { LoadableContent };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n// HACKHACK: workaround for https://github.com/palantir/tslint/issues/1768\n// tslint:disable adjacent-overload-signatures\n/**\n * A simple object for storing the client bounds of HTMLElements. Since\n * ClientRects are immutable, this object enables editing and some simple\n * manipulation methods.\n */\nvar Rect = /** @class */ (function () {\n    function Rect(left, top, width, height) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Returns the smallest Rect that entirely contains the supplied rects\n     */\n    Rect.union = function (anyRect0, anyRect1) {\n        var rect0 = Rect.wrap(anyRect0);\n        var rect1 = Rect.wrap(anyRect1);\n        var top = Math.min(rect0.top, rect1.top);\n        var left = Math.min(rect0.left, rect1.left);\n        var bottom = Math.max(rect0.top + rect0.height, rect1.top + rect1.height);\n        var right = Math.max(rect0.left + rect0.width, rect1.left + rect1.width);\n        var height = bottom - top;\n        var width = right - left;\n        return new Rect(left, top, width, height);\n    };\n    /**\n     * Returns a new Rect that subtracts the origin of the second argument\n     * from the first.\n     */\n    Rect.subtractOrigin = function (anyRect0, anyRect1) {\n        var rect0 = Rect.wrap(anyRect0);\n        var rect1 = Rect.wrap(anyRect1);\n        return new Rect(rect0.left - rect1.left, rect0.top - rect1.top, rect0.width, rect0.height);\n    };\n    /**\n     * Returns the CSS properties representing the absolute positioning of\n     * this Rect.\n     */\n    Rect.style = function (rect) {\n        return {\n            height: rect.height + \"px\",\n            left: rect.left + \"px\",\n            position: \"absolute\",\n            top: rect.top + \"px\",\n            width: rect.width + \"px\",\n        };\n    };\n    /**\n     * Given a ClientRect or Rect object, returns a Rect object.\n     */\n    Rect.wrap = function (rect) {\n        if (rect instanceof Rect) {\n            return rect;\n        }\n        else {\n            return new Rect(rect.left, rect.top, rect.width, rect.height);\n        }\n    };\n    Rect.prototype.subtractOrigin = function (anyRect) {\n        return Rect.subtractOrigin(this, anyRect);\n    };\n    Rect.prototype.union = function (anyRect) {\n        return Rect.union(this, anyRect);\n    };\n    Rect.prototype.style = function () {\n        return Rect.style(this);\n    };\n    Rect.prototype.sizeStyle = function () {\n        return {\n            height: this.height + \"px\",\n            width: this.width + \"px\",\n        };\n    };\n    Rect.prototype.containsX = function (clientX) {\n        return clientX >= this.left && clientX <= this.left + this.width;\n    };\n    Rect.prototype.containsY = function (clientY) {\n        return clientY >= this.top && clientY <= this.top + this.height;\n    };\n    Rect.prototype.equals = function (rect) {\n        return (rect != null &&\n            this.left === rect.left &&\n            this.top === rect.top &&\n            this.width === rect.width &&\n            this.height === rect.height);\n    };\n    Rect.ORIGIN = new Rect(0, 0, 0, 0);\n    return Rect;\n}());\nexport { Rect };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport var RenderMode;\n(function (RenderMode) {\n    /**\n     * Renders cells in batches across multiple animation frames. This improves\n     * performance by spreading out work to keep a high FPS and avoid blocking\n     * the UI, but it also introduces a noticeable scan-line rendering artifact\n     * as successive batches of cells finish rendering.\n     */\n    RenderMode[\"BATCH\"] = \"batch\";\n    /**\n     * Renders all cells synchronously on initial mount, then renders cells in\n     * batches on successive updates (e.g. during scrolling). This helps to\n     * remove visual rendering artifacts when the table is first rendered,\n     * wihout slowing scrolling performance to a crawl.\n     */\n    RenderMode[\"BATCH_ON_UPDATE\"] = \"batch-on-update\";\n    /**\n     * Disables the batch-rendering behavior, rendering all cells synchronously\n     * at once. This may result in degraded performance on large tables and/or\n     * on tables with complex cells.\n     */\n    RenderMode[\"NONE\"] = \"none\";\n})(RenderMode || (RenderMode = {}));\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n/**\n * Event name for `postMessage`\n */\nvar MESSAGE_EVENT_DATA = \"blueprint-table-post-message\";\n/**\n * Object that holds state for managing idle callbacks\n */\nvar IDLE_STATE = {\n    callbacks: [],\n    triggered: false,\n};\nvar handleIdle = function (event) {\n    if (event.source !== window || event.data !== MESSAGE_EVENT_DATA) {\n        return;\n    }\n    IDLE_STATE.triggered = false;\n    var callback = null;\n    if (IDLE_STATE.callbacks.length > 0) {\n        callback = IDLE_STATE.callbacks.shift();\n    }\n    if (IDLE_STATE.callbacks.length > 0) {\n        triggerIdleFrame();\n    }\n    // finally, invoke the callback. exceptions will be propagated\n    if (callback) {\n        callback();\n    }\n};\n// check for window since we might be in a headless server environment\nif (typeof window !== \"undefined\") {\n    if (window.addEventListener != null) {\n        window.addEventListener(\"message\", handleIdle, false);\n    }\n}\nvar triggerIdleFrame = function () {\n    if (IDLE_STATE.triggered) {\n        return;\n    }\n    IDLE_STATE.triggered = true;\n    /**\n     * This is the magic that will wait for the browser to be \"idle\" before\n     * invoking the callback.\n     *\n     * First, we use nested calls to `requestAnimationFrame` which will cause\n     * the inner callback to be invoked on the NEXT FRAME.\n     *\n     * Then, we call to `postMessage` to invoke the `handleIdle` method only\n     * once the current stack frame is empty.\n     *\n     * With this approach, the idle callback will be invoked at most once per\n     * frame and only after the stack frame is empty.\n     */\n    requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n            postMessage(MESSAGE_EVENT_DATA, \"*\");\n        });\n    });\n};\n/**\n * Invokes the provided callback on the next available frame after the stack\n * frame is empty.\n *\n * At most one callback per frame is invoked, and the callback may be delayed\n * multiple frames until the page is idle.\n *\n * TODO: return a token from this method that allows you to cancel the callback\n * (otherwise the callback list may increase without bound).\n */\nexport var requestIdleCallback = function (callback) {\n    IDLE_STATE.callbacks.push(callback);\n    triggerIdleFrame();\n};\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT = \"bp-table-text-no-measure\";\n/**\n * Since Firefox doesn't provide a computed \"font\" property, we manually\n * construct it using the ordered properties that can be specifed in CSS.\n */\nvar CSS_FONT_PROPERTIES = [\"font-style\", \"font-variant\", \"font-weight\", \"font-size\", \"font-family\"];\nexport var Utils = {\n    /**\n     * Invokes the callback `n` times, collecting the results in an array, which\n     * is the return value. Similar to _.times\n     */\n    times: function (n, callback) {\n        if (n < 0) {\n            throw new Error(\"[Blueprint] times() cannot be called with negative numbers.\");\n        }\n        var result = Array(n);\n        for (var index = 0; index < n; index++) {\n            result[index] = callback(index);\n        }\n        return result;\n    },\n    /**\n     * Takes an array of numbers, returns an array of numbers of the same length in which each\n     * value is the sum of current and previous values in the input array.\n     *\n     * Example input:  [10, 20, 50]\n     *         output: [10, 30, 80]\n     */\n    accumulate: function (numbers) {\n        var result = [];\n        var sum = 0;\n        for (var _i = 0, numbers_1 = numbers; _i < numbers_1.length; _i++) {\n            var num = numbers_1[_i];\n            sum += num;\n            result.push(sum);\n        }\n        return result;\n    },\n    /**\n     * Returns traditional spreadsheet-style column names\n     * e.g. (A, B, ..., Z, AA, AB, ..., ZZ, AAA, AAB, ...).\n     *\n     * Note that this isn't technically mathematically equivalent to base 26 since\n     * there is no zero element.\n     */\n    toBase26Alpha: function (num) {\n        var str = \"\";\n        while (true) {\n            var letter = num % 26;\n            str = String.fromCharCode(65 + letter) + str;\n            num = num - letter;\n            if (num <= 0) {\n                return str;\n            }\n            num = num / 26 - 1;\n        }\n    },\n    /**\n     * Returns traditional spreadsheet-style cell names\n     * e.g. (A1, B2, ..., Z44, AA1) with rows 1-indexed.\n     */\n    toBase26CellName: function (rowIndex, columnIndex) {\n        return \"\" + Utils.toBase26Alpha(columnIndex) + (rowIndex + 1);\n    },\n    /**\n     * Performs the binary search algorithm to find the index of the `value`\n     * parameter in a sorted list of numbers. If `value` is not in the list, the\n     * index where `value` can be inserted to maintain the sort is returned.\n     *\n     * Unlike a typical binary search implementation, we use a `lookup`\n     * callback to access the sorted list of numbers instead of an array. This\n     * avoids additional storage overhead.\n     *\n     * We use this to, for example, find the index of a row/col given its client\n     * coordinate.\n     *\n     * Adapted from lodash https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L3579\n     *\n     * @param value - the query value\n     * @param high - the length of the sorted list of numbers\n     * @param lookup - returns the number from the list at the supplied index\n     */\n    binarySearch: function (value, high, lookup) {\n        var low = 0;\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2.0);\n            var computed = lookup(mid);\n            if (computed < value) {\n                low = mid + 1;\n            }\n            else {\n                high = mid;\n            }\n        }\n        return high;\n    },\n    /**\n     * Returns a copy of the array that will have a length of the supplied parameter.\n     * If the array is too long, it will be truncated. If it is too short, it will be\n     * filled with the suppleid `fillValue` argument.\n     *\n     * @param array - the `Array` to copy and adjust\n     * @param length - the target length of the array\n     * @param fillValue - the value to add to the array if it is too short\n     */\n    arrayOfLength: function (array, length, fillValue) {\n        if (array.length > length) {\n            return array.slice(0, length);\n        }\n        array = array.slice();\n        while (array.length < length) {\n            array.push(fillValue);\n        }\n        return array;\n    },\n    /**\n     * Takes in one full array of values and one sparse array of the same\n     * length and type. Returns a copy of the `defaults` array, where each\n     * value is replaced with the corresponding non-null value at the same\n     * index in `sparseOverrides`.\n     *\n     * @param defaults - the full array of default values\n     * @param sparseOverrides - the sparse array of override values\n     */\n    assignSparseValues: function (defaults, sparseOverrides) {\n        if (sparseOverrides == null || defaults.length !== sparseOverrides.length) {\n            return defaults;\n        }\n        defaults = defaults.slice();\n        for (var i = 0; i < defaults.length; i++) {\n            var override = sparseOverrides[i];\n            if (override != null) {\n                defaults[i] = override;\n            }\n        }\n        return defaults;\n    },\n    /**\n     * Measures the bounds of supplied element's textContent.\n     * We use the computed font from the supplied element and a non-DOM canvas\n     * context to measure the text.\n     */\n    measureElementTextContent: function (element) {\n        var context = document.createElement(\"canvas\").getContext(\"2d\");\n        var style = getComputedStyle(element, null);\n        context.font = CSS_FONT_PROPERTIES.map(function (prop) { return style.getPropertyValue(prop); }).join(\" \");\n        return measureTextContentWithExclusions(context, element);\n    },\n    /**\n     * Given a number, returns a value that is clamped within a\n     * minimum/maximum bounded range. The minimum and maximum are optional. If\n     * either is missing, that extrema limit is not applied.\n     *\n     * Assumes max >= min.\n     */\n    clamp: function (value, min, max) {\n        if (min != null && value < min) {\n            value = min;\n        }\n        if (max != null && value > max) {\n            value = max;\n        }\n        return value;\n    },\n    /**\n     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n     * at the absolute index in the original ordering but emit the new index in the reordered list.\n     * This function converts an absolute \"guide\" index to a relative \"reordered\" index.\n     *\n     * Example: Say we want to move the first three columns two spots to the right. While we drag, a\n     * vertical guide is shown to preview where we'll be dropping the columns. (In the following\n     * ASCII art, `*` denotes a selected column, `·` denotes a cell border, and `|` denotes a\n     * vertical guide).\n     *\n     *     Before mousedown:\n     *     · 0 · 1 · 2 · 3 · 4 · 5 ·\n     *       *   *   *\n     *\n     *     During mousemove two spots to the right:\n     *     · 0 · 1 · 2 · 3 · 4 | 5 ·\n     *       *   *   *\n     *\n     *     After mouseup:\n     *     · 3 · 4 · 0 · 1 · 2 · 5 ·\n     *               *   *   *\n     *\n     * Note that moving the three columns beyond index 4 effectively moves them two spots rightward.\n     *\n     * In this case, the inputs to this function would be:\n     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n     *     - newIndex: 5 (the index on whose left boundary the guide appears in the original ordering)\n     *     - length: 3 (the number of columns to move)\n     *\n     * The return value will then be 2, the left-most index of the columns in the new ordering.\n     */\n    guideIndexToReorderedIndex: function (oldIndex, newIndex, length) {\n        if (newIndex < oldIndex) {\n            return newIndex;\n        }\n        else if (oldIndex <= newIndex && newIndex < oldIndex + length) {\n            return oldIndex;\n        }\n        else {\n            return Math.max(0, newIndex - length);\n        }\n    },\n    /**\n     * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n     * at the absolute index in the original ordering but emit the new index in the reordered list.\n     * This function converts a relative \"reordered\"\" index to an absolute \"guide\" index.\n     *\n     * For the scenario in the example above, the inputs to this function would be:\n     *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n     *     - newIndex: 2 (the left-most index of the selected column range in the new ordering)\n     *     - length: 3 (the number of columns to move)\n     *\n     * The return value will then be 5, the index on whose left boundary the guide should appear in\n     * the original ordering.\n     */\n    reorderedIndexToGuideIndex: function (oldIndex, newIndex, length) {\n        return newIndex <= oldIndex ? newIndex : newIndex + length;\n    },\n    /**\n     * Returns a copy of the provided array with the `length` contiguous elements starting at the\n     * `from` index reordered to start at the `to` index.\n     *\n     * For example, given the array [A,B,C,D,E,F], reordering the 3 contiguous elements starting at\n     * index 1 (B, C, and D) to start at index 2 would yield [A,E,B,C,D,F].\n     */\n    reorderArray: function (array, from, to, length) {\n        if (length === void 0) { length = 1; }\n        if (length === 0 || length === array.length || from === to) {\n            // return an unchanged copy\n            return array.slice();\n        }\n        if (length < 0 || length > array.length || from + length > array.length) {\n            return undefined;\n        }\n        var before = array.slice(0, from);\n        var within = array.slice(from, from + length);\n        var after = array.slice(from + length);\n        var result = [];\n        var i = 0;\n        var b = 0;\n        var w = 0;\n        var a = 0;\n        while (i < to) {\n            if (b < before.length) {\n                result.push(before[b]);\n                b += 1;\n            }\n            else {\n                result.push(after[a]);\n                a += 1;\n            }\n            i += 1;\n        }\n        while (w < length) {\n            result.push(within[w]);\n            w += 1;\n            i += 1;\n        }\n        while (i < array.length) {\n            if (b < before.length) {\n                result.push(before[b]);\n                b += 1;\n            }\n            else {\n                result.push(after[a]);\n                a += 1;\n            }\n            i += 1;\n        }\n        return result;\n    },\n    /**\n     * Returns true if the mouse event was triggered by the left mouse button.\n     */\n    isLeftClick: function (event) {\n        return event.button === 0;\n    },\n    getApproxCellHeight: function (cellText, columnWidth, approxCharWidth, approxLineHeight, horizontalPadding, numBufferLines) {\n        var numCharsInCell = cellText == null ? 0 : cellText.length;\n        var actualCellWidth = columnWidth;\n        var availableCellWidth = actualCellWidth - horizontalPadding;\n        var approxCharsPerLine = availableCellWidth / approxCharWidth;\n        var approxNumLinesDesired = Math.ceil(numCharsInCell / approxCharsPerLine) + numBufferLines;\n        var approxCellHeight = approxNumLinesDesired * approxLineHeight;\n        return approxCellHeight;\n    },\n};\n/**\n * Wrapper around Canvas measureText which applies some extra logic to optionally\n * exclude an element's text from the computation.\n */\nfunction measureTextContentWithExclusions(context, element) {\n    // We only expect one or zero excluded elements in this subtree\n    // We don't have a need for more than one, so we avoid that complexity altogether.\n    var elementToExclude = element.querySelector(\".\" + CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT);\n    var removedElementParent;\n    var removedElementNextSibling;\n    if (elementToExclude != null) {\n        removedElementParent = elementToExclude.parentElement;\n        removedElementNextSibling = elementToExclude.nextSibling;\n        removedElementParent.removeChild(elementToExclude);\n    }\n    var metrics = context.measureText(element.textContent);\n    if (elementToExclude != null) {\n        removedElementParent.insertBefore(elementToExclude, removedElementNextSibling);\n    }\n    return metrics;\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/index\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { ColumnHeaderCell } from \"./columnHeaderCell\";\nimport { Header } from \"./header\";\nvar ColumnHeader = /** @class */ (function (_super) {\n    tslib_1.__extends(ColumnHeader, _super);\n    function ColumnHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.wrapCells = function (cells) {\n            var _a = _this.props, columnIndexStart = _a.columnIndexStart, grid = _a.grid;\n            var tableWidth = grid.getRect().width;\n            var scrollLeftCorrection = _this.props.grid.getCumulativeWidthBefore(columnIndexStart);\n            var style = {\n                // only header cells in view will render, but we need to reposition them to stay in view\n                // as we scroll horizontally.\n                transform: \"translateX(\" + (scrollLeftCorrection || 0) + \"px)\",\n                // reduce the width to clamp the sliding window as we approach the final headers; otherwise,\n                // we'll have tons of useless whitespace at the end.\n                width: tableWidth - scrollLeftCorrection,\n            };\n            var classes = classNames(Classes.TABLE_THEAD, Classes.TABLE_COLUMN_HEADER_TR);\n            // add a wrapper set to the full-table width to ensure container styles stretch from the first\n            // cell all the way to the last\n            return (React.createElement(\"div\", { style: { width: tableWidth } },\n                React.createElement(\"div\", { style: style, className: classes, ref: _this.props.measurableElementRef }, cells)));\n        };\n        _this.convertPointToColumn = function (clientXOrY, useMidpoint) {\n            var locator = _this.props.locator;\n            return locator != null ? locator.convertPointToColumn(clientXOrY, useMidpoint) : null;\n        };\n        _this.getCellExtremaClasses = function (index, indexEnd) {\n            return _this.props.grid.getExtremaClasses(0, index, 1, indexEnd);\n        };\n        _this.getColumnWidth = function (index) {\n            return _this.props.grid.getColumnRect(index).width;\n        };\n        _this.getDragCoordinate = function (clientCoords) {\n            return clientCoords[0]; // x-coordinate\n        };\n        _this.getMouseCoordinate = function (event) {\n            return event.clientX;\n        };\n        _this.handleResizeEnd = function (index, size) {\n            _this.props.onResizeGuide(null);\n            _this.props.onColumnWidthChanged(index, size);\n        };\n        _this.handleResizeDoubleClick = function (index) {\n            var _a = _this.props, minColumnWidth = _a.minColumnWidth, maxColumnWidth = _a.maxColumnWidth;\n            var width = _this.props.locator.getWidestVisibleCellInColumn(index);\n            var clampedWidth = Utils.clamp(width, minColumnWidth, maxColumnWidth);\n            _this.props.onResizeGuide(null);\n            _this.props.onColumnWidthChanged(index, clampedWidth);\n        };\n        _this.handleSizeChanged = function (index, size) {\n            var rect = _this.props.grid.getColumnRect(index);\n            _this.props.onResizeGuide([rect.left + size]);\n        };\n        _this.isCellSelected = function (index) {\n            return Regions.hasFullColumn(_this.props.selectedRegions, index);\n        };\n        _this.isGhostIndex = function (index) {\n            return _this.props.grid.isGhostIndex(-1, index);\n        };\n        _this.renderGhostCell = function (index, extremaClasses) {\n            var _a = _this.props, grid = _a.grid, loading = _a.loading;\n            var rect = grid.getGhostCellRect(0, index);\n            var style = {\n                flexBasis: rect.width + \"px\",\n                width: rect.width + \"px\",\n            };\n            return (React.createElement(ColumnHeaderCell, { className: classNames(extremaClasses), index: index, key: Classes.columnIndexClass(index), loading: loading, style: style }));\n        };\n        _this.toRegion = function (index1, index2) {\n            return Regions.column(index1, index2);\n        };\n        return _this;\n    }\n    ColumnHeader.prototype.render = function () {\n        var _a = this.props, \n        // from IColumnHeaderProps\n        renderHeaderCell = _a.cellRenderer, onColumnWidthChanged = _a.onColumnWidthChanged, \n        // from IColumnWidths\n        minSize = _a.minColumnWidth, maxSize = _a.maxColumnWidth, defaultColumnWidth = _a.defaultColumnWidth, \n        // from IColumnIndices\n        indexStart = _a.columnIndexStart, indexEnd = _a.columnIndexEnd, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"cellRenderer\", \"onColumnWidthChanged\", \"minColumnWidth\", \"maxColumnWidth\", \"defaultColumnWidth\", \"columnIndexStart\", \"columnIndexEnd\"]);\n        return (React.createElement(Header, tslib_1.__assign({ convertPointToIndex: this.convertPointToColumn, fullRegionCardinality: RegionCardinality.FULL_COLUMNS, getCellExtremaClasses: this.getCellExtremaClasses, getCellIndexClass: Classes.columnCellIndexClass, getCellSize: this.getColumnWidth, getDragCoordinate: this.getDragCoordinate, getIndexClass: Classes.columnIndexClass, getMouseCoordinate: this.getMouseCoordinate, ghostCellRenderer: this.renderGhostCell, handleResizeDoubleClick: this.handleResizeDoubleClick, handleResizeEnd: this.handleResizeEnd, handleSizeChanged: this.handleSizeChanged, headerCellIsReorderablePropName: \"enableColumnReordering\", headerCellIsSelectedPropName: \"isColumnSelected\", headerCellRenderer: renderHeaderCell, indexEnd: indexEnd, indexStart: indexStart, isCellSelected: this.isCellSelected, isGhostIndex: this.isGhostIndex, maxSize: maxSize, minSize: minSize, resizeOrientation: Orientation.VERTICAL, selectedRegions: [], toRegion: this.toRegion, wrapCells: this.wrapCells }, spreadableProps)));\n    };\n    ColumnHeader.defaultProps = {\n        isReorderable: false,\n        isResizable: true,\n        loading: false,\n    };\n    return ColumnHeader;\n}(React.Component));\nexport { ColumnHeader };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, Icon, Popover, Position, Utils as CoreUtils, } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { columnInteractionBarContextTypes } from \"../common/context\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { HeaderCell } from \"./headerCell\";\nexport function HorizontalCellDivider() {\n    return React.createElement(\"div\", { className: Classes.TABLE_HORIZONTAL_CELL_DIVIDER });\n}\nvar ColumnHeaderCell = /** @class */ (function (_super) {\n    tslib_1.__extends(ColumnHeaderCell, _super);\n    function ColumnHeaderCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isActive: false,\n        };\n        _this.handlePopoverDidOpen = function () {\n            _this.setState({ isActive: true });\n        };\n        _this.handlePopoverWillClose = function () {\n            _this.setState({ isActive: false });\n        };\n        return _this;\n    }\n    /**\n     * This method determines if a `MouseEvent` was triggered on a target that\n     * should be used as the header click/drag target. This enables users of\n     * this component to render fully interactive components in their header\n     * cells without worry of selection or resize operations from capturing\n     * their mouse events.\n     */\n    ColumnHeaderCell.isHeaderMouseTarget = function (target) {\n        return (target.classList.contains(Classes.TABLE_HEADER) ||\n            target.classList.contains(Classes.TABLE_COLUMN_NAME) ||\n            target.classList.contains(Classes.TABLE_INTERACTION_BAR) ||\n            target.classList.contains(Classes.TABLE_HEADER_CONTENT));\n    };\n    ColumnHeaderCell.prototype.render = function () {\n        var _a = this.props, \n        // from IColumnHeaderCellProps\n        enableColumnReordering = _a.enableColumnReordering, isColumnSelected = _a.isColumnSelected, menuIcon = _a.menuIcon, \n        // from IColumnNameProps\n        name = _a.name, nameRenderer = _a.nameRenderer, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"enableColumnReordering\", \"isColumnSelected\", \"menuIcon\", \"name\", \"nameRenderer\"]);\n        var classes = classNames(spreadableProps.className, Classes.TABLE_COLUMN_HEADER_CELL, (_b = {},\n            _b[Classes.TABLE_HAS_INTERACTION_BAR] = this.context.enableColumnInteractionBar,\n            _b[Classes.TABLE_HAS_REORDER_HANDLE] = this.props.reorderHandle != null,\n            _b));\n        return (React.createElement(HeaderCell, tslib_1.__assign({ isReorderable: this.props.enableColumnReordering, isSelected: this.props.isColumnSelected }, spreadableProps, { className: classes }),\n            this.renderName(),\n            this.maybeRenderContent(),\n            this.props.loading ? undefined : this.props.resizeHandle));\n        var _b;\n    };\n    ColumnHeaderCell.prototype.renderName = function () {\n        var _a = this.props, index = _a.index, loading = _a.loading, name = _a.name, nameRenderer = _a.nameRenderer, reorderHandle = _a.reorderHandle;\n        var dropdownMenu = this.maybeRenderDropdownMenu();\n        var defaultName = React.createElement(\"div\", { className: Classes.TABLE_TRUNCATED_TEXT }, name);\n        var nameComponent = (React.createElement(LoadableContent, { loading: loading, variableLength: true }, nameRenderer == null\n            ? defaultName\n            : React.cloneElement(nameRenderer(name, index), { index: index })));\n        if (this.context.enableColumnInteractionBar) {\n            return (React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME, title: name },\n                React.createElement(\"div\", { className: Classes.TABLE_INTERACTION_BAR },\n                    reorderHandle,\n                    dropdownMenu),\n                React.createElement(HorizontalCellDivider, null),\n                React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME_TEXT }, nameComponent)));\n        }\n        else {\n            return (React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME, title: name },\n                reorderHandle,\n                dropdownMenu,\n                React.createElement(\"div\", { className: Classes.TABLE_COLUMN_NAME_TEXT }, nameComponent)));\n        }\n    };\n    ColumnHeaderCell.prototype.maybeRenderContent = function () {\n        if (this.props.children === null) {\n            return undefined;\n        }\n        return React.createElement(\"div\", { className: Classes.TABLE_HEADER_CONTENT }, this.props.children);\n    };\n    ColumnHeaderCell.prototype.maybeRenderDropdownMenu = function () {\n        var _a = this.props, index = _a.index, menuIcon = _a.menuIcon, menuRenderer = _a.menuRenderer;\n        if (!CoreUtils.isFunction(menuRenderer)) {\n            return undefined;\n        }\n        var classes = classNames(Classes.TABLE_TH_MENU_CONTAINER, (_b = {},\n            _b[Classes.TABLE_TH_MENU_OPEN] = this.state.isActive,\n            _b));\n        return (React.createElement(\"div\", { className: classes },\n            React.createElement(\"div\", { className: Classes.TABLE_TH_MENU_CONTAINER_BACKGROUND }),\n            React.createElement(Popover, { content: menuRenderer(index), position: Position.BOTTOM, className: Classes.TABLE_TH_MENU, modifiers: { preventOverflow: { boundariesElement: \"window\" } }, popoverDidOpen: this.handlePopoverDidOpen, popoverWillClose: this.handlePopoverWillClose },\n                React.createElement(Icon, { icon: menuIcon }))));\n        var _b;\n    };\n    ColumnHeaderCell.defaultProps = {\n        isActive: false,\n        menuIcon: \"chevron-down\",\n    };\n    ColumnHeaderCell.contextTypes = columnInteractionBarContextTypes;\n    return ColumnHeaderCell;\n}(AbstractPureComponent));\nexport { ColumnHeaderCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EditableText, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nvar EditableName = /** @class */ (function (_super) {\n    tslib_1.__extends(EditableName, _super);\n    function EditableName(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.handleEdit = function () {\n            _this.setState({ isEditing: true, dirtyName: _this.state.savedName });\n        };\n        _this.handleCancel = function (value) {\n            // don't strictly need to clear the dirtyName, but it's better hygiene\n            _this.setState({ isEditing: false, dirtyName: undefined });\n            _this.invokeCallback(_this.props.onCancel, value);\n        };\n        _this.handleChange = function (value) {\n            _this.setState({ dirtyName: value });\n            _this.invokeCallback(_this.props.onChange, value);\n        };\n        _this.handleConfirm = function (value) {\n            _this.setState({ isEditing: false, savedName: value, dirtyName: undefined });\n            _this.invokeCallback(_this.props.onConfirm, value);\n        };\n        _this.state = {\n            dirtyName: props.name,\n            isEditing: false,\n            savedName: props.name,\n        };\n        return _this;\n    }\n    EditableName.prototype.componentWillReceiveProps = function (nextProps) {\n        var name = nextProps.name;\n        if (name !== this.props.name) {\n            this.setState({ savedName: name, dirtyName: name });\n        }\n    };\n    EditableName.prototype.render = function () {\n        var _a = this.props, className = _a.className, intent = _a.intent, name = _a.name;\n        var _b = this.state, isEditing = _b.isEditing, dirtyName = _b.dirtyName, savedName = _b.savedName;\n        return (React.createElement(EditableText, { className: classNames(className, Classes.TABLE_EDITABLE_NAME), defaultValue: name, intent: intent, minWidth: null, onCancel: this.handleCancel, onChange: this.handleChange, onConfirm: this.handleConfirm, onEdit: this.handleEdit, placeholder: \"\", selectAllOnFocus: true, value: isEditing ? dirtyName : savedName }));\n    };\n    EditableName.prototype.invokeCallback = function (callback, value) {\n        var index = this.props.index;\n        CoreUtils.safeInvoke(callback, value, index);\n    };\n    return EditableName;\n}(React.PureComponent));\nexport { EditableName };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Icon, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { DragEvents } from \"../interactions/dragEvents\";\nimport { DragReorderable } from \"../interactions/reorderable\";\nimport { Resizable } from \"../interactions/resizable\";\nimport { DragSelectable } from \"../interactions/selectable\";\nimport { RegionCardinality, Regions } from \"../regions\";\nvar SHALLOW_COMPARE_PROP_KEYS_BLACKLIST = [\"focusedCell\", \"selectedRegions\"];\nvar Header = /** @class */ (function (_super) {\n    tslib_1.__extends(Header, _super);\n    function Header(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.convertEventToIndex = function (event) {\n            var coord = _this.props.getMouseCoordinate(event);\n            return _this.props.convertPointToIndex(coord);\n        };\n        _this.locateClick = function (event) {\n            _this.activationIndex = _this.convertEventToIndex(event);\n            return _this.props.toRegion(_this.activationIndex);\n        };\n        _this.locateDragForSelection = function (_event, coords, returnEndOnly) {\n            if (returnEndOnly === void 0) { returnEndOnly = false; }\n            var coord = _this.props.getDragCoordinate(coords.current);\n            var indexStart = _this.activationIndex;\n            var indexEnd = _this.props.convertPointToIndex(coord);\n            return returnEndOnly ? _this.props.toRegion(indexEnd) : _this.props.toRegion(indexStart, indexEnd);\n        };\n        _this.locateDragForReordering = function (_event, coords) {\n            var coord = _this.props.getDragCoordinate(coords.current);\n            var guideIndex = _this.props.convertPointToIndex(coord, true);\n            return guideIndex < 0 ? undefined : guideIndex;\n        };\n        _this.renderCells = function () {\n            var _a = _this.props, indexStart = _a.indexStart, indexEnd = _a.indexEnd;\n            var cells = [];\n            for (var index = indexStart; index <= indexEnd; index++) {\n                cells.push(_this.renderNewCell(index));\n            }\n            return cells;\n        };\n        _this.renderNewCell = function (index) {\n            var extremaClasses = _this.props.getCellExtremaClasses(index, _this.props.indexEnd);\n            var renderer = _this.props.isGhostIndex(index) ? _this.props.ghostCellRenderer : _this.renderCell;\n            return renderer(index, extremaClasses);\n        };\n        _this.renderCell = function (index, extremaClasses) {\n            var _a = _this.props, getIndexClass = _a.getIndexClass, selectedRegions = _a.selectedRegions;\n            var cell = _this.props.headerCellRenderer(index);\n            var isLoading = cell.props.loading != null ? cell.props.loading : _this.props.loading;\n            var isSelected = _this.props.isCellSelected(index);\n            var isEntireCellTargetReorderable = _this.isEntireCellTargetReorderable(index);\n            var className = classNames(extremaClasses, (_b = {},\n                _b[Classes.TABLE_HEADER_REORDERABLE] = isEntireCellTargetReorderable,\n                _b), _this.props.getCellIndexClass(index), cell.props.className);\n            var cellProps = (_c = {\n                    className: className,\n                    index: index\n                },\n                _c[_this.props.headerCellIsSelectedPropName] = isSelected,\n                _c[_this.props.headerCellIsReorderablePropName] = isEntireCellTargetReorderable,\n                _c.loading = isLoading,\n                _c.reorderHandle = _this.maybeRenderReorderHandle(index),\n                _c);\n            var modifiedHandleSizeChanged = function (size) { return _this.props.handleSizeChanged(index, size); };\n            var modifiedHandleResizeEnd = function (size) { return _this.props.handleResizeEnd(index, size); };\n            var modifiedHandleResizeHandleDoubleClick = function () {\n                return CoreUtils.safeInvoke(_this.props.handleResizeDoubleClick, index);\n            };\n            var baseChildren = (React.createElement(DragSelectable, { enableMultipleSelection: _this.props.enableMultipleSelection, disabled: _this.isDragSelectableDisabled, focusedCell: _this.props.focusedCell, ignoredSelectors: [\".\" + Classes.TABLE_REORDER_HANDLE_TARGET], key: getIndexClass(index), locateClick: _this.locateClick, locateDrag: _this.locateDragForSelection, onFocusedCell: _this.props.onFocusedCell, onSelection: _this.handleDragSelectableSelection, onSelectionEnd: _this.handleDragSelectableSelectionEnd, selectedRegions: selectedRegions, selectedRegionTransform: _this.props.selectedRegionTransform },\n                React.createElement(Resizable, { isResizable: _this.props.isResizable, maxSize: _this.props.maxSize, minSize: _this.props.minSize, onDoubleClick: modifiedHandleResizeHandleDoubleClick, onLayoutLock: _this.props.onLayoutLock, onResizeEnd: modifiedHandleResizeEnd, onSizeChanged: modifiedHandleSizeChanged, orientation: _this.props.resizeOrientation, size: _this.props.getCellSize(index) }, React.cloneElement(cell, cellProps))));\n            return _this.isReorderHandleEnabled()\n                ? baseChildren // reordering will be handled by interacting with the reorder handle\n                : _this.wrapInDragReorderable(index, baseChildren, _this.isDragReorderableDisabled);\n            var _b, _c;\n        };\n        _this.handleDragSelectableSelection = function (selectedRegions) {\n            _this.props.onSelection(selectedRegions);\n            _this.setState({ hasValidSelection: false });\n        };\n        _this.handleDragSelectableSelectionEnd = function () {\n            _this.activationIndex = null; // not strictly required, but good practice\n            _this.setState({ hasValidSelection: true });\n        };\n        _this.isDragSelectableDisabled = function (event) {\n            if (DragEvents.isAdditive(event)) {\n                // if the meta/ctrl key was pressed, we want to forcefully ignore\n                // reordering interactions and prioritize drag-selection\n                // interactions (e.g. to make it possible to deselect a row).\n                return false;\n            }\n            var cellIndex = _this.convertEventToIndex(event);\n            return _this.isEntireCellTargetReorderable(cellIndex);\n        };\n        _this.isDragReorderableDisabled = function (event) {\n            var isSelectionEnabled = !_this.isDragSelectableDisabled(event);\n            if (isSelectionEnabled) {\n                // if drag-selection is enabled, we don't want drag-reordering\n                // interactions to compete. otherwise, a mouse-drag might both expand a\n                // selection and reorder the same selection simultaneously - confusing!\n                return true;\n            }\n            var cellIndex = _this.convertEventToIndex(event);\n            return !_this.isEntireCellTargetReorderable(cellIndex);\n        };\n        _this.isEntireCellTargetReorderable = function (index) {\n            var selectedRegions = _this.props.selectedRegions;\n            // although reordering may be generally enabled for this row/column (via props.isReorderable), the\n            // row/column shouldn't actually become reorderable from a user perspective until a few other\n            // conditions are true:\n            return (_this.props.isReorderable &&\n                // the row/column should be the only selection (or it should be part of the only selection),\n                // because reordering multiple disjoint row/column selections is a UX morass with no clear best\n                // behavior.\n                _this.props.isCellSelected(index) &&\n                _this.state.hasValidSelection &&\n                Regions.getRegionCardinality(selectedRegions[0]) === _this.props.fullRegionCardinality &&\n                // selected regions can be updated during mousedown+drag and before mouseup; thus, we\n                // add a final check to make sure we don't enable reordering until the selection\n                // interaction is complete. this prevents one click+drag interaction from triggering\n                // both selection and reordering behavior.\n                selectedRegions.length === 1 &&\n                // columns are reordered via a reorder handle, so drag-selection needn't be disabled\n                !_this.isReorderHandleEnabled());\n        };\n        _this.state = { hasValidSelection: _this.isSelectedRegionsControlledAndNonEmpty(props) };\n        return _this;\n    }\n    Header.prototype.componentWillReceiveProps = function (nextProps) {\n        this.setState({ hasValidSelection: this.isSelectedRegionsControlledAndNonEmpty(nextProps) });\n    };\n    Header.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        return (!CoreUtils.shallowCompareKeys(this.state, nextState) ||\n            !CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: SHALLOW_COMPARE_PROP_KEYS_BLACKLIST }) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, SHALLOW_COMPARE_PROP_KEYS_BLACKLIST));\n    };\n    Header.prototype.render = function () {\n        return this.props.wrapCells(this.renderCells());\n    };\n    Header.prototype.isSelectedRegionsControlledAndNonEmpty = function (props) {\n        if (props === void 0) { props = this.props; }\n        return props.selectedRegions != null && props.selectedRegions.length > 0;\n    };\n    Header.prototype.isReorderHandleEnabled = function () {\n        // the reorder handle can only appear in the column interaction bar\n        return this.isColumnHeader() && this.props.isReorderable;\n    };\n    Header.prototype.maybeRenderReorderHandle = function (index) {\n        return !this.isReorderHandleEnabled()\n            ? undefined\n            : this.wrapInDragReorderable(index, React.createElement(\"div\", { className: Classes.TABLE_REORDER_HANDLE_TARGET },\n                React.createElement(\"div\", { className: Classes.TABLE_REORDER_HANDLE },\n                    React.createElement(Icon, { icon: \"drag-handle-vertical\" }))), false);\n    };\n    Header.prototype.isColumnHeader = function () {\n        return this.props.fullRegionCardinality === RegionCardinality.FULL_COLUMNS;\n    };\n    Header.prototype.wrapInDragReorderable = function (index, children, disabled) {\n        return (React.createElement(DragReorderable, { disabled: disabled, key: this.props.getIndexClass(index), locateClick: this.locateClick, locateDrag: this.locateDragForReordering, onReordered: this.props.onReordered, onReordering: this.props.onReordering, onSelection: this.props.onSelection, onFocusedCell: this.props.onFocusedCell, selectedRegions: this.props.selectedRegions, toRegion: this.props.toRegion }, children));\n    };\n    return Header;\n}(React.Component));\nexport { Header };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, ContextMenuTarget, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nvar HeaderCell = /** @class */ (function (_super) {\n    tslib_1.__extends(HeaderCell, _super);\n    function HeaderCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isActive: false,\n        };\n        return _this;\n    }\n    HeaderCell.prototype.shouldComponentUpdate = function (nextProps) {\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, [\"style\"]));\n    };\n    HeaderCell.prototype.renderContextMenu = function (_event) {\n        var menuRenderer = this.props.menuRenderer;\n        if (CoreUtils.isFunction(menuRenderer)) {\n            // the preferred way (a consistent function instance that won't cause as many re-renders)\n            return menuRenderer(this.props.index);\n        }\n        else {\n            return undefined;\n        }\n    };\n    HeaderCell.prototype.render = function () {\n        var classes = classNames(Classes.TABLE_HEADER, (_a = {},\n            _a[Classes.TABLE_HEADER_ACTIVE] = this.props.isActive || this.state.isActive,\n            _a[Classes.TABLE_HEADER_SELECTED] = this.props.isSelected,\n            _a[CoreClasses.LOADING] = this.props.loading,\n            _a), this.props.className);\n        return (React.createElement(\"div\", { className: classes, style: this.props.style }, this.props.children));\n        var _a;\n    };\n    HeaderCell = tslib_1.__decorate([\n        ContextMenuTarget\n    ], HeaderCell);\n    return HeaderCell;\n}(React.Component));\nexport { HeaderCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Header } from \"./header\";\nimport { RowHeaderCell } from \"./rowHeaderCell\";\nvar RowHeader = /** @class */ (function (_super) {\n    tslib_1.__extends(RowHeader, _super);\n    function RowHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.wrapCells = function (cells) {\n            var _a = _this.props, rowIndexStart = _a.rowIndexStart, grid = _a.grid;\n            var tableHeight = grid.getRect().height;\n            var scrollTopCorrection = _this.props.grid.getCumulativeHeightBefore(rowIndexStart);\n            var style = {\n                // reduce the height to clamp the sliding window as we approach the final headers; otherwise,\n                // we'll have tons of useless whitespace at the end.\n                height: tableHeight - scrollTopCorrection,\n                // only header cells in view will render, but we need to reposition them to stay in view\n                // as we scroll vertically.\n                transform: \"translateY(\" + (scrollTopCorrection || 0) + \"px)\",\n            };\n            // add a wrapper set to the full-table height to ensure container styles stretch from the first\n            // cell all the way to the last\n            return (React.createElement(\"div\", { style: { height: tableHeight } },\n                React.createElement(\"div\", { className: Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER, style: style }, cells)));\n        };\n        _this.convertPointToRow = function (clientXOrY, useMidpoint) {\n            var locator = _this.props.locator;\n            return locator != null ? locator.convertPointToRow(clientXOrY, useMidpoint) : null;\n        };\n        _this.getCellExtremaClasses = function (index, indexEnd) {\n            return _this.props.grid.getExtremaClasses(index, 0, indexEnd, 1);\n        };\n        _this.getRowHeight = function (index) {\n            return _this.props.grid.getRowRect(index).height;\n        };\n        _this.getDragCoordinate = function (clientCoords) {\n            return clientCoords[1]; // y-coordinate\n        };\n        _this.getMouseCoordinate = function (event) {\n            return event.clientY;\n        };\n        _this.handleResizeEnd = function (index, size) {\n            _this.props.onResizeGuide(null);\n            _this.props.onRowHeightChanged(index, size);\n        };\n        _this.handleSizeChanged = function (index, size) {\n            var rect = _this.props.grid.getRowRect(index);\n            _this.props.onResizeGuide([rect.top + size]);\n        };\n        _this.isCellSelected = function (index) {\n            return Regions.hasFullRow(_this.props.selectedRegions, index);\n        };\n        _this.isGhostIndex = function (index) {\n            return _this.props.grid.isGhostIndex(index, -1);\n        };\n        _this.renderGhostCell = function (index, extremaClasses) {\n            var rect = _this.props.grid.getGhostCellRect(index, 0);\n            return (React.createElement(RowHeaderCell, { className: classNames(extremaClasses), index: index, key: Classes.rowIndexClass(index), loading: _this.props.loading, style: { height: rect.height + \"px\" } }));\n        };\n        _this.toRegion = function (index1, index2) {\n            // the `this` value is messed up for Regions.row, so we have to have a wrapper function here\n            return Regions.row(index1, index2);\n        };\n        return _this;\n    }\n    RowHeader.prototype.render = function () {\n        var _a = this.props, \n        // from IRowHeaderProps\n        onRowHeightChanged = _a.onRowHeightChanged, renderHeaderCell = _a.rowHeaderCellRenderer, \n        // from IRowHeights\n        minSize = _a.minRowHeight, maxSize = _a.maxRowHeight, defaultRowHeight = _a.defaultRowHeight, \n        // from IRowIndices\n        indexStart = _a.rowIndexStart, indexEnd = _a.rowIndexEnd, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"onRowHeightChanged\", \"rowHeaderCellRenderer\", \"minRowHeight\", \"maxRowHeight\", \"defaultRowHeight\", \"rowIndexStart\", \"rowIndexEnd\"]);\n        return (React.createElement(Header, tslib_1.__assign({ convertPointToIndex: this.convertPointToRow, fullRegionCardinality: RegionCardinality.FULL_ROWS, getCellExtremaClasses: this.getCellExtremaClasses, getCellIndexClass: Classes.rowCellIndexClass, getCellSize: this.getRowHeight, getDragCoordinate: this.getDragCoordinate, getIndexClass: Classes.rowIndexClass, getMouseCoordinate: this.getMouseCoordinate, ghostCellRenderer: this.renderGhostCell, handleResizeEnd: this.handleResizeEnd, handleSizeChanged: this.handleSizeChanged, headerCellIsReorderablePropName: \"enableRowReordering\", headerCellIsSelectedPropName: \"isRowSelected\", headerCellRenderer: renderHeaderCell, indexEnd: indexEnd, indexStart: indexStart, isCellSelected: this.isCellSelected, isGhostIndex: this.isGhostIndex, maxSize: maxSize, minSize: minSize, resizeOrientation: Orientation.HORIZONTAL, selectedRegions: [], toRegion: this.toRegion, wrapCells: this.wrapCells }, spreadableProps)));\n    };\n    RowHeader.defaultProps = {\n        rowHeaderCellRenderer: renderDefaultRowHeader,\n    };\n    return RowHeader;\n}(React.Component));\nexport { RowHeader };\n/**\n * A default implementation of `IRowHeaderRenderer` that displays 1-indexed\n * numbers for each row.\n */\nexport function renderDefaultRowHeader(rowIndex) {\n    return React.createElement(RowHeaderCell, { index: rowIndex, name: \"\" + (rowIndex + 1) });\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { AbstractPureComponent } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { HeaderCell } from \"./headerCell\";\nvar RowHeaderCell = /** @class */ (function (_super) {\n    tslib_1.__extends(RowHeaderCell, _super);\n    function RowHeaderCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RowHeaderCell.prototype.render = function () {\n        var _a = this.props, \n        // from IRowHeaderCellProps\n        enableRowReordering = _a.enableRowReordering, isRowSelected = _a.isRowSelected, \n        // from IHeaderProps\n        spreadableProps = tslib_1.__rest(_a, [\"enableRowReordering\", \"isRowSelected\"]);\n        return (React.createElement(HeaderCell, tslib_1.__assign({ isReorderable: this.props.enableRowReordering, isSelected: this.props.isRowSelected }, spreadableProps),\n            React.createElement(\"div\", { className: Classes.TABLE_ROW_NAME },\n                React.createElement(LoadableContent, { loading: spreadableProps.loading },\n                    React.createElement(\"div\", { className: Classes.TABLE_ROW_NAME_TEXT }, spreadableProps.name))),\n            this.props.children,\n            spreadableProps.loading ? undefined : spreadableProps.resizeHandle));\n    };\n    return RowHeaderCell;\n}(AbstractPureComponent));\nexport { RowHeaderCell };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport { Cell } from \"./cell/cell\";\nexport { EditableCell } from \"./cell/editableCell\";\nexport { JSONFormat } from \"./cell/formats/jsonFormat\";\nexport { TruncatedPopoverMode, TruncatedFormat } from \"./cell/formats/truncatedFormat\";\nexport { Column } from \"./column\";\nexport { Clipboard, Grid, Rect, RenderMode, Utils } from \"./common/index\";\nexport { Draggable, } from \"./interactions/draggable\";\nexport { CopyCellsMenuItem } from \"./interactions/menus\";\nexport { Orientation, ResizeHandle } from \"./interactions/resizeHandle\";\nexport { DragSelectable } from \"./interactions/selectable\";\nexport { ColumnHeaderCell, HorizontalCellDivider } from \"./headers/columnHeaderCell\";\nexport { RowHeaderCell } from \"./headers/rowHeaderCell\";\nexport { EditableName } from \"./headers/editableName\";\nexport { ColumnLoadingOption, RegionCardinality, Regions, RowLoadingOption, SelectionModes, TableLoadingOption, } from \"./regions\";\nexport { Table } from \"./table\";\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar DragEvents = /** @class */ (function () {\n    function DragEvents() {\n        var _this = this;\n        this.handleMouseDown = function (event) {\n            _this.initCoordinateData(event);\n            if (_this.handler != null && _this.handler.onActivate != null) {\n                var exitCode = _this.handler.onActivate(event);\n                if (exitCode === false) {\n                    return;\n                }\n            }\n            _this.isActivated = true;\n            _this.maybeAlterEventChain(event);\n            // It is possible that the mouseup would not be called after the initial\n            // mousedown (for example if the mouse is moved out of the window). So,\n            // we preemptively detach to avoid duplicate listeners.\n            _this.detachDocumentEventListeners();\n            _this.attachDocumentEventListeners();\n        };\n        this.handleMouseMove = function (event) {\n            _this.maybeAlterEventChain(event);\n            if (_this.isActivated) {\n                _this.isDragging = true;\n            }\n            if (_this.isDragging) {\n                var coords = _this.updateCoordinateData(event);\n                if (_this.handler != null && _this.handler.onDragMove != null) {\n                    _this.handler.onDragMove(event, coords);\n                }\n            }\n        };\n        this.handleMouseUp = function (event) {\n            _this.maybeAlterEventChain(event);\n            if (_this.handler != null) {\n                if (_this.isDragging) {\n                    var coords = _this.updateCoordinateData(event);\n                    if (_this.handler.onDragMove != null) {\n                        _this.handler.onDragMove(event, coords);\n                    }\n                    if (_this.handler.onDragEnd != null) {\n                        _this.handler.onDragEnd(event, coords);\n                    }\n                }\n                else if (_this.isActivated) {\n                    if (_this.handler.onDoubleClick != null) {\n                        if (_this.doubleClickTimeoutToken == null) {\n                            // if this the first click of a possible double-click,\n                            // we delay the firing of the click event by the\n                            // timeout.\n                            _this.doubleClickTimeoutToken = window.setTimeout(function () {\n                                delete _this.doubleClickTimeoutToken;\n                                if (_this.handler.onClick != null) {\n                                    _this.handler.onClick(event);\n                                }\n                            }, DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC);\n                        }\n                        else {\n                            // otherwise, this is the second click in the double-\n                            // click so we cancel the single-click timeout and\n                            // fire the double-click event.\n                            window.clearTimeout(_this.doubleClickTimeoutToken);\n                            delete _this.doubleClickTimeoutToken;\n                            _this.handler.onDoubleClick(event);\n                        }\n                    }\n                    else if (_this.handler.onClick != null) {\n                        _this.handler.onClick(event);\n                    }\n                }\n            }\n            _this.isActivated = false;\n            _this.isDragging = false;\n            _this.detachDocumentEventListeners();\n        };\n    }\n    /**\n     * Returns true if the event includes a modifier key that often adds the result of the drag\n     * event to any existing state. For example, holding CTRL before dragging may select another\n     * region in addition to an existing one, while the absence of a modifier key may clear the\n     * existing selection first.\n     * @param event the mouse event for the drag interaction\n     */\n    DragEvents.isAdditive = function (event) {\n        return event.ctrlKey || event.metaKey;\n    };\n    DragEvents.prototype.attach = function (element, handler) {\n        this.detach();\n        this.handler = handler;\n        this.element = element;\n        if (this.isValidDragHandler(handler)) {\n            this.element.addEventListener(\"mousedown\", this.handleMouseDown);\n        }\n        return this;\n    };\n    DragEvents.prototype.detach = function () {\n        if (this.element != null) {\n            this.element.removeEventListener(\"mousedown\", this.handleMouseDown);\n            this.detachDocumentEventListeners();\n        }\n    };\n    DragEvents.prototype.isValidDragHandler = function (handler) {\n        return (handler != null &&\n            (handler.onActivate != null ||\n                handler.onDragMove != null ||\n                handler.onDragEnd != null ||\n                handler.onClick != null ||\n                handler.onDoubleClick != null));\n    };\n    DragEvents.prototype.attachDocumentEventListeners = function () {\n        document.addEventListener(\"mousemove\", this.handleMouseMove);\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\n    };\n    DragEvents.prototype.detachDocumentEventListeners = function () {\n        document.removeEventListener(\"mousemove\", this.handleMouseMove);\n        document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    };\n    DragEvents.prototype.initCoordinateData = function (event) {\n        this.activationCoordinates = [event.clientX, event.clientY];\n        this.lastCoordinates = this.activationCoordinates;\n    };\n    DragEvents.prototype.updateCoordinateData = function (event) {\n        var currentCoordinates = [event.clientX, event.clientY];\n        var deltaCoordinates = [\n            currentCoordinates[0] - this.lastCoordinates[0],\n            currentCoordinates[1] - this.lastCoordinates[1],\n        ];\n        var offsetCoordinates = [\n            currentCoordinates[0] - this.activationCoordinates[0],\n            currentCoordinates[1] - this.activationCoordinates[1],\n        ];\n        var data = {\n            activation: this.activationCoordinates,\n            current: currentCoordinates,\n            delta: deltaCoordinates,\n            last: this.lastCoordinates,\n            offset: offsetCoordinates,\n        };\n        this.lastCoordinates = [event.clientX, event.clientY];\n        return data;\n    };\n    DragEvents.prototype.maybeAlterEventChain = function (event) {\n        if (this.handler.preventDefault) {\n            event.preventDefault();\n        }\n        if (this.handler.stopPropagation) {\n            event.stopPropagation();\n        }\n    };\n    DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC = 500;\n    return DragEvents;\n}());\nexport { DragEvents };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { DragEvents } from \"./dragEvents\";\nvar REATTACH_PROPS_KEYS = [\"stopPropagation\", \"preventDefault\"];\n/**\n * This component provides a simple interface for combined drag and/or click\n * events.\n *\n * Since the mouse interactions for drag and click are overloaded, here are\n * the events that will fire in these cases:\n *\n * A Click Interaction\n * 1. The user presses down on the render element, triggering the onActivate\n *    callback.\n * 2. The user releases the mouse button without moving it, triggering the\n *    onClick callback.\n *\n * A Drag Interaction\n * 1. The user presses down on the render element, triggering the onActivate\n *    callback.\n * 2. The user moves the mouse, triggering the onDragMove callback.\n * 3. The user moves the mouse, triggering the onDragMove callback.\n * 4. The user moves the mouse, triggering the onDragMove callback.\n * 5. The user releases the mouse button, triggering a final onDragMove\n *    callback as well as an onDragEnd callback.\n *\n * If `false` is returned from the onActivate callback, no further events\n * will be fired until the next activation.\n */\nvar Draggable = /** @class */ (function (_super) {\n    tslib_1.__extends(Draggable, _super);\n    function Draggable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Draggable.prototype.render = function () {\n        return React.Children.only(this.props.children);\n    };\n    Draggable.prototype.componentDidUpdate = function (prevProps) {\n        var propsWhitelist = { include: REATTACH_PROPS_KEYS };\n        if (this.events && !CoreUtils.shallowCompareKeys(prevProps, this.props, propsWhitelist)) {\n            this.events.attach(ReactDOM.findDOMNode(this), this.props);\n        }\n    };\n    Draggable.prototype.componentDidMount = function () {\n        this.events = new DragEvents();\n        this.events.attach(ReactDOM.findDOMNode(this), this.props);\n    };\n    Draggable.prototype.componentWillUnmount = function () {\n        this.events.detach();\n        delete this.events;\n    };\n    Draggable.defaultProps = {\n        preventDefault: true,\n        stopPropagation: false,\n    };\n    return Draggable;\n}(React.PureComponent));\nexport { Draggable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MenuItem, Utils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { Clipboard } from \"../../common/clipboard\";\nimport { Regions } from \"../../regions\";\nvar CopyCellsMenuItem = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyCellsMenuItem, _super);\n    function CopyCellsMenuItem() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleClick = function () {\n            var _a = _this.props, context = _a.context, getCellData = _a.getCellData, onCopy = _a.onCopy;\n            var cells = context.getUniqueCells();\n            var sparse = Regions.sparseMapCells(cells, getCellData);\n            var success = Clipboard.copyCells(sparse);\n            Utils.safeInvoke(onCopy, success);\n        };\n        return _this;\n    }\n    CopyCellsMenuItem.prototype.render = function () {\n        var _a = this.props, context = _a.context, getCellData = _a.getCellData, onCopy = _a.onCopy, menuItemProps = tslib_1.__rest(_a, [\"context\", \"getCellData\", \"onCopy\"]);\n        return React.createElement(MenuItem, tslib_1.__assign({}, menuItemProps, { onClick: this.handleClick }));\n    };\n    return CopyCellsMenuItem;\n}(React.PureComponent));\nexport { CopyCellsMenuItem };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport * from \"./copyCellsMenuItem\";\nexport * from \"./menuContext\";\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { Regions } from \"../../regions\";\nvar MenuContext = /** @class */ (function () {\n    function MenuContext(target, selectedRegions, numRows, numCols) {\n        this.target = target;\n        this.selectedRegions = selectedRegions;\n        this.numRows = numRows;\n        this.numCols = numCols;\n        this.regions = Regions.overlapsRegion(selectedRegions, target) ? selectedRegions : [target];\n    }\n    MenuContext.prototype.getTarget = function () {\n        return this.target;\n    };\n    MenuContext.prototype.getSelectedRegions = function () {\n        return this.selectedRegions;\n    };\n    MenuContext.prototype.getRegions = function () {\n        return this.regions;\n    };\n    MenuContext.prototype.getUniqueCells = function () {\n        return Regions.enumerateUniqueCells(this.regions, this.numRows, this.numCols);\n    };\n    return MenuContext;\n}());\nexport { MenuContext };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { Utils } from \"../common/utils\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Draggable } from \"./draggable\";\nvar DragReorderable = /** @class */ (function (_super) {\n    tslib_1.__extends(DragReorderable, _super);\n    function DragReorderable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleActivate = function (event) {\n            if (_this.shouldIgnoreMouseDown(event)) {\n                return false;\n            }\n            var region = _this.props.locateClick(event);\n            if (!Regions.isValid(region)) {\n                return false;\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var isColumnHeader = cardinality === RegionCardinality.FULL_COLUMNS;\n            var isRowHeader = cardinality === RegionCardinality.FULL_ROWS;\n            if (!isColumnHeader && !isRowHeader) {\n                return false;\n            }\n            var selectedRegions = _this.props.selectedRegions;\n            var selectedRegionIndex = Regions.findContainingRegion(selectedRegions, region);\n            if (selectedRegionIndex >= 0) {\n                var selectedRegion = selectedRegions[selectedRegionIndex];\n                if (Regions.getRegionCardinality(selectedRegion) !== cardinality) {\n                    // ignore FULL_TABLE selections\n                    return false;\n                }\n                // cache for easy access later in the lifecycle\n                var selectedInterval = isRowHeader ? selectedRegion.rows : selectedRegion.cols;\n                _this.selectedRegionStartIndex = selectedInterval[0];\n                // add 1 because the selected interval is inclusive, which simple subtraction doesn't\n                // account for (e.g. in a FULL_COLUMNS range from 3 to 6, 6 - 3 = 3, but the selection\n                // actually includes four columns: 3, 4, 5, and 6)\n                _this.selectedRegionLength = selectedInterval[1] - selectedInterval[0] + 1;\n            }\n            else {\n                // select the new region to avoid complex and unintuitive UX w/r/t the existing selection\n                _this.maybeSelectRegion(region);\n                var regionRange = isRowHeader ? region.rows : region.cols;\n                _this.selectedRegionStartIndex = regionRange[0];\n                _this.selectedRegionLength = regionRange[1] - regionRange[0] + 1;\n            }\n            return true;\n        };\n        _this.handleDragMove = function (event, coords) {\n            var oldIndex = _this.selectedRegionStartIndex;\n            var guideIndex = _this.props.locateDrag(event, coords);\n            var length = _this.selectedRegionLength;\n            var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n            _this.props.onReordering(oldIndex, reorderedIndex, length);\n        };\n        _this.handleDragEnd = function (event, coords) {\n            var oldIndex = _this.selectedRegionStartIndex;\n            var guideIndex = _this.props.locateDrag(event, coords);\n            var length = _this.selectedRegionLength;\n            var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n            _this.props.onReordered(oldIndex, reorderedIndex, length);\n            // the newly reordered region becomes the only selection\n            var newRegion = _this.props.toRegion(reorderedIndex, reorderedIndex + length - 1);\n            _this.maybeSelectRegion(newRegion);\n            // resetting is not strictly required, but it's cleaner\n            _this.selectedRegionStartIndex = undefined;\n            _this.selectedRegionLength = undefined;\n        };\n        return _this;\n    }\n    DragReorderable.prototype.render = function () {\n        var draggableProps = this.getDraggableProps();\n        return (React.createElement(Draggable, tslib_1.__assign({}, draggableProps, { preventDefault: false }), this.props.children));\n    };\n    DragReorderable.prototype.getDraggableProps = function () {\n        return this.props.onReordered == null\n            ? {}\n            : {\n                onActivate: this.handleActivate,\n                onDragEnd: this.handleDragEnd,\n                onDragMove: this.handleDragMove,\n            };\n    };\n    DragReorderable.prototype.shouldIgnoreMouseDown = function (event) {\n        var disabled = this.props.disabled;\n        var isDisabled = CoreUtils.isFunction(disabled) ? CoreUtils.safeInvoke(disabled, event) : disabled;\n        return !Utils.isLeftClick(event) || isDisabled;\n    };\n    DragReorderable.prototype.maybeSelectRegion = function (region) {\n        var nextSelectedRegions = [region];\n        if (!CoreUtils.deepCompareKeys(nextSelectedRegions, this.props.selectedRegions)) {\n            this.props.onSelection(nextSelectedRegions);\n            // move the focused cell into the newly selected region\n            this.props.onFocusedCell(tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(region), { focusSelectionIndex: 0 }));\n        }\n    };\n    DragReorderable.defaultProps = {\n        selectedRegions: [],\n    };\n    return DragReorderable;\n}(React.PureComponent));\nexport { DragReorderable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { Utils } from \"../common/index\";\nimport { Orientation, ResizeHandle } from \"./resizeHandle\";\nvar Resizable = /** @class */ (function (_super) {\n    tslib_1.__extends(Resizable, _super);\n    function Resizable(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.onResizeMove = function (_offset, delta) {\n            _this.offsetSize(delta);\n            if (_this.props.onSizeChanged != null) {\n                _this.props.onSizeChanged(_this.state.size);\n            }\n        };\n        _this.onResizeEnd = function (_offset) {\n            // reset \"unclamped\" size on end\n            _this.setState({ unclampedSize: _this.state.size });\n            if (_this.props.onResizeEnd != null) {\n                _this.props.onResizeEnd(_this.state.size);\n            }\n        };\n        var size = props.size;\n        _this.state = {\n            size: size,\n            unclampedSize: size,\n        };\n        return _this;\n    }\n    Resizable.prototype.componentWillReceiveProps = function (nextProps) {\n        var size = nextProps.size;\n        this.setState({\n            size: size,\n            unclampedSize: size,\n        });\n    };\n    Resizable.prototype.render = function () {\n        var child = React.Children.only(this.props.children);\n        var style = tslib_1.__assign({}, child.props.style, this.getStyle());\n        if (this.props.isResizable === false) {\n            return React.cloneElement(child, { style: style });\n        }\n        var resizeHandle = this.renderResizeHandle();\n        return React.cloneElement(child, { style: style, resizeHandle: resizeHandle });\n    };\n    Resizable.prototype.renderResizeHandle = function () {\n        var _a = this.props, onLayoutLock = _a.onLayoutLock, onDoubleClick = _a.onDoubleClick, orientation = _a.orientation;\n        return (React.createElement(ResizeHandle, { key: \"resize-handle\", onDoubleClick: onDoubleClick, onLayoutLock: onLayoutLock, onResizeEnd: this.onResizeEnd, onResizeMove: this.onResizeMove, orientation: orientation }));\n    };\n    /**\n     * Returns the CSS style to apply to the child element given the state's\n     * size value.\n     */\n    Resizable.prototype.getStyle = function () {\n        if (this.props.orientation === Orientation.VERTICAL) {\n            return {\n                flexBasis: this.state.size + \"px\",\n                minWidth: \"0px\",\n                width: this.state.size + \"px\",\n            };\n        }\n        else {\n            return {\n                flexBasis: this.state.size + \"px\",\n                height: this.state.size + \"px\",\n                minHeight: \"0px\",\n            };\n        }\n    };\n    Resizable.prototype.offsetSize = function (offset) {\n        var unclampedSize = this.state.unclampedSize + offset;\n        this.setState({\n            size: Utils.clamp(unclampedSize, this.props.minSize, this.props.maxSize),\n            unclampedSize: unclampedSize,\n        });\n    };\n    Resizable.defaultProps = {\n        isResizable: true,\n        minSize: 0,\n    };\n    return Resizable;\n}(React.PureComponent));\nexport { Resizable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"./draggable\";\nexport var Orientation;\n(function (Orientation) {\n    Orientation[Orientation[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\n    Orientation[Orientation[\"VERTICAL\"] = 0] = \"VERTICAL\";\n})(Orientation || (Orientation = {}));\nvar ResizeHandle = /** @class */ (function (_super) {\n    tslib_1.__extends(ResizeHandle, _super);\n    function ResizeHandle() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isDragging: false,\n        };\n        _this.handleActivate = function (event) {\n            _this.setState({ isDragging: true });\n            _this.props.onLayoutLock(true);\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n            return true;\n        };\n        _this.handleDragMove = function (_event, coords) {\n            var orientationIndex = _this.props.orientation;\n            if (_this.props.onResizeMove != null) {\n                _this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n            }\n        };\n        _this.handleDragEnd = function (_event, coords) {\n            var orientationIndex = _this.props.orientation;\n            _this.setState({ isDragging: false });\n            _this.props.onLayoutLock(false);\n            if (_this.props.onResizeMove != null) {\n                _this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n            }\n            if (_this.props.onResizeEnd != null) {\n                _this.props.onResizeEnd(coords.offset[orientationIndex]);\n            }\n        };\n        _this.handleClick = function (_event) {\n            _this.setState({ isDragging: false });\n            _this.props.onLayoutLock(false);\n        };\n        _this.handleDoubleClick = function (_event) {\n            _this.setState({ isDragging: false });\n            _this.props.onLayoutLock(false);\n            if (_this.props.onDoubleClick != null) {\n                _this.props.onDoubleClick();\n            }\n        };\n        return _this;\n    }\n    ResizeHandle.prototype.render = function () {\n        var _a = this.props, onResizeMove = _a.onResizeMove, onResizeEnd = _a.onResizeEnd, onDoubleClick = _a.onDoubleClick, orientation = _a.orientation;\n        if (onResizeMove == null && onResizeEnd == null && onDoubleClick == null) {\n            return undefined;\n        }\n        var targetClasses = classNames(Classes.TABLE_RESIZE_HANDLE_TARGET, (_b = {},\n            _b[Classes.TABLE_DRAGGING] = this.state.isDragging,\n            _b[Classes.TABLE_RESIZE_HORIZONTAL] = orientation === Orientation.HORIZONTAL,\n            _b[Classes.TABLE_RESIZE_VERTICAL] = orientation === Orientation.VERTICAL,\n            _b), this.props.className);\n        var handleClasses = classNames(Classes.TABLE_RESIZE_HANDLE, (_c = {},\n            _c[Classes.TABLE_DRAGGING] = this.state.isDragging,\n            _c));\n        return (React.createElement(Draggable, { onActivate: this.handleActivate, onClick: this.handleClick, onDoubleClick: this.handleDoubleClick, onDragEnd: this.handleDragEnd, onDragMove: this.handleDragMove },\n            React.createElement(\"div\", { className: targetClasses },\n                React.createElement(\"div\", { className: handleClasses }))));\n        var _b, _c;\n    };\n    return ResizeHandle;\n}(React.PureComponent));\nexport { ResizeHandle };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as Classes from \"../common/classes\";\n/**\n * Efficiently detect when an HTMLElement is resized.\n *\n * Attaches an invisible \"resize-sensor\" div to the element. Then it checks\n * the element's offsetWidth and offsetHeight whenever a scroll event is\n * triggered on the \"resize-sensor\" children. These events are further\n * debounced using requestAnimationFrame.\n *\n * Inspired by: https://github.com/marcj/css-element-queries/blob/master/src/ResizeSensor.js\n */\nvar ResizeSensor = /** @class */ (function () {\n    function ResizeSensor() {\n    }\n    ResizeSensor.attach = function (element, callback) {\n        var lifecycle = ResizeSensor.debounce(callback);\n        var resizeSensor = document.createElement(\"div\");\n        resizeSensor.className = Classes.TABLE_RESIZE_SENSOR;\n        resizeSensor.style.cssText = ResizeSensor.RESIZE_SENSOR_STYLE;\n        resizeSensor.innerHTML = ResizeSensor.RESIZE_SENSOR_HTML;\n        element.appendChild(resizeSensor);\n        if (getComputedStyle(element, null).getPropertyValue(\"position\") === \"static\") {\n            element.style.position = \"relative\";\n        }\n        var expand = resizeSensor.childNodes[0];\n        var expandChild = expand.childNodes[0];\n        var shrink = resizeSensor.childNodes[1];\n        var reset = function () {\n            expandChild.style.width = \"100000px\";\n            expandChild.style.height = \"100000px\";\n            expand.scrollLeft = 100000;\n            expand.scrollTop = 100000;\n            shrink.scrollLeft = 100000;\n            shrink.scrollTop = 100000;\n        };\n        reset();\n        var lastWidth;\n        var lastHeight;\n        var onScroll = function () {\n            var currentWidth = element.offsetWidth;\n            var currentHeight = element.offsetHeight;\n            if (currentWidth !== lastWidth || currentHeight !== lastHeight) {\n                lastWidth = currentWidth;\n                lastHeight = currentHeight;\n                lifecycle.trigger();\n            }\n            reset();\n        };\n        expand.addEventListener(\"scroll\", onScroll);\n        shrink.addEventListener(\"scroll\", onScroll);\n        return function () {\n            element.removeChild(resizeSensor);\n            lifecycle.cancelled = true;\n        };\n    };\n    ResizeSensor.debounce = function (callback) {\n        var scope = {\n            cancelled: false,\n            trigger: function () {\n                if (scope.triggered || scope.cancelled) {\n                    return;\n                }\n                scope.triggered = true;\n                requestAnimationFrame(function () {\n                    scope.triggered = false;\n                    if (!scope.cancelled) {\n                        callback();\n                    }\n                });\n            },\n            triggered: false,\n        };\n        return scope;\n    };\n    ResizeSensor.RESIZE_SENSOR_STYLE = \"position: absolute; left: 0; top: 0; right: 0; \" +\n        \"bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n    ResizeSensor.RESIZE_SENSOR_HTML = \"<div class=\\\"\" + Classes.TABLE_RESIZE_SENSOR_EXPAND + \"\\\"\\n        style=\\\"\" + ResizeSensor.RESIZE_SENSOR_STYLE + \"\\\"><div style=\\\"position: absolute; left: 0; top: 0; transition: 0s;\\\"\\n        ></div></div><div class=\\\"\" + Classes.TABLE_RESIZE_SENSOR_SHRINK + \"\\\" style=\\\"\" + ResizeSensor.RESIZE_SENSOR_STYLE + \"\\\"\\n        ><div style=\\\"position: absolute; left: 0; top: 0; transition: 0s; width: 200%; height: 200%;\\\"></div></div>\";\n    return ResizeSensor;\n}());\nexport { ResizeSensor };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as FocusedCellUtils from \"../common/internal/focusedCellUtils\";\nimport * as PlatformUtils from \"../common/internal/platformUtils\";\nimport { Utils } from \"../common/utils\";\nimport { Regions } from \"../regions\";\nimport { DragEvents } from \"./dragEvents\";\nimport { Draggable } from \"./draggable\";\nvar DragSelectable = /** @class */ (function (_super) {\n    tslib_1.__extends(DragSelectable, _super);\n    function DragSelectable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.didExpandSelectionOnActivate = false;\n        _this.handleActivate = function (event) {\n            var _a = _this.props, locateClick = _a.locateClick, selectedRegions = _a.selectedRegions, selectedRegionTransform = _a.selectedRegionTransform;\n            if (_this.shouldIgnoreMouseDown(event)) {\n                return false;\n            }\n            var region = locateClick(event);\n            if (!Regions.isValid(region)) {\n                return false;\n            }\n            if (selectedRegionTransform != null) {\n                region = selectedRegionTransform(region, event);\n            }\n            var foundIndex = Regions.findMatchingRegion(selectedRegions, region);\n            var matchesExistingSelection = foundIndex !== -1;\n            if (matchesExistingSelection && DragEvents.isAdditive(event)) {\n                _this.handleClearSelectionAtIndex(foundIndex);\n                // if we just deselected a selected region, a subsequent drag-move\n                // could reselect it again and *also* clear other selections. that's\n                // quite unintuitive, so ignore subsequent drag-move's.\n                return false;\n            }\n            // we want to listen to subsequent drag-move's in all following cases,\n            // so this mousedown can be the start of a new selection if desired.\n            if (matchesExistingSelection) {\n                _this.handleClearAllSelectionsNotAtIndex(foundIndex);\n            }\n            else if (_this.shouldExpandSelection(event)) {\n                _this.handleExpandSelection(region);\n            }\n            else if (_this.shouldAddDisjointSelection(event)) {\n                _this.handleAddDisjointSelection(region);\n            }\n            else {\n                _this.handleReplaceSelection(region);\n            }\n            return true;\n        };\n        _this.handleDragMove = function (event, coords) {\n            var _a = _this.props, enableMultipleSelection = _a.enableMultipleSelection, focusedCell = _a.focusedCell, locateClick = _a.locateClick, locateDrag = _a.locateDrag, selectedRegions = _a.selectedRegions, selectedRegionTransform = _a.selectedRegionTransform;\n            var region = enableMultipleSelection\n                ? locateDrag(event, coords, /* returnEndOnly? */ _this.didExpandSelectionOnActivate)\n                : locateClick(event);\n            if (!Regions.isValid(region)) {\n                return;\n            }\n            else if (selectedRegionTransform != null) {\n                region = selectedRegionTransform(region, event, coords);\n            }\n            var nextSelectedRegions = _this.didExpandSelectionOnActivate\n                ? _this.expandSelectedRegions(selectedRegions, region, focusedCell)\n                : Regions.update(selectedRegions, region);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            if (!enableMultipleSelection) {\n                // move the focused cell with the selected region\n                var lastIndex = nextSelectedRegions.length - 1;\n                var mostRecentRegion = nextSelectedRegions[lastIndex];\n                _this.invokeOnFocusCallbackForRegion(mostRecentRegion, lastIndex);\n            }\n        };\n        _this.handleDragEnd = function () {\n            _this.finishInteraction();\n        };\n        _this.handleClick = function () {\n            _this.finishInteraction();\n        };\n        // Boolean checks\n        // ==============\n        _this.shouldExpandSelection = function (event) {\n            var enableMultipleSelection = _this.props.enableMultipleSelection;\n            return enableMultipleSelection && event.shiftKey;\n        };\n        _this.shouldAddDisjointSelection = function (event) {\n            var enableMultipleSelection = _this.props.enableMultipleSelection;\n            return enableMultipleSelection && DragEvents.isAdditive(event);\n        };\n        // Update logic\n        // ============\n        _this.handleClearSelectionAtIndex = function (selectedRegionIndex) {\n            var selectedRegions = _this.props.selectedRegions;\n            // remove just the clicked region, leaving other selected regions in place\n            var nextSelectedRegions = selectedRegions.slice();\n            nextSelectedRegions.splice(selectedRegionIndex, 1);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // if there are still any selections, move the focused cell to the\n            // most recent selection. otherwise, don't update it.\n            if (nextSelectedRegions.length > 0) {\n                var lastIndex = nextSelectedRegions.length - 1;\n                _this.invokeOnFocusCallbackForRegion(nextSelectedRegions[lastIndex], lastIndex);\n            }\n        };\n        _this.handleClearAllSelectionsNotAtIndex = function (selectedRegionIndex) {\n            var selectedRegions = _this.props.selectedRegions;\n            var nextSelectedRegion = selectedRegions[selectedRegionIndex];\n            _this.maybeInvokeSelectionCallback([nextSelectedRegion]);\n            _this.invokeOnFocusCallbackForRegion(nextSelectedRegion, 0);\n        };\n        _this.handleExpandSelection = function (region) {\n            var _a = _this.props, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions;\n            _this.didExpandSelectionOnActivate = true;\n            // there should be only one selected region after expanding. do not\n            // update the focused cell.\n            var nextSelectedRegions = _this.expandSelectedRegions(selectedRegions, region, focusedCell);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // move the focused cell into the new region if there were no selections before\n            if (selectedRegions == null || selectedRegions.length === 0) {\n                _this.invokeOnFocusCallbackForRegion(region);\n            }\n        };\n        _this.handleAddDisjointSelection = function (region) {\n            var selectedRegions = _this.props.selectedRegions;\n            // add the new region to the existing selections\n            var nextSelectedRegions = Regions.add(selectedRegions, region);\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // put the focused cell in the new region\n            _this.invokeOnFocusCallbackForRegion(region, nextSelectedRegions.length - 1);\n        };\n        _this.handleReplaceSelection = function (region) {\n            // clear all selections and retain only the new one\n            var nextSelectedRegions = [region];\n            _this.maybeInvokeSelectionCallback(nextSelectedRegions);\n            // move the focused cell into the new selection\n            _this.invokeOnFocusCallbackForRegion(region);\n        };\n        _this.invokeOnFocusCallbackForRegion = function (focusRegion, focusSelectionIndex) {\n            if (focusSelectionIndex === void 0) { focusSelectionIndex = 0; }\n            var onFocusedCell = _this.props.onFocusedCell;\n            var focusedCellCoords = Regions.getFocusCellCoordinatesFromRegion(focusRegion);\n            onFocusedCell(FocusedCellUtils.toFullCoordinates(focusedCellCoords, focusSelectionIndex));\n        };\n        // Other\n        // =====\n        _this.finishInteraction = function () {\n            CoreUtils.safeInvoke(_this.props.onSelectionEnd, _this.props.selectedRegions);\n            _this.didExpandSelectionOnActivate = false;\n            _this.lastEmittedSelectedRegions = null;\n        };\n        return _this;\n    }\n    DragSelectable.prototype.render = function () {\n        var draggableProps = this.getDraggableProps();\n        return (React.createElement(Draggable, tslib_1.__assign({}, draggableProps, { preventDefault: false }), this.props.children));\n    };\n    DragSelectable.prototype.getDraggableProps = function () {\n        return this.props.onSelection == null\n            ? {}\n            : {\n                onActivate: this.handleActivate,\n                onClick: this.handleClick,\n                onDragEnd: this.handleDragEnd,\n                onDragMove: this.handleDragMove,\n            };\n    };\n    DragSelectable.prototype.shouldIgnoreMouseDown = function (event) {\n        var _a = this.props, disabled = _a.disabled, _b = _a.ignoredSelectors, ignoredSelectors = _b === void 0 ? [] : _b;\n        var element = event.target;\n        var isLeftClick = Utils.isLeftClick(event);\n        var isContextMenuTrigger = isLeftClick && event.ctrlKey && PlatformUtils.isMac();\n        var isDisabled = CoreUtils.safeInvokeOrValue(disabled, event);\n        return (!isLeftClick ||\n            isContextMenuTrigger ||\n            isDisabled ||\n            ignoredSelectors.some(function (selector) { return element.closest(selector) != null; }));\n    };\n    // Callbacks\n    // =========\n    DragSelectable.prototype.maybeInvokeSelectionCallback = function (nextSelectedRegions) {\n        var onSelection = this.props.onSelection;\n        // invoke only if the selection changed. this is useful only on\n        // mousemove; there's special handling for mousedown interactions that\n        // target an already-selected region.\n        if (this.lastEmittedSelectedRegions == null ||\n            !CoreUtils.deepCompareKeys(this.lastEmittedSelectedRegions, nextSelectedRegions)) {\n            onSelection(nextSelectedRegions);\n            this.lastEmittedSelectedRegions = nextSelectedRegions;\n        }\n    };\n    /**\n     * Expands the last-selected region to the new region, and replaces the\n     * last-selected region with the expanded region. If a focused cell is provided,\n     * the focused cell will serve as an anchor for the expansion.\n     */\n    DragSelectable.prototype.expandSelectedRegions = function (regions, region, focusedCell) {\n        if (regions.length === 0) {\n            return [region];\n        }\n        else if (focusedCell != null) {\n            var expandedRegion = FocusedCellUtils.expandFocusedRegion(focusedCell, region);\n            return Regions.update(regions, expandedRegion);\n        }\n        else {\n            var expandedRegion = Regions.expandRegion(regions[regions.length - 1], region);\n            return Regions.update(regions, expandedRegion);\n        }\n    };\n    DragSelectable.defaultProps = {\n        disabled: false,\n        enableMultipleSelection: false,\n        selectedRegions: [],\n    };\n    return DragSelectable;\n}(React.PureComponent));\nexport { DragSelectable };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nvar GuideLayer = /** @class */ (function (_super) {\n    tslib_1.__extends(GuideLayer, _super);\n    function GuideLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.renderVerticalGuide = function (offset, index) {\n            var style = {\n                left: offset + \"px\",\n            };\n            var className = classNames(Classes.TABLE_OVERLAY, Classes.TABLE_VERTICAL_GUIDE, {\n                \"pt-table-vertical-guide-flush-left\": offset === 0,\n            });\n            return React.createElement(\"div\", { className: className, key: index, style: style });\n        };\n        _this.renderHorizontalGuide = function (offset, index) {\n            var style = {\n                top: offset + \"px\",\n            };\n            var className = classNames(Classes.TABLE_OVERLAY, Classes.TABLE_HORIZONTAL_GUIDE, {\n                \"pt-table-horizontal-guide-flush-top\": offset === 0,\n            });\n            return React.createElement(\"div\", { className: className, key: index, style: style });\n        };\n        return _this;\n    }\n    GuideLayer.prototype.shouldComponentUpdate = function (nextProps) {\n        if (this.props.className !== nextProps.className) {\n            return true;\n        }\n        // shallow-comparing guide arrays leads to tons of unnecessary re-renders, so we check the\n        // array contents explicitly.\n        return (!CoreUtils.arraysEqual(this.props.verticalGuides, nextProps.verticalGuides) ||\n            !CoreUtils.arraysEqual(this.props.horizontalGuides, nextProps.horizontalGuides));\n    };\n    GuideLayer.prototype.render = function () {\n        var _a = this.props, verticalGuides = _a.verticalGuides, horizontalGuides = _a.horizontalGuides, className = _a.className;\n        var verticals = verticalGuides == null ? undefined : verticalGuides.map(this.renderVerticalGuide);\n        var horizontals = horizontalGuides == null ? undefined : horizontalGuides.map(this.renderHorizontalGuide);\n        return (React.createElement(\"div\", { className: classNames(className, Classes.TABLE_OVERLAY_LAYER) },\n            verticals,\n            horizontals));\n    };\n    return GuideLayer;\n}(React.Component));\nexport { GuideLayer };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Regions } from \"../regions\";\n// don't include \"regions\" or \"regionStyles\" in here, because they can't be shallowly compared\nvar UPDATE_PROPS_KEYS = [\"className\"];\nvar RegionLayer = /** @class */ (function (_super) {\n    tslib_1.__extends(RegionLayer, _super);\n    function RegionLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.renderRegion = function (_region, index) {\n            var _a = _this.props, className = _a.className, regionStyles = _a.regionStyles;\n            return (React.createElement(\"div\", { className: classNames(Classes.TABLE_OVERLAY, Classes.TABLE_REGION, className), key: index, style: regionStyles[index] }));\n        };\n        return _this;\n    }\n    RegionLayer.prototype.shouldComponentUpdate = function (nextProps) {\n        // shallowly comparable props like \"className\" tend not to change in the default table\n        // implementation, so do that check last with hope that we return earlier and avoid it\n        // altogether.\n        return (!CoreUtils.arraysEqual(this.props.regions, nextProps.regions, Regions.regionsEqual) ||\n            !CoreUtils.arraysEqual(this.props.regionStyles, nextProps.regionStyles, CoreUtils.shallowCompareKeys) ||\n            !CoreUtils.shallowCompareKeys(this.props, nextProps, { include: UPDATE_PROPS_KEYS }));\n    };\n    RegionLayer.prototype.render = function () {\n        return React.createElement(\"div\", { className: Classes.TABLE_OVERLAY_LAYER }, this.renderRegionChildren());\n    };\n    RegionLayer.prototype.renderRegionChildren = function () {\n        var regions = this.props.regions;\n        if (regions == null) {\n            return undefined;\n        }\n        return regions.map(this.renderRegion);\n    };\n    return RegionLayer;\n}(React.Component));\nexport { RegionLayer };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as Classes from \"./common/classes\";\nimport { Rect } from \"./common/rect\";\nimport { Utils } from \"./common/utils\";\nvar Locator = /** @class */ (function () {\n    function Locator(\n    /* The root table element within which a click is deemed valid and relevant. */\n    tableElement, \n    /* The scrollable element that wraps the cell container. */\n    scrollContainerElement, \n    /* The element containing all body cells in the grid (excluding headers). */\n    cellContainerElement) {\n        var _this = this;\n        this.tableElement = tableElement;\n        this.scrollContainerElement = scrollContainerElement;\n        this.cellContainerElement = cellContainerElement;\n        this.convertCellIndexToClientX = function (index) {\n            return _this.grid.getCumulativeWidthAt(index);\n        };\n        this.convertCellMidpointToClientX = function (index) {\n            var cellLeft = _this.grid.getCumulativeWidthBefore(index);\n            var cellRight = _this.grid.getCumulativeWidthAt(index);\n            return (cellLeft + cellRight) / 2;\n        };\n        this.convertCellIndexToClientY = function (index) {\n            return _this.grid.getCumulativeHeightAt(index);\n        };\n        this.convertCellMidpointToClientY = function (index) {\n            var cellTop = _this.grid.getCumulativeHeightBefore(index);\n            var cellBottom = _this.grid.getCumulativeHeightAt(index);\n            return (cellTop + cellBottom) / 2;\n        };\n        this.toGridX = function (clientX) {\n            var gridOffsetFromPageLeft = _this.cellContainerElement.getBoundingClientRect().left;\n            var scrollOffsetFromGridLeft = _this.scrollContainerElement.scrollLeft;\n            var cursorOffsetFromGridLeft = clientX - (gridOffsetFromPageLeft + scrollOffsetFromGridLeft);\n            var isCursorWithinFrozenColumns = _this.numFrozenColumns != null &&\n                _this.numFrozenColumns > 0 &&\n                cursorOffsetFromGridLeft <= _this.grid.getCumulativeWidthBefore(_this.numFrozenColumns);\n            // the frozen-column region doesn't scroll, so ignore the scroll distance in that case\n            return isCursorWithinFrozenColumns\n                ? cursorOffsetFromGridLeft\n                : cursorOffsetFromGridLeft + scrollOffsetFromGridLeft;\n        };\n        this.toGridY = function (clientY) {\n            var gridOffsetFromPageTop = _this.cellContainerElement.getBoundingClientRect().top;\n            var scrollOffsetFromGridTop = _this.scrollContainerElement.scrollTop;\n            var cursorOffsetFromGridTop = clientY - (gridOffsetFromPageTop + scrollOffsetFromGridTop);\n            var isCursorWithinFrozenRows = _this.numFrozenRows != null &&\n                _this.numFrozenRows > 0 &&\n                cursorOffsetFromGridTop <= _this.grid.getCumulativeHeightBefore(_this.numFrozenRows);\n            return isCursorWithinFrozenRows ? cursorOffsetFromGridTop : cursorOffsetFromGridTop + scrollOffsetFromGridTop;\n        };\n        this.numFrozenRows = 0;\n        this.numFrozenColumns = 0;\n    }\n    // Setters\n    // =======\n    Locator.prototype.setGrid = function (grid) {\n        this.grid = grid;\n        return this;\n    };\n    Locator.prototype.setNumFrozenRows = function (numFrozenRows) {\n        this.numFrozenRows = numFrozenRows;\n        return this;\n    };\n    Locator.prototype.setNumFrozenColumns = function (numFrozenColumns) {\n        this.numFrozenColumns = numFrozenColumns;\n        return this;\n    };\n    // Getters\n    // =======\n    Locator.prototype.getViewportRect = function () {\n        return new Rect(this.scrollContainerElement.scrollLeft, this.scrollContainerElement.scrollTop, this.scrollContainerElement.clientWidth, this.scrollContainerElement.clientHeight);\n    };\n    Locator.prototype.getWidestVisibleCellInColumn = function (columnIndex) {\n        var columnCellSelector = this.getColumnCellSelector(columnIndex);\n        var columnHeaderAndBodyCells = this.tableElement.querySelectorAll(columnCellSelector);\n        var maxWidth = 0;\n        for (var i = 0; i < columnHeaderAndBodyCells.length; i++) {\n            var contentWidth = Utils.measureElementTextContent(columnHeaderAndBodyCells.item(i)).width;\n            var cellWidth = Math.ceil(contentWidth) + Locator.CELL_HORIZONTAL_PADDING * 2;\n            if (cellWidth > maxWidth) {\n                maxWidth = cellWidth;\n            }\n        }\n        return maxWidth;\n    };\n    Locator.prototype.getTallestVisibleCellInColumn = function (columnIndex) {\n        // consider only body cells, hence the extra Classes.TABLE_CELL specificity\n        var columnCellSelector = this.getColumnCellSelector(columnIndex);\n        var columnBodyCells = this.tableElement.querySelectorAll(columnCellSelector + \".\" + Classes.TABLE_CELL);\n        var maxHeight = 0;\n        for (var i = 0; i < columnBodyCells.length; i++) {\n            var cell = columnBodyCells.item(i);\n            var cellValue = cell.querySelector(\".\" + Classes.TABLE_TRUNCATED_VALUE);\n            var cellTruncatedFormatText = cell.querySelector(\".\" + Classes.TABLE_TRUNCATED_FORMAT_TEXT);\n            var cellTruncatedText = cell.querySelector(\".\" + Classes.TABLE_TRUNCATED_TEXT);\n            var height = 0;\n            if (cellValue != null) {\n                height = cellValue.scrollHeight;\n            }\n            else if (cellTruncatedFormatText != null) {\n                height = cellTruncatedFormatText.scrollHeight;\n            }\n            else if (cellTruncatedText != null) {\n                height = cellTruncatedText.scrollHeight;\n            }\n            else {\n                // it's not anything we recognize, just use the current height of the cell\n                height = cell.scrollHeight;\n            }\n            if (height > maxHeight) {\n                maxHeight = height;\n            }\n        }\n        return maxHeight;\n    };\n    // Converters\n    // ==========\n    Locator.prototype.convertPointToColumn = function (clientX, useMidpoint) {\n        var tableRect = this.getTableRect();\n        if (!tableRect.containsX(clientX)) {\n            return -1;\n        }\n        var gridX = this.toGridX(clientX);\n        var limit = useMidpoint ? this.grid.numCols : this.grid.numCols - 1;\n        var lookupFn = useMidpoint ? this.convertCellMidpointToClientX : this.convertCellIndexToClientX;\n        return Utils.binarySearch(gridX, limit, lookupFn);\n    };\n    Locator.prototype.convertPointToRow = function (clientY, useMidpoint) {\n        var tableRect = this.getTableRect();\n        if (!tableRect.containsY(clientY)) {\n            return -1;\n        }\n        var gridY = this.toGridY(clientY);\n        var limit = useMidpoint ? this.grid.numRows : this.grid.numRows - 1;\n        var lookupFn = useMidpoint ? this.convertCellMidpointToClientY : this.convertCellIndexToClientY;\n        return Utils.binarySearch(gridY, limit, lookupFn);\n    };\n    Locator.prototype.convertPointToCell = function (clientX, clientY) {\n        var gridX = this.toGridX(clientX);\n        var gridY = this.toGridY(clientY);\n        var col = Utils.binarySearch(gridX, this.grid.numCols - 1, this.convertCellIndexToClientX);\n        var row = Utils.binarySearch(gridY, this.grid.numRows - 1, this.convertCellIndexToClientY);\n        return { col: col, row: row };\n    };\n    // Private helpers\n    // ===============\n    Locator.prototype.getColumnCellSelector = function (columnIndex) {\n        // measure frozen columns in the LEFT quadrant; otherwise, they might\n        // have been scrolled out of view, leading to wonky measurements (#1561)\n        var isFrozenColumnIndex = columnIndex < this.numFrozenColumns;\n        var quadrantClass = isFrozenColumnIndex ? Classes.TABLE_QUADRANT_LEFT : Classes.TABLE_QUADRANT_MAIN;\n        var cellClass = Classes.columnCellIndexClass(columnIndex);\n        return \".\" + quadrantClass + \" .\" + cellClass;\n    };\n    Locator.prototype.getTableRect = function () {\n        return Rect.wrap(this.tableElement.getBoundingClientRect());\n    };\n    Locator.CELL_HORIZONTAL_PADDING = 10;\n    return Locator;\n}());\nexport { Locator };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractComponent, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport * as Errors from \"../common/errors\";\nexport var QuadrantType;\n(function (QuadrantType) {\n    /**\n     * The main quadrant beneath any frozen rows or columns.\n     */\n    QuadrantType[\"MAIN\"] = \"main\";\n    /**\n     * The top quadrant, containing column headers and frozen rows.\n     */\n    QuadrantType[\"TOP\"] = \"top\";\n    /**\n     * The left quadrant, containing row headers and frozen columns.\n     */\n    QuadrantType[\"LEFT\"] = \"left\";\n    /**\n     * The top-left quadrant, containing the headers and cells common to both\n     * the frozen columns and frozen rows.\n     */\n    QuadrantType[\"TOP_LEFT\"] = \"top-left\";\n})(QuadrantType || (QuadrantType = {}));\nvar TableQuadrant = /** @class */ (function (_super) {\n    tslib_1.__extends(TableQuadrant, _super);\n    function TableQuadrant() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TableQuadrant.prototype.render = function () {\n        var _a = this.props, grid = _a.grid, enableRowHeader = _a.enableRowHeader, quadrantType = _a.quadrantType, bodyRenderer = _a.bodyRenderer;\n        var showFrozenRowsOnly = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n        var showFrozenColumnsOnly = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n        var className = classNames(Classes.TABLE_QUADRANT, this.getQuadrantCssClass(), this.props.className);\n        var maybeMenu = enableRowHeader && CoreUtils.safeInvoke(this.props.menuRenderer);\n        var maybeRowHeader = enableRowHeader && CoreUtils.safeInvoke(this.props.rowHeaderCellRenderer, showFrozenRowsOnly);\n        var maybeColumnHeader = CoreUtils.safeInvoke(this.props.columnHeaderCellRenderer, showFrozenColumnsOnly);\n        var body = quadrantType != null\n            ? bodyRenderer(quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly)\n            : bodyRenderer();\n        // need to set bottom container size to prevent overlay clipping on scroll\n        var bottomContainerStyle = {\n            height: grid.getHeight(),\n            width: grid.getWidth(),\n        };\n        return (React.createElement(\"div\", { className: className, style: this.props.style, ref: this.props.quadrantRef },\n            React.createElement(\"div\", { className: Classes.TABLE_QUADRANT_SCROLL_CONTAINER, ref: this.props.scrollContainerRef, onScroll: this.props.onScroll, onWheel: this.props.onWheel },\n                React.createElement(\"div\", { className: Classes.TABLE_TOP_CONTAINER },\n                    maybeMenu,\n                    maybeColumnHeader),\n                React.createElement(\"div\", { className: Classes.TABLE_BOTTOM_CONTAINER, style: bottomContainerStyle },\n                    maybeRowHeader,\n                    React.createElement(\"div\", { className: Classes.TABLE_QUADRANT_BODY_CONTAINER, ref: this.props.bodyRef }, body)))));\n    };\n    TableQuadrant.prototype.validateProps = function (nextProps) {\n        var quadrantType = nextProps.quadrantType;\n        if (nextProps.onScroll != null && quadrantType != null && quadrantType !== QuadrantType.MAIN) {\n            console.warn(Errors.QUADRANT_ON_SCROLL_UNNECESSARILY_DEFINED);\n        }\n    };\n    TableQuadrant.prototype.getQuadrantCssClass = function () {\n        switch (this.props.quadrantType) {\n            case QuadrantType.MAIN:\n                return Classes.TABLE_QUADRANT_MAIN;\n            case QuadrantType.TOP:\n                return Classes.TABLE_QUADRANT_TOP;\n            case QuadrantType.LEFT:\n                return Classes.TABLE_QUADRANT_LEFT;\n            case QuadrantType.TOP_LEFT:\n                return Classes.TABLE_QUADRANT_TOP_LEFT;\n            default:\n                return undefined;\n        }\n    };\n    // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n    // declaring that and other required props here.\n    TableQuadrant.defaultProps = {\n        enableRowHeader: true,\n    };\n    return TableQuadrant;\n}(AbstractComponent));\nexport { TableQuadrant };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractComponent, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport * as ScrollUtils from \"../common/internal/scrollUtils\";\nimport { Utils } from \"../common/utils\";\nimport { QuadrantType, TableQuadrant } from \"./tableQuadrant\";\nimport { TableQuadrantStackCache } from \"./tableQuadrantStackCache\";\n// when there are no column headers, the header and menu element will\n// confusingly collapse to zero height unless we establish this default.\nvar DEFAULT_COLUMN_HEADER_HEIGHT = 30;\n// the debounce delay for updating the view on scroll. elements will be resized\n// and rejiggered once scroll has ceased for at least this long, but not before.\nvar DEFAULT_VIEW_SYNC_DELAY = 500;\n// if there are no frozen rows or columns, we still want the quadrant to be 1px\n// bigger to reveal the header border. this border leaks into the cell grid to\n// ensure that selection overlay borders (e.g.) will be perfectly flush with it.\nvar QUADRANT_MIN_SIZE = 1;\n// a list of props that trigger layout changes. when these props change,\n// quadrant views need to be explicitly resynchronized.\nvar SYNC_TRIGGER_PROP_KEYS = [\n    \"enableRowHeader\",\n    \"loadingOptions\",\n    \"numFrozenColumns\",\n    \"numFrozenRows\",\n    \"numColumns\",\n    \"numRows\",\n    \"enableColumnInteractionBar\",\n];\nvar TableQuadrantStack = /** @class */ (function (_super) {\n    tslib_1.__extends(TableQuadrantStack, _super);\n    // Public\n    // ======\n    function TableQuadrantStack(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        // Instance variables\n        // ==================\n        _this.quadrantRefs = (_a = {},\n            _a[QuadrantType.MAIN] = {},\n            _a[QuadrantType.TOP] = {},\n            _a[QuadrantType.LEFT] = {},\n            _a[QuadrantType.TOP_LEFT] = {},\n            _a);\n        _this.quadrantRefHandlers = (_b = {},\n            _b[QuadrantType.MAIN] = _this.generateQuadrantRefHandlers(QuadrantType.MAIN),\n            _b[QuadrantType.TOP] = _this.generateQuadrantRefHandlers(QuadrantType.TOP),\n            _b[QuadrantType.LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.LEFT),\n            _b[QuadrantType.TOP_LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.TOP_LEFT),\n            _b);\n        // this flag helps us avoid redundant work in the MAIN quadrant's onScroll callback, if the\n        // callback was triggered from a manual scrollTop/scrollLeft update within an onWheel.\n        _this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n        // Quadrant-specific renderers\n        // ===========================\n        // Menu\n        _this.renderMainQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.MAIN].menu);\n        };\n        _this.renderTopQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.TOP].menu);\n        };\n        _this.renderLeftQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.LEFT].menu);\n        };\n        _this.renderTopLeftQuadrantMenu = function () {\n            return CoreUtils.safeInvoke(_this.props.menuRenderer, _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].menu);\n        };\n        // Column header\n        _this.renderMainQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideMain;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderTopQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideTop;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideLeft;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderTopLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideTopLeft;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return CoreUtils.safeInvoke(_this.props.columnHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        // Row header\n        _this.renderMainQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideMain;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderTopQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideTop;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideLeft;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderTopLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideTopLeft;\n            var reorderingHandler = _this.handleRowsReordering;\n            return CoreUtils.safeInvoke(_this.props.rowHeaderCellRenderer, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        // Event handlers\n        // ==============\n        // Scrolling\n        // ---------\n        _this.handleMainQuadrantScroll = function (event) {\n            if (_this.wasMainQuadrantScrollTriggeredByWheelEvent) {\n                _this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n                return;\n            }\n            // invoke onScroll - which may read current scroll position - before\n            // forcing a reflow with upcoming .scroll{Top,Left} setters.\n            CoreUtils.safeInvoke(_this.props.onScroll, event);\n            // batch DOM reads here. note that onScroll events don't include deltas\n            // like onWheel events do, so we have to read from the DOM directly.\n            var mainScrollContainer = _this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n            var nextScrollLeft = mainScrollContainer.scrollLeft;\n            var nextScrollTop = mainScrollContainer.scrollTop;\n            // with the \"scroll\" event, scroll offsets are updated prior to the\n            // event's firing, so no explicit update needed.\n            _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n            _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop);\n            // sync less important view stuff when scrolling/wheeling stops.\n            _this.syncQuadrantViewsDebounced();\n        };\n        _this.handleWheel = function (event) {\n            // again, let the listener read the current scroll position before we\n            // force a reflow by resizing or repositioning stuff.\n            CoreUtils.safeInvoke(_this.props.onScroll, event);\n            // this helper performs DOM reads, so do them together before the writes below.\n            var nextScrollLeft = _this.getNextScrollOffset(\"horizontal\", event.deltaX);\n            var nextScrollTop = _this.getNextScrollOffset(\"vertical\", event.deltaY);\n            // update this flag before updating the main quadrant scroll offsets,\n            // since we need this set before onScroll fires.\n            if (nextScrollLeft != null || nextScrollTop != null) {\n                _this.wasMainQuadrantScrollTriggeredByWheelEvent = true;\n            }\n            // manually update the affected quadrant's scroll position to make sure\n            // it stays perfectly in sync with dependent quadrants in each frame.\n            // note: these DOM writes are batched together after the reads above.\n            _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollLeft = nextScrollLeft;\n            _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollTop = nextScrollTop;\n            _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n            _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop);\n            // sync less important view stuff when scrolling/wheeling stops.\n            _this.syncQuadrantViewsDebounced();\n        };\n        _this.getNextScrollOffset = function (direction, delta) {\n            var _a = _this.props, grid = _a.grid, isHorizontalScrollDisabled = _a.isHorizontalScrollDisabled, isVerticalScrollDisabled = _a.isVerticalScrollDisabled;\n            var isHorizontal = direction === \"horizontal\";\n            var scrollKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n            var isScrollDisabled = isHorizontal ? isHorizontalScrollDisabled : isVerticalScrollDisabled;\n            if (isScrollDisabled) {\n                return undefined;\n            }\n            // measure client size on the first event of the current wheel gesture,\n            // then grab cached values on successive events to eliminate DOM reads.\n            // requires clearing the cached values in the debounced view-update at\n            // the end of the wheel event.\n            // ASSUMPTION: the client size won't change during the wheel event.\n            var clientSize = isHorizontal\n                ? _this.cache.getScrollContainerClientWidth()\n                : _this.cache.getScrollContainerClientHeight();\n            if (clientSize == null) {\n                // should trigger only on the first scroll of the wheel gesture.\n                // will save client width and height sizes in the cache.\n                clientSize = _this.updateScrollContainerClientSize(isHorizontal);\n            }\n            // by now, the client width and height will have been saved in cache, so\n            // they can't be nully anymore. also, events can only happen after\n            // mount, so we're guaranteed to have measured the header sizes in\n            // syncQuadrantViews() by now too, as it's invoked on mount.\n            var containerSize = isHorizontal\n                ? _this.cache.getScrollContainerClientWidth() - _this.cache.getRowHeaderWidth()\n                : _this.cache.getScrollContainerClientHeight() - _this.cache.getColumnHeaderHeight();\n            var gridSize = isHorizontal ? grid.getWidth() : grid.getHeight();\n            var maxScrollOffset = Math.max(0, gridSize - containerSize);\n            var currScrollOffset = _this.cache.getScrollOffset(scrollKey);\n            var nextScrollOffset = CoreUtils.clamp(currScrollOffset + delta, 0, maxScrollOffset);\n            return nextScrollOffset;\n        };\n        // Resizing\n        // --------\n        // Columns\n        _this.handleColumnResizeGuideMain = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.MAIN);\n        };\n        _this.handleColumnResizeGuideTop = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP);\n        };\n        _this.handleColumnResizeGuideLeft = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.LEFT);\n        };\n        _this.handleColumnResizeGuideTopLeft = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP_LEFT);\n        };\n        _this.invokeColumnResizeHandler = function (verticalGuides, quadrantType) {\n            var adjustedGuides = _this.adjustVerticalGuides(verticalGuides, quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleColumnResizeGuide, adjustedGuides);\n        };\n        // Rows\n        _this.handleRowResizeGuideMain = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.MAIN);\n        };\n        _this.handleRowResizeGuideTop = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP);\n        };\n        _this.handleRowResizeGuideLeft = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.LEFT);\n        };\n        _this.handleRowResizeGuideTopLeft = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP_LEFT);\n        };\n        _this.invokeRowResizeHandler = function (horizontalGuides, quadrantType) {\n            var adjustedGuides = _this.adjustHorizontalGuides(horizontalGuides, quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleRowResizeGuide, adjustedGuides);\n        };\n        // Reordering\n        // ----------\n        // Columns\n        _this.handleColumnsReordering = function (oldIndex, newIndex, length) {\n            var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n            var leftOffset = _this.props.grid.getCumulativeWidthBefore(guideIndex);\n            var quadrantType = guideIndex <= _this.props.numFrozenColumns ? QuadrantType.TOP_LEFT : QuadrantType.TOP;\n            var verticalGuides = _this.adjustVerticalGuides([leftOffset], quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleColumnsReordering, verticalGuides);\n        };\n        // Rows\n        _this.handleRowsReordering = function (oldIndex, newIndex, length) {\n            var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n            var topOffset = _this.props.grid.getCumulativeHeightBefore(guideIndex);\n            var quadrantType = guideIndex <= _this.props.numFrozenRows ? QuadrantType.TOP_LEFT : QuadrantType.LEFT;\n            var horizontalGuides = _this.adjustHorizontalGuides([topOffset], quadrantType);\n            CoreUtils.safeInvoke(_this.props.handleRowsReordering, horizontalGuides);\n        };\n        // Size syncing\n        // ============\n        _this.syncQuadrantViewsDebounced = function () {\n            var viewSyncDelay = _this.props.viewSyncDelay;\n            if (viewSyncDelay < 0) {\n                // update synchronously\n                _this.syncQuadrantViews();\n            }\n            else {\n                // update asynchronously after a debounced delay\n                clearInterval(_this.debouncedViewSyncInterval);\n                _this.debouncedViewSyncInterval = window.setTimeout(_this.syncQuadrantViews, viewSyncDelay);\n            }\n        };\n        _this.syncQuadrantViews = function () {\n            var mainRefs = _this.quadrantRefs[QuadrantType.MAIN];\n            var mainScrollContainer = mainRefs.scrollContainer;\n            //\n            // Reads (batched to avoid DOM thrashing)\n            //\n            var rowHeaderWidth = _this.measureDesiredRowHeaderWidth();\n            var columnHeaderHeight = _this.measureDesiredColumnHeaderHeight();\n            var leftQuadrantGridWidth = _this.getSecondaryQuadrantGridSize(\"width\");\n            var topQuadrantGridHeight = _this.getSecondaryQuadrantGridSize(\"height\");\n            var leftQuadrantWidth = rowHeaderWidth + leftQuadrantGridWidth;\n            var topQuadrantHeight = columnHeaderHeight + topQuadrantGridHeight;\n            var rightScrollBarWidth = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"vertical\");\n            var bottomScrollBarHeight = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"horizontal\");\n            // ensure neither of these measurements confusingly clamps to zero height.\n            var adjustedColumnHeaderHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(columnHeaderHeight);\n            var adjustedTopQuadrantHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(topQuadrantHeight);\n            // Update cache: let's read now whatever values we might need later.\n            // prevents unnecessary reflows in the future.\n            _this.cache.setRowHeaderWidth(rowHeaderWidth);\n            _this.cache.setColumnHeaderHeight(columnHeaderHeight);\n            // ...however, we also clear the cached client size, so we can read it\n            // again when a new scroll begins. not safe to assume this won't change.\n            // TODO: maybe use the ResizeSensor?\n            _this.cache.setScrollContainerClientWidth(undefined);\n            _this.cache.setScrollContainerClientHeight(undefined);\n            //\n            // Writes (batched to avoid DOM thrashing)\n            //\n            // Quadrant-size sync'ing: make the quadrants precisely as big as they\n            // need to be to fit their variable-sized headers and/or frozen areas.\n            _this.maybesSetQuadrantRowHeaderSizes(rowHeaderWidth);\n            _this.maybeSetQuadrantMenuElementSizes(rowHeaderWidth, adjustedColumnHeaderHeight);\n            _this.maybeSetQuadrantSizes(leftQuadrantWidth, adjustedTopQuadrantHeight);\n            // Scrollbar clearance: tweak the quadrant bottom/right offsets to\n            // reveal the MAIN-quadrant scrollbars if they're visible.\n            _this.maybeSetQuadrantPositionOffset(QuadrantType.TOP, \"right\", rightScrollBarWidth);\n            _this.maybeSetQuadrantPositionOffset(QuadrantType.LEFT, \"bottom\", bottomScrollBarHeight);\n            // Scroll syncing: sync the scroll offsets of quadrants that may or may\n            // not have been around prior to this update.\n            _this.maybeSetQuadrantScrollOffset(QuadrantType.LEFT, \"scrollTop\");\n            _this.maybeSetQuadrantScrollOffset(QuadrantType.TOP, \"scrollLeft\");\n        };\n        _this.maybeSetQuadrantSizes = function (width, height) {\n            _this.maybesSetQuadrantSize(QuadrantType.LEFT, \"width\", width);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP, \"height\", height);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"width\", width);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"height\", height);\n        };\n        _this.maybesSetQuadrantSize = function (quadrantType, dimension, value) {\n            var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n            if (quadrant != null) {\n                quadrant.style[dimension] = value + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantPositionOffset = function (quadrantType, side, value) {\n            var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n            if (quadrant != null) {\n                quadrant.style[side] = value + \"px\";\n            }\n        };\n        _this.maybesSetQuadrantRowHeaderSizes = function (width) {\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.MAIN, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.LEFT, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP_LEFT, width);\n        };\n        _this.maybeSetQuadrantRowHeaderSize = function (quadrantType, width) {\n            var rowHeader = _this.quadrantRefs[quadrantType].rowHeader;\n            if (rowHeader != null) {\n                rowHeader.style.width = width + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantMenuElementSizes = function (width, height) {\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.MAIN, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.LEFT, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP_LEFT, width, height);\n        };\n        _this.maybeSetQuadrantMenuElementSize = function (quadrantType, width, height) {\n            var menu = _this.quadrantRefs[quadrantType].menu;\n            if (menu != null) {\n                menu.style.width = width + \"px\";\n                menu.style.height = height + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantScrollOffset = function (quadrantType, scrollKey, newOffset) {\n            var scrollContainer = _this.quadrantRefs[quadrantType].scrollContainer;\n            var scrollOffset = newOffset != null ? newOffset : _this.cache.getScrollOffset(scrollKey);\n            if (scrollContainer != null) {\n                scrollContainer[scrollKey] = scrollOffset;\n            }\n        };\n        _this.handleScrollOffsetChange = function (scrollKey, offset) {\n            _this.cache.setScrollOffset(scrollKey, offset);\n            var dependentQuadrantType = scrollKey === \"scrollLeft\" ? QuadrantType.TOP : QuadrantType.LEFT;\n            _this.maybeSetQuadrantScrollOffset(dependentQuadrantType, scrollKey);\n        };\n        // callbacks trigger too frequently unless we throttle scroll and wheel\n        // events. declare these functions on the component instance since\n        // they're stateful.\n        _this.throttledHandleMainQuadrantScroll = CoreUtils.throttleReactEventCallback(_this.handleMainQuadrantScroll);\n        _this.throttledHandleWheel = CoreUtils.throttleReactEventCallback(_this.handleWheel);\n        _this.cache = new TableQuadrantStackCache();\n        return _this;\n        var _a, _b;\n    }\n    /**\n     * Scroll the main quadrant to the specified scroll offset, keeping all other quadrants in sync.\n     */\n    TableQuadrantStack.prototype.scrollToPosition = function (scrollLeft, scrollTop) {\n        var scrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n        this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n        // this will trigger the main quadrant's scroll callback below\n        scrollContainer.scrollLeft = scrollLeft;\n        scrollContainer.scrollTop = scrollTop;\n        this.syncQuadrantViews();\n    };\n    /**\n     * Synchronizes quadrant sizes and scroll offsets based on the current\n     * column, row, and header sizes. Useful for correcting quadrant sizes after\n     * explicitly resizing columns and rows, for instance.\n     *\n     * Invoking this method imperatively is cheaper than providing columnWidths\n     * or rowHeights array props to TableQuadrantStack and forcing it to run\n     * expensive array diffs upon every update.\n     */\n    TableQuadrantStack.prototype.synchronizeQuadrantViews = function () {\n        this.syncQuadrantViews();\n    };\n    TableQuadrantStack.prototype.componentDidMount = function () {\n        this.emitRefs();\n        this.syncQuadrantViews();\n    };\n    TableQuadrantStack.prototype.componentDidUpdate = function (prevProps) {\n        // sync'ing quadrant views triggers expensive reflows, so we only call\n        // it when layout-affecting props change.\n        if (!CoreUtils.shallowCompareKeys(this.props, prevProps, { include: SYNC_TRIGGER_PROP_KEYS })) {\n            this.emitRefs();\n            this.syncQuadrantViews();\n        }\n    };\n    TableQuadrantStack.prototype.render = function () {\n        var _a = this.props, grid = _a.grid, enableRowHeader = _a.enableRowHeader, bodyRenderer = _a.bodyRenderer, throttleScrolling = _a.throttleScrolling;\n        // use the more generic \"scroll\" event for the main quadrant to capture\n        // *both* scrollbar interactions and trackpad/mousewheel gestures.\n        var onMainQuadrantScroll = throttleScrolling\n            ? this.throttledHandleMainQuadrantScroll\n            : this.handleMainQuadrantScroll;\n        var onWheel = throttleScrolling ? this.throttledHandleWheel : this.handleWheel;\n        var baseProps = {\n            bodyRenderer: bodyRenderer,\n            enableRowHeader: enableRowHeader,\n            grid: grid,\n            onWheel: onWheel,\n        };\n        var shouldRenderLeftQuadrants = this.shouldRenderLeftQuadrants();\n        var maybeLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.LEFT].quadrant, quadrantType: QuadrantType.LEFT, columnHeaderCellRenderer: this.renderLeftQuadrantColumnHeader, menuRenderer: this.renderLeftQuadrantMenu, rowHeaderCellRenderer: this.renderLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.LEFT].scrollContainer }))) : (undefined);\n        var maybeTopLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].quadrant, quadrantType: QuadrantType.TOP_LEFT, columnHeaderCellRenderer: this.renderTopLeftQuadrantColumnHeader, menuRenderer: this.renderTopLeftQuadrantMenu, rowHeaderCellRenderer: this.renderTopLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].scrollContainer }))) : (undefined);\n        return (React.createElement(\"div\", { className: Classes.TABLE_QUADRANT_STACK },\n            React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { bodyRef: this.props.bodyRef, onScroll: onMainQuadrantScroll, quadrantRef: this.quadrantRefHandlers[QuadrantType.MAIN].quadrant, quadrantType: QuadrantType.MAIN, columnHeaderCellRenderer: this.renderMainQuadrantColumnHeader, menuRenderer: this.renderMainQuadrantMenu, rowHeaderCellRenderer: this.renderMainQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.MAIN].scrollContainer })),\n            React.createElement(TableQuadrant, tslib_1.__assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP].quadrant, quadrantType: QuadrantType.TOP, columnHeaderCellRenderer: this.renderTopQuadrantColumnHeader, menuRenderer: this.renderTopQuadrantMenu, rowHeaderCellRenderer: this.renderTopQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP].scrollContainer })),\n            maybeLeftQuadrant,\n            maybeTopLeftQuadrant));\n    };\n    // Ref handlers\n    // ============\n    TableQuadrantStack.prototype.generateQuadrantRefHandlers = function (quadrantType) {\n        var _this = this;\n        var reducer = function (agg, key) {\n            agg[key] = function (ref) { return (_this.quadrantRefs[quadrantType][key] = ref); };\n            return agg;\n        };\n        return [\"columnHeader\", \"menu\", \"quadrant\", \"rowHeader\", \"scrollContainer\"].reduce(reducer, {});\n    };\n    // Emitters\n    // ========\n    TableQuadrantStack.prototype.emitRefs = function () {\n        CoreUtils.safeInvoke(this.props.quadrantRef, this.quadrantRefs[QuadrantType.MAIN].quadrant);\n        CoreUtils.safeInvoke(this.props.rowHeaderRef, this.quadrantRefs[QuadrantType.MAIN].rowHeader);\n        CoreUtils.safeInvoke(this.props.columnHeaderRef, this.quadrantRefs[QuadrantType.MAIN].columnHeader);\n        CoreUtils.safeInvoke(this.props.scrollContainerRef, this.quadrantRefs[QuadrantType.MAIN].scrollContainer);\n    };\n    // this function is named 'update' instead of 'set', because a 'set'\n    // function typically takes the new value as a parameter. we avoid that to\n    // keep the isHorizontal logic tree contained within this function.\n    TableQuadrantStack.prototype.updateScrollContainerClientSize = function (isHorizontal) {\n        var mainScrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n        if (isHorizontal) {\n            this.cache.setScrollContainerClientWidth(mainScrollContainer.clientWidth);\n            return this.cache.getScrollContainerClientWidth();\n        }\n        else {\n            this.cache.setScrollContainerClientHeight(mainScrollContainer.clientHeight);\n            return this.cache.getScrollContainerClientHeight();\n        }\n    };\n    TableQuadrantStack.prototype.maybeIncreaseToDefaultColumnHeaderHeight = function (height) {\n        return height <= QUADRANT_MIN_SIZE ? DEFAULT_COLUMN_HEADER_HEIGHT : height;\n    };\n    // Helpers\n    // =======\n    /**\n     * Returns the width or height of *only the grid* in the secondary quadrants\n     * (TOP, LEFT, TOP_LEFT), based on the number of frozen rows and columns.\n     */\n    TableQuadrantStack.prototype.getSecondaryQuadrantGridSize = function (dimension) {\n        var _a = this.props, grid = _a.grid, numFrozenColumns = _a.numFrozenColumns, numFrozenRows = _a.numFrozenRows;\n        var numFrozen = dimension === \"width\" ? numFrozenColumns : numFrozenRows;\n        var getterFn = dimension === \"width\" ? grid.getCumulativeWidthAt : grid.getCumulativeHeightAt;\n        // both getter functions do O(1) lookups.\n        return numFrozen > 0 ? getterFn(numFrozen - 1) : QUADRANT_MIN_SIZE;\n    };\n    /**\n     * Measures the desired width of the row header based on its tallest\n     * contents.\n     */\n    TableQuadrantStack.prototype.measureDesiredRowHeaderWidth = function () {\n        // the MAIN row header serves as the source of truth\n        var mainRowHeader = this.quadrantRefs[QuadrantType.MAIN].rowHeader;\n        if (mainRowHeader == null) {\n            return 0;\n        }\n        else {\n            // (alas, we must force a reflow to measure the row header's \"desired\" width)\n            mainRowHeader.style.width = \"auto\";\n            var desiredRowHeaderWidth = mainRowHeader.clientWidth;\n            return desiredRowHeaderWidth;\n        }\n    };\n    /**\n     * Measures the desired height of the column header based on its tallest\n     * contents.\n     */\n    TableQuadrantStack.prototype.measureDesiredColumnHeaderHeight = function () {\n        // unlike the row headers, the column headers are in a display-flex\n        // layout and are not actually bound by any fixed `height` that we set,\n        // so they'll grow freely to their necessary size. makes measuring easy!\n        var mainColumnHeader = this.quadrantRefs[QuadrantType.MAIN].columnHeader;\n        return mainColumnHeader == null ? 0 : mainColumnHeader.clientHeight;\n    };\n    TableQuadrantStack.prototype.shouldRenderLeftQuadrants = function (props) {\n        if (props === void 0) { props = this.props; }\n        var enableRowHeader = props.enableRowHeader, numFrozenColumns = props.numFrozenColumns;\n        return enableRowHeader || (numFrozenColumns != null && numFrozenColumns > 0);\n    };\n    // Resizing\n    TableQuadrantStack.prototype.adjustVerticalGuides = function (verticalGuides, quadrantType) {\n        var isFrozenQuadrant = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n        var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollLeft\");\n        var rowHeaderWidth = this.cache.getRowHeaderWidth();\n        var adjustedVerticalGuides = verticalGuides != null\n            ? verticalGuides.map(function (verticalGuide) { return verticalGuide - scrollAmount + rowHeaderWidth; })\n            : verticalGuides;\n        return adjustedVerticalGuides;\n    };\n    TableQuadrantStack.prototype.adjustHorizontalGuides = function (horizontalGuides, quadrantType) {\n        var isFrozenQuadrant = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n        var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollTop\");\n        var columnHeaderHeight = this.cache.getColumnHeaderHeight();\n        var adjustedHorizontalGuides = horizontalGuides != null\n            ? horizontalGuides.map(function (horizontalGuide) { return horizontalGuide - scrollAmount + columnHeaderHeight; })\n            : horizontalGuides;\n        return adjustedHorizontalGuides;\n    };\n    // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n    // declaring that and other required props here.\n    TableQuadrantStack.defaultProps = {\n        enableColumnInteractionBar: undefined,\n        enableRowHeader: true,\n        isHorizontalScrollDisabled: false,\n        isVerticalScrollDisabled: false,\n        throttleScrolling: true,\n        viewSyncDelay: DEFAULT_VIEW_SYNC_DELAY,\n    };\n    return TableQuadrantStack;\n}(AbstractComponent));\nexport { TableQuadrantStack };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nvar TableQuadrantStackCache = /** @class */ (function () {\n    function TableQuadrantStackCache() {\n        this.reset();\n    }\n    TableQuadrantStackCache.prototype.reset = function () {\n        this.cachedRowHeaderWidth = 0;\n        this.cachedColumnHeaderHeight = 0;\n        this.cachedScrollLeft = 0;\n        this.cachedScrollTop = 0;\n    };\n    // Getters\n    // =======\n    TableQuadrantStackCache.prototype.getScrollOffset = function (scrollKey) {\n        return scrollKey === \"scrollLeft\" ? this.cachedScrollLeft : this.cachedScrollTop;\n    };\n    TableQuadrantStackCache.prototype.getRowHeaderWidth = function () {\n        return this.cachedRowHeaderWidth;\n    };\n    TableQuadrantStackCache.prototype.getColumnHeaderHeight = function () {\n        return this.cachedColumnHeaderHeight;\n    };\n    TableQuadrantStackCache.prototype.getScrollContainerClientWidth = function () {\n        return this.cachedScrollContainerClientWidth;\n    };\n    TableQuadrantStackCache.prototype.getScrollContainerClientHeight = function () {\n        return this.cachedScrollContainerClientHeight;\n    };\n    // Setters\n    // =======\n    TableQuadrantStackCache.prototype.setColumnHeaderHeight = function (height) {\n        this.cachedColumnHeaderHeight = height;\n    };\n    TableQuadrantStackCache.prototype.setRowHeaderWidth = function (width) {\n        this.cachedRowHeaderWidth = width;\n    };\n    TableQuadrantStackCache.prototype.setScrollOffset = function (scrollKey, offset) {\n        if (scrollKey === \"scrollLeft\") {\n            this.cachedScrollLeft = offset;\n        }\n        else {\n            this.cachedScrollTop = offset;\n        }\n    };\n    TableQuadrantStackCache.prototype.setScrollContainerClientWidth = function (clientWidth) {\n        this.cachedScrollContainerClientWidth = clientWidth;\n    };\n    TableQuadrantStackCache.prototype.setScrollContainerClientHeight = function (clientHeight) {\n        this.cachedScrollContainerClientHeight = clientHeight;\n    };\n    return TableQuadrantStackCache;\n}());\nexport { TableQuadrantStackCache };\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as Classes from \"./common/classes\";\nimport { Utils } from \"./common/utils\";\n/**\n * `Region`s contain sets of cells. Additionally, a distinction is drawn, for\n * example, between all cells within a column and the whole column itself.\n * The `RegionCardinality` enum represents these distinct types of `Region`s.\n */\nexport var RegionCardinality;\n(function (RegionCardinality) {\n    /**\n     * A region that contains a finite rectangular group of table cells\n     */\n    RegionCardinality[\"CELLS\"] = \"cells\";\n    /**\n     * A region that represents all cells within 1 or more rows.\n     */\n    RegionCardinality[\"FULL_ROWS\"] = \"full-rows\";\n    /**\n     * A region that represents all cells within 1 or more columns.\n     */\n    RegionCardinality[\"FULL_COLUMNS\"] = \"full-columns\";\n    /**\n     * A region that represents all cells in the table.\n     */\n    RegionCardinality[\"FULL_TABLE\"] = \"full-table\";\n})(RegionCardinality || (RegionCardinality = {}));\n/**\n * A convenience object for subsets of `RegionCardinality` that are commonly\n * used as the `selectionMode` prop of the `<Table>`.\n */\nexport var SelectionModes = {\n    ALL: [\n        RegionCardinality.FULL_TABLE,\n        RegionCardinality.FULL_COLUMNS,\n        RegionCardinality.FULL_ROWS,\n        RegionCardinality.CELLS,\n    ],\n    COLUMNS_AND_CELLS: [RegionCardinality.FULL_COLUMNS, RegionCardinality.CELLS],\n    COLUMNS_ONLY: [RegionCardinality.FULL_COLUMNS],\n    NONE: [],\n    ROWS_AND_CELLS: [RegionCardinality.FULL_ROWS, RegionCardinality.CELLS],\n    ROWS_ONLY: [RegionCardinality.FULL_ROWS],\n};\nexport var ColumnLoadingOption;\n(function (ColumnLoadingOption) {\n    ColumnLoadingOption[\"CELLS\"] = \"cells\";\n    ColumnLoadingOption[\"HEADER\"] = \"column-header\";\n})(ColumnLoadingOption || (ColumnLoadingOption = {}));\nexport var RowLoadingOption;\n(function (RowLoadingOption) {\n    RowLoadingOption[\"CELLS\"] = \"cells\";\n    RowLoadingOption[\"HEADER\"] = \"row-header\";\n})(RowLoadingOption || (RowLoadingOption = {}));\nexport var TableLoadingOption;\n(function (TableLoadingOption) {\n    TableLoadingOption[\"CELLS\"] = \"cells\";\n    TableLoadingOption[\"COLUMN_HEADERS\"] = \"column-header\";\n    TableLoadingOption[\"ROW_HEADERS\"] = \"row-header\";\n})(TableLoadingOption || (TableLoadingOption = {}));\nvar Regions = /** @class */ (function () {\n    function Regions() {\n    }\n    /**\n     * Determines the cardinality of a region. We use null values to indicate\n     * an unbounded interval. Therefore, an example of a region containing the\n     * second and third columns would be:\n     *\n     * ```js\n     * { rows: null, cols: [1, 2] }\n     * ```\n     *\n     * In this case, this method would return `RegionCardinality.FULL_COLUMNS`.\n     *\n     * If both rows and columns are unbounded, then the region covers the\n     * entire table. Therefore, a region like this:\n     *\n     * ```js\n     * { rows: null, cols: null }\n     * ```\n     *\n     * will return `RegionCardinality.FULL_TABLE`.\n     *\n     * An example of a region containing a single cell in the table would be:\n     *\n     * ```js\n     * { rows: [5, 5], cols: [2, 2] }\n     * ```\n     *\n     * In this case, this method would return `RegionCardinality.CELLS`.\n     */\n    Regions.getRegionCardinality = function (region) {\n        if (region.cols != null && region.rows != null) {\n            return RegionCardinality.CELLS;\n        }\n        else if (region.cols != null) {\n            return RegionCardinality.FULL_COLUMNS;\n        }\n        else if (region.rows != null) {\n            return RegionCardinality.FULL_ROWS;\n        }\n        else {\n            return RegionCardinality.FULL_TABLE;\n        }\n    };\n    Regions.getFocusCellCoordinatesFromRegion = function (region) {\n        var regionCardinality = Regions.getRegionCardinality(region);\n        switch (regionCardinality) {\n            case RegionCardinality.FULL_TABLE:\n                return { col: 0, row: 0 };\n            case RegionCardinality.FULL_COLUMNS:\n                return { col: region.cols[0], row: 0 };\n            case RegionCardinality.FULL_ROWS:\n                return { col: 0, row: region.rows[0] };\n            case RegionCardinality.CELLS:\n                return { col: region.cols[0], row: region.rows[0] };\n            default:\n                return null;\n        }\n    };\n    /**\n     * Returns a deep copy of the provided region.\n     */\n    Regions.copy = function (region) {\n        var cardinality = Regions.getRegionCardinality(region);\n        // we need to be careful not to explicitly spell out `rows: undefined`\n        // (e.g.) if the \"rows\" key is completely absent, otherwise\n        // deep-equality checks will fail.\n        if (cardinality === RegionCardinality.CELLS) {\n            return Regions.cell(region.rows[0], region.cols[0], region.rows[1], region.cols[1]);\n        }\n        else if (cardinality === RegionCardinality.FULL_COLUMNS) {\n            return Regions.column(region.cols[0], region.cols[1]);\n        }\n        else if (cardinality === RegionCardinality.FULL_ROWS) {\n            return Regions.row(region.rows[0], region.rows[1]);\n        }\n        else {\n            return Regions.table();\n        }\n    };\n    /**\n     * Returns a region containing one or more cells.\n     */\n    Regions.cell = function (row, col, row2, col2) {\n        return {\n            cols: this.normalizeInterval(col, col2),\n            rows: this.normalizeInterval(row, row2),\n        };\n    };\n    /**\n     * Returns a region containing one or more full rows.\n     */\n    Regions.row = function (row, row2) {\n        return { rows: this.normalizeInterval(row, row2) };\n    };\n    /**\n     * Returns a region containing one or more full columns.\n     */\n    Regions.column = function (col, col2) {\n        return { cols: this.normalizeInterval(col, col2) };\n    };\n    /**\n     * Returns a region containing the entire table.\n     */\n    Regions.table = function () {\n        return {};\n    };\n    /**\n     * Adds the region to the end of a cloned copy of the supplied region\n     * array.\n     */\n    Regions.add = function (regions, region) {\n        var copy = regions.slice();\n        copy.push(region);\n        return copy;\n    };\n    /**\n     * Replaces the region at the end of a cloned copy of the supplied region\n     * array, or at the specific index if one is provided.\n     */\n    Regions.update = function (regions, region, index) {\n        var copy = regions.slice();\n        if (index != null) {\n            copy.splice(index, 1, region);\n        }\n        else {\n            copy.pop();\n            copy.push(region);\n        }\n        return copy;\n    };\n    /**\n     * Clamps the region's start and end indices between 0 and the provided\n     * maximum values.\n     */\n    Regions.clampRegion = function (region, maxRowIndex, maxColumnIndex) {\n        var nextRegion = Regions.copy(region);\n        if (region.rows != null) {\n            nextRegion.rows[0] = Utils.clamp(region.rows[0], 0, maxRowIndex);\n            nextRegion.rows[1] = Utils.clamp(region.rows[1], 0, maxRowIndex);\n        }\n        if (region.cols != null) {\n            nextRegion.cols[0] = Utils.clamp(region.cols[0], 0, maxColumnIndex);\n            nextRegion.cols[1] = Utils.clamp(region.cols[1], 0, maxColumnIndex);\n        }\n        return nextRegion;\n    };\n    /**\n     * Returns true iff the specified region is equal to the last region in\n     * the region list. This allows us to avoid immediate additive re-selection.\n     */\n    Regions.lastRegionIsEqual = function (regions, region) {\n        if (regions == null || regions.length === 0) {\n            return false;\n        }\n        var lastRegion = regions[regions.length - 1];\n        return Regions.regionsEqual(lastRegion, region);\n    };\n    /**\n     * Returns the index of the region that is equal to the supplied\n     * parameter. Returns -1 if no such region is found.\n     */\n    Regions.findMatchingRegion = function (regions, region) {\n        if (regions == null) {\n            return -1;\n        }\n        for (var i = 0; i < regions.length; i++) {\n            if (Regions.regionsEqual(regions[i], region)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Returns the index of the region that wholly contains the supplied\n     * parameter. Returns -1 if no such region is found.\n     */\n    Regions.findContainingRegion = function (regions, region) {\n        if (regions == null) {\n            return -1;\n        }\n        for (var i = 0; i < regions.length; i++) {\n            if (Regions.regionContains(regions[i], region)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Returns true if the regions contain a region that has FULL_COLUMNS\n     * cardinality and contains the specified column index.\n     */\n    Regions.hasFullColumn = function (regions, col) {\n        if (regions == null) {\n            return false;\n        }\n        for (var _i = 0, regions_1 = regions; _i < regions_1.length; _i++) {\n            var region = regions_1[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            if (cardinality === RegionCardinality.FULL_TABLE) {\n                return true;\n            }\n            if (cardinality === RegionCardinality.FULL_COLUMNS && Regions.intervalContainsIndex(region.cols, col)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns true if the regions contain a region that has FULL_ROWS\n     * cardinality and contains the specified row index.\n     */\n    Regions.hasFullRow = function (regions, row) {\n        if (regions == null) {\n            return false;\n        }\n        for (var _i = 0, regions_2 = regions; _i < regions_2.length; _i++) {\n            var region = regions_2[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            if (cardinality === RegionCardinality.FULL_TABLE) {\n                return true;\n            }\n            if (cardinality === RegionCardinality.FULL_ROWS && Regions.intervalContainsIndex(region.rows, row)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns true if the regions contain a region that has FULL_TABLE cardinality\n     */\n    Regions.hasFullTable = function (regions) {\n        if (regions == null) {\n            return false;\n        }\n        for (var _i = 0, regions_3 = regions; _i < regions_3.length; _i++) {\n            var region = regions_3[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            if (cardinality === RegionCardinality.FULL_TABLE) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns true if the regions fully contain the query region.\n     */\n    Regions.containsRegion = function (regions, query) {\n        return Regions.overlapsRegion(regions, query, false);\n    };\n    /**\n     * Returns true if the regions at least partially overlap the query region.\n     */\n    Regions.overlapsRegion = function (regions, query, allowPartialOverlap) {\n        if (allowPartialOverlap === void 0) { allowPartialOverlap = false; }\n        var intervalCompareFn = allowPartialOverlap ? Regions.intervalOverlaps : Regions.intervalContains;\n        if (regions == null || query == null) {\n            return false;\n        }\n        for (var _i = 0, regions_4 = regions; _i < regions_4.length; _i++) {\n            var region = regions_4[_i];\n            var cardinality = Regions.getRegionCardinality(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    return true;\n                case RegionCardinality.FULL_COLUMNS:\n                    if (intervalCompareFn(region.cols, query.cols)) {\n                        return true;\n                    }\n                    continue;\n                case RegionCardinality.FULL_ROWS:\n                    if (intervalCompareFn(region.rows, query.rows)) {\n                        return true;\n                    }\n                    continue;\n                case RegionCardinality.CELLS:\n                    if (intervalCompareFn(region.cols, query.cols) && intervalCompareFn(region.rows, query.rows)) {\n                        return true;\n                    }\n                    continue;\n                default:\n                    break;\n            }\n        }\n        return false;\n    };\n    Regions.eachUniqueFullColumn = function (regions, iteratee) {\n        if (regions == null || regions.length === 0 || iteratee == null) {\n            return;\n        }\n        var seen = {};\n        regions.forEach(function (region) {\n            if (Regions.getRegionCardinality(region) === RegionCardinality.FULL_COLUMNS) {\n                var _a = region.cols, start = _a[0], end = _a[1];\n                for (var col = start; col <= end; col++) {\n                    if (!seen[col]) {\n                        seen[col] = true;\n                        iteratee(col);\n                    }\n                }\n            }\n        });\n    };\n    Regions.eachUniqueFullRow = function (regions, iteratee) {\n        if (regions == null || regions.length === 0 || iteratee == null) {\n            return;\n        }\n        var seen = {};\n        regions.forEach(function (region) {\n            if (Regions.getRegionCardinality(region) === RegionCardinality.FULL_ROWS) {\n                var _a = region.rows, start = _a[0], end = _a[1];\n                for (var row = start; row <= end; row++) {\n                    if (!seen[row]) {\n                        seen[row] = true;\n                        iteratee(row);\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Using the supplied array of non-contiguous `IRegion`s, this method\n     * returns an ordered array of every unique cell that exists in those\n     * regions.\n     */\n    Regions.enumerateUniqueCells = function (regions, numRows, numCols) {\n        if (regions == null || regions.length === 0) {\n            return [];\n        }\n        var seen = {};\n        var list = [];\n        for (var _i = 0, regions_5 = regions; _i < regions_5.length; _i++) {\n            var region = regions_5[_i];\n            Regions.eachCellInRegion(region, numRows, numCols, function (row, col) {\n                // add to list if not seen\n                var key = row + \"-\" + col;\n                if (seen[key] !== true) {\n                    seen[key] = true;\n                    list.push([row, col]);\n                }\n            });\n        }\n        // sort list by rows then columns\n        list.sort(Regions.rowFirstComparator);\n        return list;\n    };\n    /**\n     * Using the supplied region, returns an \"equivalent\" region of\n     * type CELLS that define the bounds of the given region\n     */\n    Regions.getCellRegionFromRegion = function (region, numRows, numCols) {\n        var regionCardinality = Regions.getRegionCardinality(region);\n        switch (regionCardinality) {\n            case RegionCardinality.FULL_TABLE:\n                return Regions.cell(0, 0, numRows - 1, numCols - 1);\n            case RegionCardinality.FULL_COLUMNS:\n                return Regions.cell(0, region.cols[0], numRows - 1, region.cols[1]);\n            case RegionCardinality.FULL_ROWS:\n                return Regions.cell(region.rows[0], 0, region.rows[1], numCols - 1);\n            case RegionCardinality.CELLS:\n                return Regions.cell(region.rows[0], region.cols[0], region.rows[1], region.cols[1]);\n            default:\n                return null;\n        }\n    };\n    /**\n     * Maps a dense array of cell coordinates to a sparse 2-dimensional array\n     * of cell values.\n     *\n     * We create a new 2-dimensional array representing the smallest single\n     * contiguous `IRegion` that contains all cells in the supplied array. We\n     * invoke the mapper callback only on the cells in the supplied coordinate\n     * array and store the result. Returns the resulting 2-dimensional array.\n     */\n    Regions.sparseMapCells = function (cells, mapper) {\n        var bounds = Regions.getBoundingRegion(cells);\n        if (bounds == null) {\n            return null;\n        }\n        var numRows = bounds.rows[1] + 1 - bounds.rows[0];\n        var numCols = bounds.cols[1] + 1 - bounds.cols[0];\n        var result = Utils.times(numRows, function () { return new Array(numCols); });\n        cells.forEach(function (_a) {\n            var row = _a[0], col = _a[1];\n            result[row - bounds.rows[0]][col - bounds.cols[0]] = mapper(row, col);\n        });\n        return result;\n    };\n    /**\n     * Returns the smallest single contiguous `IRegion` that contains all cells in the\n     * supplied array.\n     */\n    Regions.getBoundingRegion = function (cells) {\n        var minRow;\n        var maxRow;\n        var minCol;\n        var maxCol;\n        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n            var _a = cells_1[_i], row = _a[0], col = _a[1];\n            minRow = minRow == null || row < minRow ? row : minRow;\n            maxRow = maxRow == null || row > maxRow ? row : maxRow;\n            minCol = minCol == null || col < minCol ? col : minCol;\n            maxCol = maxCol == null || col > maxCol ? col : maxCol;\n        }\n        if (minRow == null) {\n            return null;\n        }\n        return {\n            cols: [minCol, maxCol],\n            rows: [minRow, maxRow],\n        };\n    };\n    Regions.isValid = function (region) {\n        if (region == null) {\n            return false;\n        }\n        if (region.rows != null && (region.rows[0] < 0 || region.rows[1] < 0)) {\n            return false;\n        }\n        if (region.cols != null && (region.cols[0] < 0 || region.cols[1] < 0)) {\n            return false;\n        }\n        return true;\n    };\n    Regions.isRegionValidForTable = function (region, numRows, numCols) {\n        if (numRows === 0 || numCols === 0) {\n            return false;\n        }\n        else if (region.rows != null && !intervalInRangeInclusive(region.rows, 0, numRows - 1)) {\n            return false;\n        }\n        else if (region.cols != null && !intervalInRangeInclusive(region.cols, 0, numCols - 1)) {\n            return false;\n        }\n        return true;\n    };\n    Regions.joinStyledRegionGroups = function (selectedRegions, otherRegions, focusedCell) {\n        var regionGroups = [];\n        if (otherRegions != null) {\n            regionGroups = regionGroups.concat(otherRegions);\n        }\n        if (selectedRegions != null && selectedRegions.length > 0) {\n            regionGroups.push({\n                className: Classes.TABLE_SELECTION_REGION,\n                regions: selectedRegions,\n            });\n        }\n        if (focusedCell != null) {\n            regionGroups.push({\n                className: Classes.TABLE_FOCUS_REGION,\n                regions: [Regions.cell(focusedCell.row, focusedCell.col)],\n            });\n        }\n        return regionGroups;\n    };\n    Regions.regionsEqual = function (regionA, regionB) {\n        return Regions.intervalsEqual(regionA.rows, regionB.rows) && Regions.intervalsEqual(regionA.cols, regionB.cols);\n    };\n    /**\n     * Expands an old region to the minimal bounding region that also contains\n     * the new region. If the regions have different cardinalities, then the new\n     * region is returned. Useful for expanding a selected region on\n     * shift+click, for instance.\n     */\n    Regions.expandRegion = function (oldRegion, newRegion) {\n        var oldRegionCardinality = Regions.getRegionCardinality(oldRegion);\n        var newRegionCardinality = Regions.getRegionCardinality(newRegion);\n        if (newRegionCardinality !== oldRegionCardinality) {\n            return newRegion;\n        }\n        switch (newRegionCardinality) {\n            case RegionCardinality.FULL_ROWS: {\n                var rowStart = Math.min(oldRegion.rows[0], newRegion.rows[0]);\n                var rowEnd = Math.max(oldRegion.rows[1], newRegion.rows[1]);\n                return Regions.row(rowStart, rowEnd);\n            }\n            case RegionCardinality.FULL_COLUMNS: {\n                var colStart = Math.min(oldRegion.cols[0], newRegion.cols[0]);\n                var colEnd = Math.max(oldRegion.cols[1], newRegion.cols[1]);\n                return Regions.column(colStart, colEnd);\n            }\n            case RegionCardinality.CELLS: {\n                var rowStart = Math.min(oldRegion.rows[0], newRegion.rows[0]);\n                var colStart = Math.min(oldRegion.cols[0], newRegion.cols[0]);\n                var rowEnd = Math.max(oldRegion.rows[1], newRegion.rows[1]);\n                var colEnd = Math.max(oldRegion.cols[1], newRegion.cols[1]);\n                return Regions.cell(rowStart, colStart, rowEnd, colEnd);\n            }\n            default:\n                return Regions.table();\n        }\n    };\n    /**\n     * Iterates over the cells within an `IRegion`, invoking the callback with\n     * each cell's coordinates.\n     */\n    Regions.eachCellInRegion = function (region, numRows, numCols, iteratee) {\n        var cardinality = Regions.getRegionCardinality(region);\n        switch (cardinality) {\n            case RegionCardinality.FULL_TABLE:\n                for (var row = 0; row < numRows; row++) {\n                    for (var col = 0; col < numCols; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            case RegionCardinality.FULL_COLUMNS:\n                for (var row = 0; row < numRows; row++) {\n                    for (var col = region.cols[0]; col <= region.cols[1]; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            case RegionCardinality.FULL_ROWS:\n                for (var row = region.rows[0]; row <= region.rows[1]; row++) {\n                    for (var col = 0; col < numCols; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            case RegionCardinality.CELLS:\n                for (var row = region.rows[0]; row <= region.rows[1]; row++) {\n                    for (var col = region.cols[0]; col <= region.cols[1]; col++) {\n                        iteratee(row, col);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    };\n    Regions.regionContains = function (regionA, regionB) {\n        // containsRegion expects an array of regions as the first param\n        return Regions.overlapsRegion([regionA], regionB, false);\n    };\n    Regions.intervalsEqual = function (ivalA, ivalB) {\n        if (ivalA == null) {\n            return ivalB == null;\n        }\n        else if (ivalB == null) {\n            return false;\n        }\n        else {\n            return ivalA[0] === ivalB[0] && ivalA[1] === ivalB[1];\n        }\n    };\n    Regions.intervalContainsIndex = function (interval, index) {\n        if (interval == null) {\n            return false;\n        }\n        return interval[0] <= index && interval[1] >= index;\n    };\n    Regions.intervalContains = function (ivalA, ivalB) {\n        if (ivalA == null || ivalB == null) {\n            return false;\n        }\n        return ivalA[0] <= ivalB[0] && ivalB[1] <= ivalA[1];\n    };\n    Regions.intervalOverlaps = function (ivalA, ivalB) {\n        if (ivalA == null || ivalB == null) {\n            return false;\n        }\n        if (ivalA[1] < ivalB[0] || ivalA[0] > ivalB[1]) {\n            return false;\n        }\n        return true;\n    };\n    Regions.rowFirstComparator = function (a, b) {\n        var rowDiff = a[0] - b[0];\n        return rowDiff === 0 ? a[1] - b[1] : rowDiff;\n    };\n    Regions.numericalComparator = function (a, b) {\n        return a - b;\n    };\n    Regions.normalizeInterval = function (coord, coord2) {\n        if (coord2 == null) {\n            coord2 = coord;\n        }\n        var interval = [coord, coord2];\n        interval.sort(Regions.numericalComparator);\n        return interval;\n    };\n    return Regions;\n}());\nexport { Regions };\nfunction intervalInRangeInclusive(interval, minInclusive, maxInclusive) {\n    return (inRangeInclusive(interval[0], minInclusive, maxInclusive) &&\n        inRangeInclusive(interval[1], minInclusive, maxInclusive));\n}\nfunction inRangeInclusive(value, minInclusive, maxInclusive) {\n    return value >= minInclusive && value <= maxInclusive;\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractComponent, Hotkey, Hotkeys, HotkeysTarget, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Column } from \"./column\";\nimport * as Classes from \"./common/classes\";\nimport { Clipboard } from \"./common/clipboard\";\nimport { columnInteractionBarContextTypes } from \"./common/context\";\nimport { Direction } from \"./common/direction\";\nimport * as Errors from \"./common/errors\";\nimport { Grid } from \"./common/grid\";\nimport * as FocusedCellUtils from \"./common/internal/focusedCellUtils\";\nimport * as ScrollUtils from \"./common/internal/scrollUtils\";\nimport * as SelectionUtils from \"./common/internal/selectionUtils\";\nimport { Rect } from \"./common/rect\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { Utils } from \"./common/utils\";\nimport { ColumnHeader } from \"./headers/columnHeader\";\nimport { ColumnHeaderCell } from \"./headers/columnHeaderCell\";\nimport { renderDefaultRowHeader, RowHeader } from \"./headers/rowHeader\";\nimport { ResizeSensor } from \"./interactions/resizeSensor\";\nimport { GuideLayer } from \"./layers/guides\";\nimport { RegionLayer } from \"./layers/regions\";\nimport { Locator } from \"./locator\";\nimport { QuadrantType } from \"./quadrants/tableQuadrant\";\nimport { TableQuadrantStack } from \"./quadrants/tableQuadrantStack\";\nimport { ColumnLoadingOption, RegionCardinality, Regions, SelectionModes, TableLoadingOption, } from \"./regions\";\nimport { TableBody } from \"./tableBody\";\nvar Table = /** @class */ (function (_super) {\n    tslib_1.__extends(Table, _super);\n    function Table(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.refHandlers = {\n            cellContainer: function (ref) { return (_this.cellContainerElement = ref); },\n            columnHeader: function (ref) { return (_this.columnHeaderElement = ref); },\n            mainQuadrant: function (ref) { return (_this.mainQuadrantElement = ref); },\n            quadrantStack: function (ref) { return (_this.quadrantStackInstance = ref); },\n            rootTable: function (ref) { return (_this.rootTableElement = ref); },\n            rowHeader: function (ref) { return (_this.rowHeaderElement = ref); },\n            scrollContainer: function (ref) { return (_this.scrollContainerElement = ref); },\n        };\n        // when true, we'll need to imperatively synchronize quadrant views after\n        // the update. this variable lets us avoid expensively diff'ing columnWidths\n        // and rowHeights in <TableQuadrantStack> on each update.\n        _this.didUpdateColumnOrRowSizes = false;\n        // this value is set to `true` when all cells finish mounting for the first\n        // time. it serves as a signal that we can switch to batch rendering.\n        _this.didCompletelyMount = false;\n        // Selection resize\n        // ----------------\n        _this.handleSelectionResizeUp = function (e) { return _this.handleSelectionResize(e, Direction.UP); };\n        _this.handleSelectionResizeDown = function (e) { return _this.handleSelectionResize(e, Direction.DOWN); };\n        _this.handleSelectionResizeLeft = function (e) { return _this.handleSelectionResize(e, Direction.LEFT); };\n        _this.handleSelectionResizeRight = function (e) { return _this.handleSelectionResize(e, Direction.RIGHT); };\n        _this.handleSelectionResize = function (e, direction) {\n            e.preventDefault();\n            e.stopPropagation();\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions;\n            if (selectedRegions.length === 0) {\n                return;\n            }\n            var index = FocusedCellUtils.getFocusedOrLastSelectedIndex(selectedRegions, focusedCell);\n            var region = selectedRegions[index];\n            var nextRegion = SelectionUtils.resizeRegion(region, direction, focusedCell);\n            _this.updateSelectedRegionAtIndex(nextRegion, index);\n        };\n        _this.handleCopy = function (e) {\n            var _a = _this.props, getCellClipboardData = _a.getCellClipboardData, onCopy = _a.onCopy;\n            var selectedRegions = _this.state.selectedRegions;\n            if (getCellClipboardData == null) {\n                return;\n            }\n            // prevent \"real\" copy from being called\n            e.preventDefault();\n            e.stopPropagation();\n            var cells = Regions.enumerateUniqueCells(selectedRegions, _this.grid.numRows, _this.grid.numCols);\n            var sparse = Regions.sparseMapCells(cells, getCellClipboardData);\n            if (sparse != null) {\n                var success = Clipboard.copyCells(sparse);\n                CoreUtils.safeInvoke(onCopy, success);\n            }\n        };\n        _this.renderMenu = function (refHandler) {\n            var classes = classNames(Classes.TABLE_MENU, (_a = {},\n                _a[Classes.TABLE_SELECTION_ENABLED] = _this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE),\n                _a));\n            return (React.createElement(\"div\", { className: classes, ref: refHandler, onMouseDown: _this.handleMenuMouseDown }, _this.maybeRenderRegions(_this.styleMenuRegion)));\n            var _a;\n        };\n        _this.handleMenuMouseDown = function (e) {\n            // the shift+click interaction expands the region from the focused cell.\n            // thus, if shift is pressed we shouldn't move the focused cell.\n            _this.selectAll(!e.shiftKey);\n        };\n        _this.selectAll = function (shouldUpdateFocusedCell) {\n            var selectionHandler = _this.getEnabledSelectionHandler(RegionCardinality.FULL_TABLE);\n            // clicking on upper left hand corner sets selection to \"all\"\n            // regardless of current selection state (clicking twice does not deselect table)\n            selectionHandler([Regions.table()]);\n            if (shouldUpdateFocusedCell) {\n                var newFocusedCellCoordinates = Regions.getFocusCellCoordinatesFromRegion(Regions.table());\n                _this.handleFocus(FocusedCellUtils.toFullCoordinates(newFocusedCellCoordinates));\n            }\n        };\n        _this.handleSelectAllHotkey = function (e) {\n            // prevent \"real\" select all from happening as well\n            e.preventDefault();\n            e.stopPropagation();\n            // selecting-all via the keyboard should not move the focused cell.\n            _this.selectAll(false);\n        };\n        _this.columnHeaderCellRenderer = function (columnIndex) {\n            var props = _this.getColumnProps(columnIndex);\n            var id = props.id, loadingOptions = props.loadingOptions, cellRenderer = props.cellRenderer, columnHeaderCellRenderer = props.columnHeaderCellRenderer, spreadableProps = tslib_1.__rest(props, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\"]);\n            var columnLoading = _this.hasLoadingOption(loadingOptions, ColumnLoadingOption.HEADER);\n            if (columnHeaderCellRenderer != null) {\n                var columnHeaderCell = columnHeaderCellRenderer(columnIndex);\n                var columnHeaderCellLoading = columnHeaderCell.props.loading;\n                var columnHeaderCellProps = {\n                    loading: columnHeaderCellLoading != null ? columnHeaderCellLoading : columnLoading,\n                };\n                return React.cloneElement(columnHeaderCell, columnHeaderCellProps);\n            }\n            var baseProps = tslib_1.__assign({ index: columnIndex, loading: columnLoading }, spreadableProps);\n            if (props.name != null) {\n                return React.createElement(ColumnHeaderCell, tslib_1.__assign({}, baseProps));\n            }\n            else {\n                return React.createElement(ColumnHeaderCell, tslib_1.__assign({}, baseProps, { name: Utils.toBase26Alpha(columnIndex) }));\n            }\n        };\n        _this.renderColumnHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly) {\n            if (showFrozenColumnsOnly === void 0) { showFrozenColumnsOnly = false; }\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions, viewportRect = _a.viewportRect;\n            var _b = _this.props, enableMultipleSelection = _b.enableMultipleSelection, enableGhostCells = _b.enableGhostCells, enableColumnReordering = _b.enableColumnReordering, enableColumnResizing = _b.enableColumnResizing, loadingOptions = _b.loadingOptions, maxColumnWidth = _b.maxColumnWidth, minColumnWidth = _b.minColumnWidth, selectedRegionTransform = _b.selectedRegionTransform;\n            var classes = classNames(Classes.TABLE_COLUMN_HEADERS, (_c = {},\n                _c[Classes.TABLE_SELECTION_ENABLED] = _this.isSelectionModeEnabled(RegionCardinality.FULL_COLUMNS),\n                _c));\n            var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n            var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart;\n            var columnIndexEnd = showFrozenColumnsOnly ? _this.getMaxFrozenColumnIndex() : columnIndices.columnIndexEnd;\n            return (React.createElement(\"div\", { className: classes },\n                React.createElement(ColumnHeader, { enableMultipleSelection: enableMultipleSelection, cellRenderer: _this.columnHeaderCellRenderer, focusedCell: focusedCell, grid: _this.grid, isReorderable: enableColumnReordering, isResizable: enableColumnResizing, loading: _this.hasLoadingOption(loadingOptions, TableLoadingOption.COLUMN_HEADERS), locator: _this.locator, maxColumnWidth: maxColumnWidth, measurableElementRef: refHandler, minColumnWidth: minColumnWidth, onColumnWidthChanged: _this.handleColumnWidthChanged, onFocusedCell: _this.handleFocus, onLayoutLock: _this.handleLayoutLock, onReordered: _this.handleColumnsReordered, onReordering: reorderingHandler, onResizeGuide: resizeHandler, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_COLUMNS), selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, columnIndexStart: columnIndexStart, columnIndexEnd: columnIndexEnd }, _this.props.children),\n                _this.maybeRenderRegions(_this.styleColumnHeaderRegion)));\n            var _c;\n        };\n        _this.renderRowHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly) {\n            if (showFrozenRowsOnly === void 0) { showFrozenRowsOnly = false; }\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions, viewportRect = _a.viewportRect;\n            var _b = _this.props, enableMultipleSelection = _b.enableMultipleSelection, enableGhostCells = _b.enableGhostCells, enableRowReordering = _b.enableRowReordering, enableRowResizing = _b.enableRowResizing, loadingOptions = _b.loadingOptions, maxRowHeight = _b.maxRowHeight, minRowHeight = _b.minRowHeight, rowHeaderCellRenderer = _b.rowHeaderCellRenderer, selectedRegionTransform = _b.selectedRegionTransform;\n            var classes = classNames(Classes.TABLE_ROW_HEADERS, (_c = {},\n                _c[Classes.TABLE_SELECTION_ENABLED] = _this.isSelectionModeEnabled(RegionCardinality.FULL_ROWS),\n                _c));\n            var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n            var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart;\n            var rowIndexEnd = showFrozenRowsOnly ? _this.getMaxFrozenRowIndex() : rowIndices.rowIndexEnd;\n            return (React.createElement(\"div\", { className: classes, ref: refHandler },\n                React.createElement(RowHeader, { enableMultipleSelection: enableMultipleSelection, focusedCell: focusedCell, grid: _this.grid, locator: _this.locator, isReorderable: enableRowReordering, isResizable: enableRowResizing, loading: _this.hasLoadingOption(loadingOptions, TableLoadingOption.ROW_HEADERS), maxRowHeight: maxRowHeight, minRowHeight: minRowHeight, onFocusedCell: _this.handleFocus, onLayoutLock: _this.handleLayoutLock, onResizeGuide: resizeHandler, onReordered: _this.handleRowsReordered, onReordering: reorderingHandler, onRowHeightChanged: _this.handleRowHeightChanged, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_ROWS), rowHeaderCellRenderer: rowHeaderCellRenderer, selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, rowIndexStart: rowIndexStart, rowIndexEnd: rowIndexEnd }),\n                _this.maybeRenderRegions(_this.styleRowHeaderRegion)));\n            var _c;\n        };\n        _this.bodyCellRenderer = function (rowIndex, columnIndex) {\n            var _a = _this.getColumnProps(columnIndex), id = _a.id, loadingOptions = _a.loadingOptions, cellRenderer = _a.cellRenderer, columnHeaderCellRenderer = _a.columnHeaderCellRenderer, name = _a.name, nameRenderer = _a.nameRenderer, restColumnProps = tslib_1.__rest(_a, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\", \"name\", \"nameRenderer\"]);\n            var cell = cellRenderer(rowIndex, columnIndex);\n            var _b = cell.props.loading, loading = _b === void 0 ? _this.hasLoadingOption(loadingOptions, ColumnLoadingOption.CELLS) : _b;\n            var cellProps = tslib_1.__assign({}, restColumnProps, { loading: loading });\n            return React.cloneElement(cell, cellProps);\n        };\n        _this.renderBody = function (quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly) {\n            if (showFrozenRowsOnly === void 0) { showFrozenRowsOnly = false; }\n            if (showFrozenColumnsOnly === void 0) { showFrozenColumnsOnly = false; }\n            var _a = _this.state, focusedCell = _a.focusedCell, numFrozenColumns = _a.numFrozenColumnsClamped, numFrozenRows = _a.numFrozenRowsClamped, selectedRegions = _a.selectedRegions, viewportRect = _a.viewportRect;\n            var _b = _this.props, enableMultipleSelection = _b.enableMultipleSelection, enableGhostCells = _b.enableGhostCells, loadingOptions = _b.loadingOptions, bodyContextMenuRenderer = _b.bodyContextMenuRenderer, selectedRegionTransform = _b.selectedRegionTransform;\n            var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n            var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n            // start beyond the frozen area if rendering unrelated quadrants, so we\n            // don't render duplicate cells underneath the frozen ones.\n            var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart + numFrozenColumns;\n            var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart + numFrozenRows;\n            // if rendering frozen rows/columns, subtract one to convert to\n            // 0-indexing. if the 1-indexed value is 0, this sets the end index\n            // to -1, which avoids rendering absent frozen rows/columns at all.\n            var columnIndexEnd = showFrozenColumnsOnly ? numFrozenColumns - 1 : columnIndices.columnIndexEnd;\n            var rowIndexEnd = showFrozenRowsOnly ? numFrozenRows - 1 : rowIndices.rowIndexEnd;\n            // the main quadrant contains all cells in the table, so listen only to that quadrant\n            var onCompleteRender = quadrantType === QuadrantType.MAIN ? _this.handleCompleteRender : undefined;\n            return (React.createElement(\"div\", null,\n                React.createElement(TableBody, { enableMultipleSelection: enableMultipleSelection, cellRenderer: _this.bodyCellRenderer, focusedCell: focusedCell, grid: _this.grid, loading: _this.hasLoadingOption(loadingOptions, TableLoadingOption.CELLS), locator: _this.locator, onCompleteRender: onCompleteRender, onFocusedCell: _this.handleFocus, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.CELLS), bodyContextMenuRenderer: bodyContextMenuRenderer, renderMode: _this.getNormalizedRenderMode(), selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, viewportRect: viewportRect, columnIndexStart: columnIndexStart, columnIndexEnd: columnIndexEnd, rowIndexStart: rowIndexStart, rowIndexEnd: rowIndexEnd, numFrozenColumns: showFrozenColumnsOnly ? numFrozenColumns : undefined, numFrozenRows: showFrozenRowsOnly ? numFrozenRows : undefined }),\n                _this.maybeRenderRegions(_this.styleBodyRegion, quadrantType)));\n        };\n        _this.handleCompleteRender = function () {\n            // the first onCompleteRender is triggered before the viewportRect is\n            // defined and the second after the viewportRect has been set. the cells\n            // will only actually render once the viewportRect is defined though, so\n            // we defer invoking onCompleteRender until that check passes.\n            if (_this.state.viewportRect != null) {\n                CoreUtils.safeInvoke(_this.props.onCompleteRender);\n                _this.didCompletelyMount = true;\n            }\n        };\n        _this.handleFocusMoveLeft = function (e) { return _this.handleFocusMove(e, \"left\"); };\n        _this.handleFocusMoveLeftInternal = function (e) { return _this.handleFocusMoveInternal(e, \"left\"); };\n        _this.handleFocusMoveRight = function (e) { return _this.handleFocusMove(e, \"right\"); };\n        _this.handleFocusMoveRightInternal = function (e) { return _this.handleFocusMoveInternal(e, \"right\"); };\n        _this.handleFocusMoveUp = function (e) { return _this.handleFocusMove(e, \"up\"); };\n        _this.handleFocusMoveUpInternal = function (e) { return _this.handleFocusMoveInternal(e, \"up\"); };\n        _this.handleFocusMoveDown = function (e) { return _this.handleFocusMove(e, \"down\"); };\n        _this.handleFocusMoveDownInternal = function (e) { return _this.handleFocusMoveInternal(e, \"down\"); };\n        _this.styleBodyRegion = function (region, quadrantType) {\n            var numFrozenColumns = _this.props.numFrozenColumns;\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            // ensure we're not showing borders at the boundary of the frozen-columns area\n            var canHideRightBorder = (quadrantType === QuadrantType.TOP_LEFT || quadrantType === QuadrantType.LEFT) &&\n                numFrozenColumns != null &&\n                numFrozenColumns > 0;\n            var fixedHeight = _this.grid.getHeight();\n            var fixedWidth = _this.grid.getWidth();\n            // include a correction in some cases to hide borders along quadrant boundaries\n            var alignmentCorrection = 1;\n            var alignmentCorrectionString = \"-\" + alignmentCorrection + \"px\";\n            switch (cardinality) {\n                case RegionCardinality.CELLS:\n                    return style;\n                case RegionCardinality.FULL_COLUMNS:\n                    style.top = alignmentCorrectionString;\n                    style.height = fixedHeight + alignmentCorrection;\n                    return style;\n                case RegionCardinality.FULL_ROWS:\n                    style.left = alignmentCorrectionString;\n                    style.width = fixedWidth + alignmentCorrection;\n                    if (canHideRightBorder) {\n                        style.right = alignmentCorrectionString;\n                    }\n                    return style;\n                case RegionCardinality.FULL_TABLE:\n                    style.left = alignmentCorrectionString;\n                    style.top = alignmentCorrectionString;\n                    style.width = fixedWidth + alignmentCorrection;\n                    style.height = fixedHeight + alignmentCorrection;\n                    if (canHideRightBorder) {\n                        style.right = alignmentCorrectionString;\n                    }\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleMenuRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.right = \"0px\";\n                    style.bottom = \"0px\";\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.borderBottom = \"none\";\n                    style.borderRight = \"none\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleColumnHeaderRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.left = \"-1px\";\n                    style.borderLeft = \"none\";\n                    style.bottom = \"-1px\";\n                    return style;\n                case RegionCardinality.FULL_COLUMNS:\n                    style.bottom = \"-1px\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleRowHeaderRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.top = \"-1px\";\n                    style.borderTop = \"none\";\n                    style.right = \"-1px\";\n                    return style;\n                case RegionCardinality.FULL_ROWS:\n                    style.right = \"-1px\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.handleColumnWidthChanged = function (columnIndex, width) {\n            var selectedRegions = _this.state.selectedRegions;\n            var columnWidths = _this.state.columnWidths.slice();\n            if (Regions.hasFullTable(selectedRegions)) {\n                for (var col = 0; col < columnWidths.length; col++) {\n                    columnWidths[col] = width;\n                }\n            }\n            if (Regions.hasFullColumn(selectedRegions, columnIndex)) {\n                Regions.eachUniqueFullColumn(selectedRegions, function (col) {\n                    columnWidths[col] = width;\n                });\n            }\n            else {\n                columnWidths[columnIndex] = width;\n            }\n            _this.invalidateGrid();\n            _this.didUpdateColumnOrRowSizes = true;\n            _this.setState({ columnWidths: columnWidths });\n            var onColumnWidthChanged = _this.props.onColumnWidthChanged;\n            if (onColumnWidthChanged != null) {\n                onColumnWidthChanged(columnIndex, width);\n            }\n        };\n        _this.handleRowHeightChanged = function (rowIndex, height) {\n            var selectedRegions = _this.state.selectedRegions;\n            var rowHeights = _this.state.rowHeights.slice();\n            if (Regions.hasFullTable(selectedRegions)) {\n                for (var row = 0; row < rowHeights.length; row++) {\n                    rowHeights[row] = height;\n                }\n            }\n            if (Regions.hasFullRow(selectedRegions, rowIndex)) {\n                Regions.eachUniqueFullRow(selectedRegions, function (row) {\n                    rowHeights[row] = height;\n                });\n            }\n            else {\n                rowHeights[rowIndex] = height;\n            }\n            _this.invalidateGrid();\n            _this.didUpdateColumnOrRowSizes = true;\n            _this.setState({ rowHeights: rowHeights });\n            var onRowHeightChanged = _this.props.onRowHeightChanged;\n            if (onRowHeightChanged != null) {\n                onRowHeightChanged(rowIndex, height);\n            }\n        };\n        _this.handleRootScroll = function (_event) {\n            // Bug #211 - Native browser text selection events can cause the root\n            // element to scroll even though it has a overflow:hidden style. The\n            // only viable solution to this is to unscroll the element after the\n            // browser scrolls it.\n            if (_this.rootTableElement != null) {\n                _this.rootTableElement.scrollLeft = 0;\n                _this.rootTableElement.scrollTop = 0;\n            }\n        };\n        _this.handleBodyScroll = function (event) {\n            // Prevent the event from propagating to avoid a resize event on the\n            // resize sensor.\n            event.stopPropagation();\n            if (_this.locator != null && !_this.state.isLayoutLocked) {\n                var viewportRect = _this.locator.getViewportRect();\n                _this.updateViewportRect(viewportRect);\n            }\n        };\n        _this.clearSelection = function (_selectedRegions) {\n            _this.handleSelection([]);\n        };\n        // no good way to call arrow-key keyboard events from tests\n        /* istanbul ignore next */\n        _this.handleFocusMove = function (e, direction) {\n            e.preventDefault();\n            e.stopPropagation();\n            var focusedCell = _this.state.focusedCell;\n            if (focusedCell == null) {\n                // halt early if we have a selectedRegionTransform or something else in play that nixes\n                // the focused cell.\n                return;\n            }\n            var newFocusedCell = { col: focusedCell.col, row: focusedCell.row, focusSelectionIndex: 0 };\n            switch (direction) {\n                case \"up\":\n                    newFocusedCell.row -= 1;\n                    break;\n                case \"down\":\n                    newFocusedCell.row += 1;\n                    break;\n                case \"left\":\n                    newFocusedCell.col -= 1;\n                    break;\n                case \"right\":\n                    newFocusedCell.col += 1;\n                    break;\n                default:\n                    break;\n            }\n            if (newFocusedCell.row < 0 ||\n                newFocusedCell.row >= _this.grid.numRows ||\n                newFocusedCell.col < 0 ||\n                newFocusedCell.col >= _this.grid.numCols) {\n                return;\n            }\n            // change selection to match new focus cell location\n            var newSelectionRegions = [Regions.cell(newFocusedCell.row, newFocusedCell.col)];\n            _this.handleSelection(newSelectionRegions);\n            _this.handleFocus(newFocusedCell);\n            // keep the focused cell in view\n            _this.scrollBodyToFocusedCell(newFocusedCell);\n        };\n        // no good way to call arrow-key keyboard events from tests\n        /* istanbul ignore next */\n        _this.handleFocusMoveInternal = function (e, direction) {\n            e.preventDefault();\n            e.stopPropagation();\n            var _a = _this.state, focusedCell = _a.focusedCell, selectedRegions = _a.selectedRegions;\n            if (focusedCell == null) {\n                // halt early if we have a selectedRegionTransform or something else in play that nixes\n                // the focused cell.\n                return;\n            }\n            var newFocusedCell = {\n                col: focusedCell.col,\n                focusSelectionIndex: focusedCell.focusSelectionIndex,\n                row: focusedCell.row,\n            };\n            // if we're not in any particular focus cell region, and one exists, go to the first cell of the first one\n            if (focusedCell.focusSelectionIndex == null && selectedRegions.length > 0) {\n                var focusCellRegion = Regions.getCellRegionFromRegion(selectedRegions[0], _this.grid.numRows, _this.grid.numCols);\n                newFocusedCell = {\n                    col: focusCellRegion.cols[0],\n                    focusSelectionIndex: 0,\n                    row: focusCellRegion.rows[0],\n                };\n            }\n            else {\n                if (selectedRegions.length === 0) {\n                    _this.handleFocusMove(e, direction);\n                    return;\n                }\n                var focusCellRegion = Regions.getCellRegionFromRegion(selectedRegions[focusedCell.focusSelectionIndex], _this.grid.numRows, _this.grid.numCols);\n                if (focusCellRegion.cols[0] === focusCellRegion.cols[1] &&\n                    focusCellRegion.rows[0] === focusCellRegion.rows[1] &&\n                    selectedRegions.length === 1) {\n                    _this.handleFocusMove(e, direction);\n                    return;\n                }\n                switch (direction) {\n                    case \"up\":\n                        newFocusedCell = _this.moveFocusCell(\"row\", \"col\", true, newFocusedCell, focusCellRegion);\n                        break;\n                    case \"left\":\n                        newFocusedCell = _this.moveFocusCell(\"col\", \"row\", true, newFocusedCell, focusCellRegion);\n                        break;\n                    case \"down\":\n                        newFocusedCell = _this.moveFocusCell(\"row\", \"col\", false, newFocusedCell, focusCellRegion);\n                        break;\n                    case \"right\":\n                        newFocusedCell = _this.moveFocusCell(\"col\", \"row\", false, newFocusedCell, focusCellRegion);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (newFocusedCell.row < 0 ||\n                newFocusedCell.row >= _this.grid.numRows ||\n                newFocusedCell.col < 0 ||\n                newFocusedCell.col >= _this.grid.numCols) {\n                return;\n            }\n            _this.handleFocus(newFocusedCell);\n            // keep the focused cell in view\n            _this.scrollBodyToFocusedCell(newFocusedCell);\n        };\n        _this.scrollBodyToFocusedCell = function (focusedCell) {\n            var row = focusedCell.row, col = focusedCell.col;\n            var viewportRect = _this.state.viewportRect;\n            // sort keys in normal CSS position order (per the trusty TRBL/\"trouble\" acronym)\n            // tslint:disable:object-literal-sort-keys\n            var viewportBounds = {\n                top: viewportRect.top,\n                right: viewportRect.left + viewportRect.width,\n                bottom: viewportRect.top + viewportRect.height,\n                left: viewportRect.left,\n            };\n            var focusedCellBounds = {\n                top: _this.grid.getCumulativeHeightBefore(row),\n                right: _this.grid.getCumulativeWidthAt(col),\n                bottom: _this.grid.getCumulativeHeightAt(row),\n                left: _this.grid.getCumulativeWidthBefore(col),\n            };\n            // tslint:enable:object-literal-sort-keys\n            var focusedCellWidth = focusedCellBounds.right - focusedCellBounds.left;\n            var focusedCellHeight = focusedCellBounds.bottom - focusedCellBounds.top;\n            var isFocusedCellWiderThanViewport = focusedCellWidth > viewportRect.width;\n            var isFocusedCellTallerThanViewport = focusedCellHeight > viewportRect.height;\n            var nextScrollTop = viewportRect.top;\n            var nextScrollLeft = viewportRect.left;\n            // keep the top end of an overly tall focused cell in view when moving left and right\n            // (without this OR check, the body seesaws to fit the top end, then the bottom end, etc.)\n            if (focusedCellBounds.top < viewportBounds.top || isFocusedCellTallerThanViewport) {\n                // scroll up (minus one pixel to avoid clipping the focused-cell border)\n                nextScrollTop = Math.max(0, focusedCellBounds.top - 1);\n            }\n            else if (focusedCellBounds.bottom > viewportBounds.bottom) {\n                // scroll down\n                var scrollDelta = focusedCellBounds.bottom - viewportBounds.bottom;\n                nextScrollTop = viewportBounds.top + scrollDelta;\n            }\n            // keep the left end of an overly wide focused cell in view when moving up and down\n            if (focusedCellBounds.left < viewportBounds.left || isFocusedCellWiderThanViewport) {\n                // scroll left (again minus one additional pixel)\n                nextScrollLeft = Math.max(0, focusedCellBounds.left - 1);\n            }\n            else if (focusedCellBounds.right > viewportBounds.right) {\n                // scroll right\n                var scrollDelta = focusedCellBounds.right - viewportBounds.right;\n                nextScrollLeft = viewportBounds.left + scrollDelta;\n            }\n            _this.syncViewportPosition(nextScrollLeft, nextScrollTop);\n        };\n        _this.handleFocus = function (focusedCell) {\n            if (!_this.props.enableFocusedCell) {\n                // don't set focus state if focus is not allowed\n                return;\n            }\n            // only set focused cell state if not specified in props\n            if (_this.props.focusedCell == null) {\n                _this.setState({ focusedCell: focusedCell });\n            }\n            CoreUtils.safeInvoke(_this.props.onFocusedCell, focusedCell);\n        };\n        _this.handleSelection = function (selectedRegions) {\n            // only set selectedRegions state if not specified in props\n            if (_this.props.selectedRegions == null) {\n                _this.setState({ selectedRegions: selectedRegions });\n            }\n            var onSelection = _this.props.onSelection;\n            if (onSelection != null) {\n                onSelection(selectedRegions);\n            }\n        };\n        _this.handleColumnsReordering = function (verticalGuides) {\n            _this.setState({ isReordering: true, verticalGuides: verticalGuides });\n        };\n        _this.handleColumnsReordered = function (oldIndex, newIndex, length) {\n            _this.setState({ isReordering: false, verticalGuides: undefined });\n            CoreUtils.safeInvoke(_this.props.onColumnsReordered, oldIndex, newIndex, length);\n        };\n        _this.handleRowsReordering = function (horizontalGuides) {\n            _this.setState({ isReordering: true, horizontalGuides: horizontalGuides });\n        };\n        _this.handleRowsReordered = function (oldIndex, newIndex, length) {\n            _this.setState({ isReordering: false, horizontalGuides: undefined });\n            CoreUtils.safeInvoke(_this.props.onRowsReordered, oldIndex, newIndex, length);\n        };\n        _this.handleLayoutLock = function (isLayoutLocked) {\n            if (isLayoutLocked === void 0) { isLayoutLocked = false; }\n            _this.setState({ isLayoutLocked: isLayoutLocked });\n        };\n        _this.hasLoadingOption = function (loadingOptions, loadingOption) {\n            if (loadingOptions == null) {\n                return undefined;\n            }\n            return loadingOptions.indexOf(loadingOption) >= 0;\n        };\n        _this.updateViewportRect = function (nextViewportRect) {\n            var viewportRect = _this.state.viewportRect;\n            _this.setState({ viewportRect: nextViewportRect });\n            var didViewportChange = (viewportRect != null && !viewportRect.equals(nextViewportRect)) ||\n                (viewportRect == null && nextViewportRect != null);\n            if (didViewportChange) {\n                _this.invokeOnVisibleCellsChangeCallback(nextViewportRect);\n            }\n        };\n        _this.getMaxFrozenColumnIndex = function () {\n            var numFrozenColumns = _this.state.numFrozenColumnsClamped;\n            return numFrozenColumns != null ? numFrozenColumns - 1 : undefined;\n        };\n        _this.getMaxFrozenRowIndex = function () {\n            var numFrozenRows = _this.state.numFrozenRowsClamped;\n            return numFrozenRows != null ? numFrozenRows - 1 : undefined;\n        };\n        _this.handleColumnResizeGuide = function (verticalGuides) {\n            _this.setState({ verticalGuides: verticalGuides });\n        };\n        _this.handleRowResizeGuide = function (horizontalGuides) {\n            _this.setState({ horizontalGuides: horizontalGuides });\n        };\n        var _a = _this.props, children = _a.children, columnWidths = _a.columnWidths, defaultRowHeight = _a.defaultRowHeight, defaultColumnWidth = _a.defaultColumnWidth, numRows = _a.numRows, rowHeights = _a.rowHeights;\n        _this.childrenArray = React.Children.toArray(children);\n        _this.columnIdToIndex = Table_1.createColumnIdIndex(_this.childrenArray);\n        // Create height/width arrays using the lengths from props and\n        // children, the default values from props, and finally any sparse\n        // arrays passed into props.\n        var newColumnWidths = _this.childrenArray.map(function () { return defaultColumnWidth; });\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        var newRowHeights = Utils.times(numRows, function () { return defaultRowHeight; });\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n        var selectedRegions = props.selectedRegions == null ? [] : props.selectedRegions;\n        var focusedCell = FocusedCellUtils.getInitialFocusedCell(props.enableFocusedCell, props.focusedCell, undefined, selectedRegions);\n        _this.state = {\n            columnWidths: newColumnWidths,\n            focusedCell: focusedCell,\n            isLayoutLocked: false,\n            isReordering: false,\n            numFrozenColumnsClamped: clampNumFrozenColumns(props),\n            numFrozenRowsClamped: clampNumFrozenRows(props),\n            rowHeights: newRowHeights,\n            selectedRegions: selectedRegions,\n        };\n        return _this;\n    }\n    Table_1 = Table;\n    Table.createColumnIdIndex = function (children) {\n        var columnIdToIndex = {};\n        for (var i = 0; i < children.length; i++) {\n            var key = children[i].props.id;\n            if (key != null) {\n                columnIdToIndex[String(key)] = i;\n            }\n        }\n        return columnIdToIndex;\n    };\n    // Instance methods\n    // ================\n    /**\n     * __Experimental!__ Resizes all rows in the table to the approximate\n     * maximum height of wrapped cell content in each row. Works best when each\n     * cell contains plain text of a consistent font style (though font style\n     * may vary between cells). Since this function uses approximate\n     * measurements, results may not be perfect.\n     *\n     * Approximation parameters can be configured for the entire table or on a\n     * per-cell basis. Default values are fine-tuned to work well with default\n     * Table font styles.\n     */\n    Table.prototype.resizeRowsByApproximateHeight = function (getCellText, options) {\n        var numRows = this.props.numRows;\n        var columnWidths = this.state.columnWidths;\n        var numColumns = columnWidths.length;\n        var rowHeights = [];\n        for (var rowIndex = 0; rowIndex < numRows; rowIndex++) {\n            var maxCellHeightInRow = 0;\n            // iterate through each cell in the row\n            for (var columnIndex = 0; columnIndex < numColumns; columnIndex++) {\n                // resolve all parameters to raw values\n                var _a = this.resolveResizeRowsByApproximateHeightOptions(options, rowIndex, columnIndex), approxCharWidth = _a.getApproximateCharWidth, approxLineHeight = _a.getApproximateLineHeight, horizontalPadding = _a.getCellHorizontalPadding, numBufferLines = _a.getNumBufferLines;\n                var cellText = getCellText(rowIndex, columnIndex);\n                var approxCellHeight = Utils.getApproxCellHeight(cellText, columnWidths[columnIndex], approxCharWidth, approxLineHeight, horizontalPadding, numBufferLines);\n                if (approxCellHeight > maxCellHeightInRow) {\n                    maxCellHeightInRow = approxCellHeight;\n                }\n            }\n            rowHeights.push(maxCellHeightInRow);\n        }\n        this.invalidateGrid();\n        this.didUpdateColumnOrRowSizes = true;\n        this.setState({ rowHeights: rowHeights });\n    };\n    /**\n     * Resize all rows in the table to the height of the tallest visible cell in the specified columns.\n     * If no indices are provided, default to using the tallest visible cell from all columns in view.\n     */\n    Table.prototype.resizeRowsByTallestCell = function (columnIndices) {\n        var _this = this;\n        var tallest = 0;\n        if (columnIndices == null) {\n            // Consider all columns currently in viewport\n            var viewportColumnIndices = this.grid.getColumnIndicesInRect(this.state.viewportRect);\n            for (var col = viewportColumnIndices.columnIndexStart; col <= viewportColumnIndices.columnIndexEnd; col++) {\n                tallest = Math.max(tallest, this.locator.getTallestVisibleCellInColumn(col));\n            }\n        }\n        else {\n            var columnIndicesArray = Array.isArray(columnIndices) ? columnIndices : [columnIndices];\n            var tallestByColumns = columnIndicesArray.map(function (col) { return _this.locator.getTallestVisibleCellInColumn(col); });\n            tallest = Math.max.apply(Math, tallestByColumns);\n        }\n        var rowHeights = Array(this.state.rowHeights.length).fill(tallest);\n        this.invalidateGrid();\n        this.didUpdateColumnOrRowSizes = true;\n        this.setState({ rowHeights: rowHeights });\n    };\n    /**\n     * Scrolls the table to the target region in a fashion appropriate to the target region's\n     * cardinality:\n     *\n     * - CELLS: Scroll the top-left cell in the target region to the top-left corner of the viewport.\n     * - FULL_ROWS: Scroll the top-most row in the target region to the top of the viewport.\n     * - FULL_COLUMNS: Scroll the left-most column in the target region to the left side of the viewport.\n     * - FULL_TABLE: Scroll the top-left cell in the table to the top-left corner of the viewport.\n     *\n     * If there are active frozen rows and/or columns, the target region will be positioned in the\n     * top-left corner of the non-frozen area (unless the target region itself is in the frozen\n     * area).\n     *\n     * If the target region is close to the bottom-right corner of the table, this function will\n     * simply scroll the target region as close to the top-left as possible until the bottom-right\n     * corner is reached.\n     */\n    Table.prototype.scrollToRegion = function (region) {\n        var _a = this.state, numFrozenColumns = _a.numFrozenColumnsClamped, numFrozenRows = _a.numFrozenRowsClamped;\n        var _b = this.state.viewportRect, currScrollLeft = _b.left, currScrollTop = _b.top;\n        var _c = ScrollUtils.getScrollPositionForRegion(region, currScrollLeft, currScrollTop, this.grid.getCumulativeWidthBefore, this.grid.getCumulativeHeightBefore, numFrozenRows, numFrozenColumns), scrollLeft = _c.scrollLeft, scrollTop = _c.scrollTop;\n        var correctedScrollLeft = this.shouldDisableHorizontalScroll() ? 0 : scrollLeft;\n        var correctedScrollTop = this.shouldDisableVerticalScroll() ? 0 : scrollTop;\n        // defer to the quadrant stack to keep all quadrant positions in sync\n        this.quadrantStackInstance.scrollToPosition(correctedScrollLeft, correctedScrollTop);\n    };\n    // React lifecycle\n    // ===============\n    Table.prototype.getChildContext = function () {\n        return {\n            enableColumnInteractionBar: this.props.enableColumnInteractionBar,\n        };\n    };\n    Table.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var propKeysBlacklist = { exclude: Table_1.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST };\n        var stateKeysBlacklist = { exclude: Table_1.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST };\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, propKeysBlacklist) ||\n            !CoreUtils.shallowCompareKeys(this.state, nextState, stateKeysBlacklist) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, Table_1.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST) ||\n            !CoreUtils.deepCompareKeys(this.state, nextState, Table_1.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST));\n    };\n    Table.prototype.componentWillReceiveProps = function (nextProps) {\n        var _this = this;\n        // calls validateProps\n        _super.prototype.componentWillReceiveProps.call(this, nextProps);\n        var children = nextProps.children, columnWidths = nextProps.columnWidths, defaultColumnWidth = nextProps.defaultColumnWidth, defaultRowHeight = nextProps.defaultRowHeight, enableFocusedCell = nextProps.enableFocusedCell, focusedCell = nextProps.focusedCell, numRows = nextProps.numRows, rowHeights = nextProps.rowHeights, selectedRegions = nextProps.selectedRegions, selectionModes = nextProps.selectionModes;\n        var newChildArray = React.Children.toArray(children);\n        var numCols = newChildArray.length;\n        // Try to maintain widths of columns by looking up the width of the\n        // column that had the same `ID` prop. If none is found, use the\n        // previous width at the same index.\n        var previousColumnWidths = newChildArray.map(function (child, index) {\n            var mappedIndex = _this.columnIdToIndex[child.props.id];\n            return _this.state.columnWidths[mappedIndex != null ? mappedIndex : index];\n        });\n        // Make sure the width/height arrays have the correct length, but keep\n        // as many existing widths/heights when possible. Also, apply the\n        // sparse width/heights from props.\n        var newColumnWidths = this.state.columnWidths;\n        newColumnWidths = Utils.arrayOfLength(newColumnWidths, numCols, defaultColumnWidth);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, previousColumnWidths);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        var newRowHeights = this.state.rowHeights;\n        newRowHeights = Utils.arrayOfLength(newRowHeights, numRows, defaultRowHeight);\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n        var newSelectedRegions = selectedRegions;\n        if (selectedRegions == null) {\n            // if we're in uncontrolled mode, filter out all selected regions that don't\n            // fit in the current new table dimensions\n            newSelectedRegions = this.state.selectedRegions.filter(function (region) {\n                var regionCardinality = Regions.getRegionCardinality(region);\n                return (_this.isSelectionModeEnabled(regionCardinality, selectionModes) &&\n                    Regions.isRegionValidForTable(region, numRows, numCols));\n            });\n        }\n        var newFocusedCell = FocusedCellUtils.getInitialFocusedCell(enableFocusedCell, focusedCell, this.state.focusedCell, newSelectedRegions);\n        this.childrenArray = newChildArray;\n        this.columnIdToIndex = Table_1.createColumnIdIndex(this.childrenArray);\n        this.invalidateGrid();\n        this.setState({\n            columnWidths: newColumnWidths,\n            focusedCell: newFocusedCell,\n            numFrozenColumnsClamped: clampNumFrozenColumns(nextProps),\n            numFrozenRowsClamped: clampNumFrozenRows(nextProps),\n            rowHeights: newRowHeights,\n            selectedRegions: newSelectedRegions,\n        });\n    };\n    Table.prototype.render = function () {\n        var _a = this.props, children = _a.children, className = _a.className, enableRowHeader = _a.enableRowHeader, loadingOptions = _a.loadingOptions, numRows = _a.numRows, enableColumnInteractionBar = _a.enableColumnInteractionBar;\n        var _b = this.state, horizontalGuides = _b.horizontalGuides, numFrozenColumnsClamped = _b.numFrozenColumnsClamped, numFrozenRowsClamped = _b.numFrozenRowsClamped, verticalGuides = _b.verticalGuides;\n        this.validateGrid();\n        var classes = classNames(Classes.TABLE_CONTAINER, (_c = {},\n            _c[Classes.TABLE_REORDERING] = this.state.isReordering,\n            _c[Classes.TABLE_NO_VERTICAL_SCROLL] = this.shouldDisableVerticalScroll(),\n            _c[Classes.TABLE_NO_HORIZONTAL_SCROLL] = this.shouldDisableHorizontalScroll(),\n            _c[Classes.TABLE_SELECTION_ENABLED] = this.isSelectionModeEnabled(RegionCardinality.CELLS),\n            _c[Classes.TABLE_NO_ROWS] = numRows === 0,\n            _c), className);\n        return (React.createElement(\"div\", { className: classes, ref: this.refHandlers.rootTable, onScroll: this.handleRootScroll },\n            React.createElement(TableQuadrantStack, { bodyRef: this.refHandlers.cellContainer, bodyRenderer: this.renderBody, columnHeaderCellRenderer: this.renderColumnHeader, columnHeaderRef: this.refHandlers.columnHeader, enableColumnInteractionBar: enableColumnInteractionBar, enableRowHeader: enableRowHeader, grid: this.grid, handleColumnResizeGuide: this.handleColumnResizeGuide, handleColumnsReordering: this.handleColumnsReordering, handleRowResizeGuide: this.handleRowResizeGuide, handleRowsReordering: this.handleRowsReordering, isHorizontalScrollDisabled: this.shouldDisableHorizontalScroll(), isVerticalScrollDisabled: this.shouldDisableVerticalScroll(), loadingOptions: loadingOptions, numColumns: React.Children.count(children), numFrozenColumns: numFrozenColumnsClamped, numFrozenRows: numFrozenRowsClamped, numRows: numRows, onScroll: this.handleBodyScroll, quadrantRef: this.refHandlers.mainQuadrant, ref: this.refHandlers.quadrantStack, menuRenderer: this.renderMenu, rowHeaderCellRenderer: this.renderRowHeader, rowHeaderRef: this.refHandlers.rowHeader, scrollContainerRef: this.refHandlers.scrollContainer }),\n            React.createElement(\"div\", { className: classNames(Classes.TABLE_OVERLAY_LAYER, Classes.TABLE_OVERLAY_REORDERING_CURSOR) }),\n            React.createElement(GuideLayer, { className: Classes.TABLE_RESIZE_GUIDES, verticalGuides: verticalGuides, horizontalGuides: horizontalGuides })));\n        var _c;\n    };\n    Table.prototype.renderHotkeys = function () {\n        var hotkeys = [\n            this.maybeRenderCopyHotkey(),\n            this.maybeRenderSelectAllHotkey(),\n            this.maybeRenderFocusHotkeys(),\n            this.maybeRenderSelectionResizeHotkeys(),\n        ];\n        return React.createElement(Hotkeys, null, hotkeys.filter(function (element) { return element !== undefined; }));\n    };\n    /**\n     * When the component mounts, the HTML Element refs will be available, so\n     * we constructor the Locator, which queries the elements' bounding\n     * ClientRects.\n     */\n    Table.prototype.componentDidMount = function () {\n        var _this = this;\n        this.validateGrid();\n        this.locator = new Locator(this.rootTableElement, this.scrollContainerElement, this.cellContainerElement);\n        this.updateLocator();\n        this.updateViewportRect(this.locator.getViewportRect());\n        this.resizeSensorDetach = ResizeSensor.attach(this.rootTableElement, function () {\n            if (!_this.state.isLayoutLocked) {\n                _this.updateViewportRect(_this.locator.getViewportRect());\n            }\n        });\n    };\n    Table.prototype.componentWillUnmount = function () {\n        if (this.resizeSensorDetach != null) {\n            this.resizeSensorDetach();\n            delete this.resizeSensorDetach;\n        }\n        this.didCompletelyMount = false;\n    };\n    Table.prototype.componentDidUpdate = function () {\n        if (this.locator != null) {\n            this.validateGrid();\n            this.updateLocator();\n        }\n        if (this.didUpdateColumnOrRowSizes) {\n            this.quadrantStackInstance.synchronizeQuadrantViews();\n            this.didUpdateColumnOrRowSizes = false;\n        }\n        this.maybeScrollTableIntoView();\n    };\n    Table.prototype.validateProps = function (props) {\n        var children = props.children, columnWidths = props.columnWidths, numFrozenColumns = props.numFrozenColumns, numFrozenRows = props.numFrozenRows, numRows = props.numRows, rowHeights = props.rowHeights;\n        var numColumns = React.Children.count(children);\n        // do cheap error-checking first.\n        if (numRows != null && numRows < 0) {\n            throw new Error(Errors.TABLE_NUM_ROWS_NEGATIVE);\n        }\n        if (numFrozenRows != null && numFrozenRows < 0) {\n            throw new Error(Errors.TABLE_NUM_FROZEN_ROWS_NEGATIVE);\n        }\n        if (numFrozenColumns != null && numFrozenColumns < 0) {\n            throw new Error(Errors.TABLE_NUM_FROZEN_COLUMNS_NEGATIVE);\n        }\n        if (numRows != null && rowHeights != null && rowHeights.length !== numRows) {\n            throw new Error(Errors.TABLE_NUM_ROWS_ROW_HEIGHTS_MISMATCH);\n        }\n        if (numColumns != null && columnWidths != null && columnWidths.length !== numColumns) {\n            throw new Error(Errors.TABLE_NUM_COLUMNS_COLUMN_WIDTHS_MISMATCH);\n        }\n        React.Children.forEach(children, function (child) {\n            // save as a variable so that union type narrowing works\n            var childType = child.type;\n            // the second part of this conditional will never be true, but it\n            // informs the TS compiler that we won't be invoking\n            // childType.prototype on a \"string\" element.\n            if (typeof child === \"string\" || typeof childType === \"string\") {\n                throw new Error(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n            }\n            else {\n                var isColumn = childType.prototype === Column.prototype || Column.prototype.isPrototypeOf(childType);\n                if (!isColumn) {\n                    throw new Error(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n                }\n            }\n        });\n        // these are recoverable scenarios, so just print a warning.\n        if (numFrozenRows != null && numRows != null && numFrozenRows > numRows) {\n            console.warn(Errors.TABLE_NUM_FROZEN_ROWS_BOUND_WARNING);\n        }\n        if (numFrozenColumns != null && numFrozenColumns > numColumns) {\n            console.warn(Errors.TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING);\n        }\n    };\n    // Hotkeys\n    // =======\n    Table.prototype.maybeRenderCopyHotkey = function () {\n        var getCellClipboardData = this.props.getCellClipboardData;\n        if (getCellClipboardData != null) {\n            return (React.createElement(Hotkey, { key: \"copy-hotkey\", label: \"Copy selected table cells\", group: \"Table\", combo: \"mod+c\", onKeyDown: this.handleCopy }));\n        }\n        else {\n            return undefined;\n        }\n    };\n    Table.prototype.maybeRenderSelectionResizeHotkeys = function () {\n        var _a = this.props, enableMultipleSelection = _a.enableMultipleSelection, selectionModes = _a.selectionModes;\n        var isSomeSelectionModeEnabled = selectionModes.length > 0;\n        if (enableMultipleSelection && isSomeSelectionModeEnabled) {\n            return [\n                React.createElement(Hotkey, { key: \"resize-selection-up\", label: \"Resize selection upward\", group: \"Table\", combo: \"shift+up\", onKeyDown: this.handleSelectionResizeUp }),\n                React.createElement(Hotkey, { key: \"resize-selection-down\", label: \"Resize selection downward\", group: \"Table\", combo: \"shift+down\", onKeyDown: this.handleSelectionResizeDown }),\n                React.createElement(Hotkey, { key: \"resize-selection-left\", label: \"Resize selection leftward\", group: \"Table\", combo: \"shift+left\", onKeyDown: this.handleSelectionResizeLeft }),\n                React.createElement(Hotkey, { key: \"resize-selection-right\", label: \"Resize selection rightward\", group: \"Table\", combo: \"shift+right\", onKeyDown: this.handleSelectionResizeRight }),\n            ];\n        }\n        else {\n            return undefined;\n        }\n    };\n    Table.prototype.maybeRenderFocusHotkeys = function () {\n        var enableFocusedCell = this.props.enableFocusedCell;\n        if (enableFocusedCell != null) {\n            return [\n                React.createElement(Hotkey, { key: \"move left\", label: \"Move focus cell left\", group: \"Table\", combo: \"left\", onKeyDown: this.handleFocusMoveLeft }),\n                React.createElement(Hotkey, { key: \"move right\", label: \"Move focus cell right\", group: \"Table\", combo: \"right\", onKeyDown: this.handleFocusMoveRight }),\n                React.createElement(Hotkey, { key: \"move up\", label: \"Move focus cell up\", group: \"Table\", combo: \"up\", onKeyDown: this.handleFocusMoveUp }),\n                React.createElement(Hotkey, { key: \"move down\", label: \"Move focus cell down\", group: \"Table\", combo: \"down\", onKeyDown: this.handleFocusMoveDown }),\n                React.createElement(Hotkey, { key: \"move tab\", label: \"Move focus cell tab\", group: \"Table\", combo: \"tab\", onKeyDown: this.handleFocusMoveRightInternal, allowInInput: true }),\n                React.createElement(Hotkey, { key: \"move shift-tab\", label: \"Move focus cell shift tab\", group: \"Table\", combo: \"shift+tab\", onKeyDown: this.handleFocusMoveLeftInternal, allowInInput: true }),\n                React.createElement(Hotkey, { key: \"move enter\", label: \"Move focus cell enter\", group: \"Table\", combo: \"enter\", onKeyDown: this.handleFocusMoveDownInternal, allowInInput: true }),\n                React.createElement(Hotkey, { key: \"move shift-enter\", label: \"Move focus cell shift enter\", group: \"Table\", combo: \"shift+enter\", onKeyDown: this.handleFocusMoveUpInternal, allowInInput: true }),\n            ];\n        }\n        else {\n            return [];\n        }\n    };\n    Table.prototype.maybeRenderSelectAllHotkey = function () {\n        if (this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE)) {\n            return (React.createElement(Hotkey, { key: \"select-all-hotkey\", label: \"Select all\", group: \"Table\", combo: \"mod+a\", onKeyDown: this.handleSelectAllHotkey }));\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Replaces the selected region at the specified array index, with the\n     * region provided.\n     */\n    Table.prototype.updateSelectedRegionAtIndex = function (region, index) {\n        var _a = this.props, children = _a.children, numRows = _a.numRows;\n        var selectedRegions = this.state.selectedRegions;\n        var numColumns = React.Children.count(children);\n        var maxRowIndex = Math.max(0, numRows - 1);\n        var maxColumnIndex = Math.max(0, numColumns - 1);\n        var clampedNextRegion = Regions.clampRegion(region, maxRowIndex, maxColumnIndex);\n        var nextSelectedRegions = Regions.update(selectedRegions, clampedNextRegion, index);\n        this.handleSelection(nextSelectedRegions);\n    };\n    // Quadrant refs\n    // =============\n    Table.prototype.moveFocusCell = function (primaryAxis, secondaryAxis, isUpOrLeft, newFocusedCell, focusCellRegion) {\n        var selectedRegions = this.state.selectedRegions;\n        var primaryAxisPlural = primaryAxis === \"row\" ? \"rows\" : \"cols\";\n        var secondaryAxisPlural = secondaryAxis === \"row\" ? \"rows\" : \"cols\";\n        var movementDirection = isUpOrLeft ? -1 : +1;\n        var regionIntervalIndex = isUpOrLeft ? 1 : 0;\n        // try moving the cell in the direction along the primary axis\n        newFocusedCell[primaryAxis] += movementDirection;\n        var isPrimaryIndexOutOfBounds = isUpOrLeft\n            ? newFocusedCell[primaryAxis] < focusCellRegion[primaryAxisPlural][0]\n            : newFocusedCell[primaryAxis] > focusCellRegion[primaryAxisPlural][1];\n        if (isPrimaryIndexOutOfBounds) {\n            // if we moved outside the bounds of selection region,\n            // move to the start (or end) of the primary axis, and move one along the secondary\n            newFocusedCell[primaryAxis] = focusCellRegion[primaryAxisPlural][regionIntervalIndex];\n            newFocusedCell[secondaryAxis] += movementDirection;\n            var isSecondaryIndexOutOfBounds = isUpOrLeft\n                ? newFocusedCell[secondaryAxis] < focusCellRegion[secondaryAxisPlural][0]\n                : newFocusedCell[secondaryAxis] > focusCellRegion[secondaryAxisPlural][1];\n            if (isSecondaryIndexOutOfBounds) {\n                // if moving along the secondary also moves us outside\n                // go to the start (or end) of the next (or previous region)\n                // (note that if there's only one region you'll be moving to the opposite corner, which is fine)\n                var newFocusCellSelectionIndex = newFocusedCell.focusSelectionIndex + movementDirection;\n                // newFocusCellSelectionIndex should be one more (or less), unless we need to wrap around\n                if (isUpOrLeft ? newFocusCellSelectionIndex < 0 : newFocusCellSelectionIndex >= selectedRegions.length) {\n                    newFocusCellSelectionIndex = isUpOrLeft ? selectedRegions.length - 1 : 0;\n                }\n                var newFocusCellRegion = Regions.getCellRegionFromRegion(selectedRegions[newFocusCellSelectionIndex], this.grid.numRows, this.grid.numCols);\n                newFocusedCell = {\n                    col: newFocusCellRegion.cols[regionIntervalIndex],\n                    focusSelectionIndex: newFocusCellSelectionIndex,\n                    row: newFocusCellRegion.rows[regionIntervalIndex],\n                };\n            }\n        }\n        return newFocusedCell;\n    };\n    Table.prototype.shouldDisableVerticalScroll = function () {\n        var enableGhostCells = this.props.enableGhostCells;\n        var viewportRect = this.state.viewportRect;\n        var rowIndices = this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n        var isViewportUnscrolledVertically = viewportRect != null && viewportRect.top === 0;\n        var areRowHeadersLoading = this.hasLoadingOption(this.props.loadingOptions, TableLoadingOption.ROW_HEADERS);\n        var areGhostRowsVisible = enableGhostCells && this.grid.isGhostIndex(rowIndices.rowIndexEnd, 0);\n        return areGhostRowsVisible && (isViewportUnscrolledVertically || areRowHeadersLoading);\n    };\n    Table.prototype.shouldDisableHorizontalScroll = function () {\n        var enableGhostCells = this.props.enableGhostCells;\n        var viewportRect = this.state.viewportRect;\n        var columnIndices = this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n        var isViewportUnscrolledHorizontally = viewportRect != null && viewportRect.left === 0;\n        var areGhostColumnsVisible = enableGhostCells && this.grid.isGhostIndex(0, columnIndices.columnIndexEnd);\n        var areColumnHeadersLoading = this.hasLoadingOption(this.props.loadingOptions, TableLoadingOption.COLUMN_HEADERS);\n        return areGhostColumnsVisible && (isViewportUnscrolledHorizontally || areColumnHeadersLoading);\n    };\n    Table.prototype.maybeScrollTableIntoView = function () {\n        var viewportRect = this.state.viewportRect;\n        var tableBottom = this.grid.getCumulativeHeightAt(this.grid.numRows - 1);\n        var tableRight = this.grid.getCumulativeWidthAt(this.grid.numCols - 1);\n        var nextScrollTop = tableBottom < viewportRect.top + viewportRect.height\n            ? // scroll the last row into view\n                Math.max(0, tableBottom - viewportRect.height)\n            : viewportRect.top;\n        var nextScrollLeft = tableRight < viewportRect.left + viewportRect.width\n            ? // scroll the last column into view\n                Math.max(0, tableRight - viewportRect.width)\n            : viewportRect.left;\n        this.syncViewportPosition(nextScrollLeft, nextScrollTop);\n    };\n    Table.prototype.getColumnProps = function (columnIndex) {\n        var column = this.childrenArray[columnIndex];\n        return column.props;\n    };\n    Table.prototype.isGuidesShowing = function () {\n        return this.state.verticalGuides != null || this.state.horizontalGuides != null;\n    };\n    Table.prototype.isSelectionModeEnabled = function (selectionMode, selectionModes) {\n        if (selectionModes === void 0) { selectionModes = this.props.selectionModes; }\n        var _a = this.props, children = _a.children, numRows = _a.numRows;\n        var numColumns = React.Children.count(children);\n        return selectionModes.indexOf(selectionMode) >= 0 && numRows > 0 && numColumns > 0;\n    };\n    Table.prototype.getEnabledSelectionHandler = function (selectionMode) {\n        if (!this.isSelectionModeEnabled(selectionMode)) {\n            // If the selection mode isn't enabled, return a callback that\n            // will clear the selection. For example, if row selection is\n            // disabled, clicking on the row header will clear the table's\n            // selection. If all selection modes are enabled, clicking on the\n            // same region twice will clear the selection.\n            return this.clearSelection;\n        }\n        else {\n            return this.handleSelection;\n        }\n    };\n    Table.prototype.invalidateGrid = function () {\n        this.grid = null;\n    };\n    Table.prototype.validateGrid = function () {\n        if (this.grid == null) {\n            var _a = this.props, defaultRowHeight = _a.defaultRowHeight, defaultColumnWidth = _a.defaultColumnWidth;\n            var _b = this.state, rowHeights = _b.rowHeights, columnWidths = _b.columnWidths;\n            this.grid = new Grid(rowHeights, columnWidths, Grid.DEFAULT_BLEED, defaultRowHeight, defaultColumnWidth);\n            this.invokeOnVisibleCellsChangeCallback(this.state.viewportRect);\n        }\n    };\n    /**\n     * Renders a `RegionLayer`, applying styles to the regions using the\n     * supplied `IRegionStyler`. `RegionLayer` is a `PureRender` component, so\n     * the `IRegionStyler` should be a new instance on every render if we\n     * intend to redraw the region layer.\n     */\n    Table.prototype.maybeRenderRegions = function (getRegionStyle, quadrantType) {\n        if (this.isGuidesShowing() && !this.state.isReordering) {\n            // we want to show guides *and* the selection styles when reordering rows or columns\n            return undefined;\n        }\n        var regionGroups = Regions.joinStyledRegionGroups(this.state.selectedRegions, this.props.styledRegionGroups, this.state.focusedCell);\n        return regionGroups.map(function (regionGroup, index) {\n            var regionStyles = regionGroup.regions.map(function (region) { return getRegionStyle(region, quadrantType); });\n            return (React.createElement(RegionLayer, { className: classNames(regionGroup.className), key: index, regions: regionGroup.regions, regionStyles: regionStyles }));\n        });\n    };\n    Table.prototype.syncViewportPosition = function (nextScrollLeft, nextScrollTop) {\n        var viewportRect = this.state.viewportRect;\n        var didScrollTopChange = nextScrollTop !== viewportRect.top;\n        var didScrollLeftChange = nextScrollLeft !== viewportRect.left;\n        if (didScrollTopChange || didScrollLeftChange) {\n            // we need to modify the scroll container explicitly for the viewport to shift. in so\n            // doing, we add the size of the header elements, which are not technically part of the\n            // \"grid\" concept (the grid only consists of body cells at present).\n            if (didScrollTopChange) {\n                var topCorrection = this.shouldDisableVerticalScroll() ? 0 : this.columnHeaderElement.clientHeight;\n                this.scrollContainerElement.scrollTop = nextScrollTop + topCorrection;\n            }\n            if (didScrollLeftChange) {\n                var leftCorrection = this.shouldDisableHorizontalScroll() || this.rowHeaderElement == null\n                    ? 0\n                    : this.rowHeaderElement.clientWidth;\n                this.scrollContainerElement.scrollLeft = nextScrollLeft + leftCorrection;\n            }\n            var nextViewportRect = new Rect(nextScrollLeft, nextScrollTop, viewportRect.width, viewportRect.height);\n            this.updateViewportRect(nextViewportRect);\n        }\n    };\n    Table.prototype.updateLocator = function () {\n        this.locator\n            .setGrid(this.grid)\n            .setNumFrozenRows(this.state.numFrozenRowsClamped)\n            .setNumFrozenColumns(this.state.numFrozenColumnsClamped);\n    };\n    Table.prototype.invokeOnVisibleCellsChangeCallback = function (viewportRect) {\n        var columnIndices = this.grid.getColumnIndicesInRect(viewportRect);\n        var rowIndices = this.grid.getRowIndicesInRect(viewportRect);\n        CoreUtils.safeInvoke(this.props.onVisibleCellsChange, rowIndices, columnIndices);\n    };\n    /**\n     * Normalizes RenderMode.BATCH_ON_UPDATE into RenderMode.{BATCH,NONE}. We do\n     * this because there are actually multiple updates required before the\n     * <Table> is considered fully \"mounted,\" and adding that knowledge to child\n     * components would lead to tight coupling. Thus, keep it simple for them.\n     */\n    Table.prototype.getNormalizedRenderMode = function () {\n        var renderMode = this.props.renderMode;\n        var shouldBatchRender = renderMode === RenderMode.BATCH || (renderMode === RenderMode.BATCH_ON_UPDATE && this.didCompletelyMount);\n        return shouldBatchRender ? RenderMode.BATCH : RenderMode.NONE;\n    };\n    /**\n     * Returns an object with option keys mapped to their resolved values\n     * (falling back to default values as necessary).\n     */\n    Table.prototype.resolveResizeRowsByApproximateHeightOptions = function (options, rowIndex, columnIndex) {\n        var optionKeys = Object.keys(Table_1.resizeRowsByApproximateHeightDefaults);\n        var optionReducer = function (agg, key) {\n            agg[key] =\n                options != null && options[key] != null\n                    ? CoreUtils.safeInvokeOrValue(options[key], rowIndex, columnIndex)\n                    : Table_1.resizeRowsByApproximateHeightDefaults[key];\n            return agg;\n        };\n        var resolvedOptions = optionKeys.reduce(optionReducer, {});\n        return resolvedOptions;\n    };\n    Table.defaultProps = {\n        defaultColumnWidth: 150,\n        defaultRowHeight: 20,\n        enableFocusedCell: false,\n        enableGhostCells: false,\n        enableMultipleSelection: true,\n        enableRowHeader: true,\n        loadingOptions: [],\n        minColumnWidth: 50,\n        minRowHeight: 20,\n        numFrozenColumns: 0,\n        numFrozenRows: 0,\n        numRows: 0,\n        renderMode: RenderMode.BATCH_ON_UPDATE,\n        rowHeaderCellRenderer: renderDefaultRowHeader,\n        selectionModes: SelectionModes.ALL,\n    };\n    Table.childContextTypes = columnInteractionBarContextTypes;\n    // these default values for `resizeRowsByApproximateHeight` have been\n    // fine-tuned to work well with default Table font styles.\n    Table.resizeRowsByApproximateHeightDefaults = {\n        getApproximateCharWidth: 8,\n        getApproximateLineHeight: 18,\n        getCellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n        getNumBufferLines: 1,\n    };\n    Table.SHALLOW_COMPARE_PROP_KEYS_BLACKLIST = [\n        \"selectedRegions\",\n    ];\n    Table.SHALLOW_COMPARE_STATE_KEYS_BLACKLIST = [\n        \"selectedRegions\",\n        \"viewportRect\",\n    ];\n    Table = Table_1 = tslib_1.__decorate([\n        HotkeysTarget\n    ], Table);\n    return Table;\n    var Table_1;\n}(AbstractComponent));\nexport { Table };\nfunction clampNumFrozenColumns(props) {\n    var numFrozenColumns = props.numFrozenColumns;\n    var numColumns = React.Children.count(props.children);\n    return clampPotentiallyNullValue(numFrozenColumns, numColumns);\n}\nfunction clampNumFrozenRows(props) {\n    var numFrozenRows = props.numFrozenRows, numRows = props.numRows;\n    return clampPotentiallyNullValue(numFrozenRows, numRows);\n}\n// add explicit `| null | undefined`, because the params make more sense in this\n// order, and you can't have an optional param precede a required param.\nfunction clampPotentiallyNullValue(value, max) {\n    return value == null ? 0 : Utils.clamp(value, 0, max);\n}\n","/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"./common/classes\";\nimport { ContextMenuTargetWrapper } from \"./common/contextMenuTargetWrapper\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { MenuContext } from \"./interactions/menus\";\nimport { DragSelectable } from \"./interactions/selectable\";\nimport { Regions } from \"./regions\";\nimport { cellClassNames, TableBodyCells } from \"./tableBodyCells\";\nvar DEEP_COMPARE_KEYS = [\"selectedRegions\"];\nvar TableBody = /** @class */ (function (_super) {\n    tslib_1.__extends(TableBody, _super);\n    function TableBody() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.renderContextMenu = function (e) {\n            var _a = _this.props, grid = _a.grid, onFocusedCell = _a.onFocusedCell, onSelection = _a.onSelection, bodyContextMenuRenderer = _a.bodyContextMenuRenderer, selectedRegions = _a.selectedRegions;\n            var numRows = grid.numRows, numCols = grid.numCols;\n            if (bodyContextMenuRenderer == null) {\n                return undefined;\n            }\n            var targetRegion = _this.locateClick(e.nativeEvent);\n            var nextSelectedRegions = selectedRegions;\n            // if the event did not happen within a selected region, clear all\n            // selections and select the right-clicked cell.\n            var foundIndex = Regions.findContainingRegion(selectedRegions, targetRegion);\n            if (foundIndex < 0) {\n                nextSelectedRegions = [targetRegion];\n                onSelection(nextSelectedRegions);\n                // move the focused cell to the new region.\n                var nextFocusedCell = tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(targetRegion), { focusSelectionIndex: 0 });\n                onFocusedCell(nextFocusedCell);\n            }\n            var menuContext = new MenuContext(targetRegion, nextSelectedRegions, numRows, numCols);\n            var contextMenu = bodyContextMenuRenderer(menuContext);\n            return contextMenu == null ? undefined : contextMenu;\n        };\n        // Callbacks\n        // =========\n        _this.handleSelectionEnd = function () {\n            _this.activationCell = null; // not strictly required, but good practice\n        };\n        _this.locateClick = function (event) {\n            _this.activationCell = _this.props.locator.convertPointToCell(event.clientX, event.clientY);\n            return Regions.cell(_this.activationCell.row, _this.activationCell.col);\n        };\n        _this.locateDrag = function (_event, coords, returnEndOnly) {\n            if (returnEndOnly === void 0) { returnEndOnly = false; }\n            var start = _this.activationCell;\n            var end = _this.props.locator.convertPointToCell(coords.current[0], coords.current[1]);\n            return returnEndOnly ? Regions.cell(end.row, end.col) : Regions.cell(start.row, start.col, end.row, end.col);\n        };\n        return _this;\n    }\n    // TODO: Does this method need to be public?\n    // (see: https://github.com/palantir/blueprint/issues/1617)\n    TableBody.cellClassNames = function (rowIndex, columnIndex) {\n        return cellClassNames(rowIndex, columnIndex);\n    };\n    TableBody.prototype.shouldComponentUpdate = function (nextProps) {\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: DEEP_COMPARE_KEYS }) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, DEEP_COMPARE_KEYS));\n    };\n    TableBody.prototype.render = function () {\n        var _a = this.props, grid = _a.grid, numFrozenColumns = _a.numFrozenColumns, numFrozenRows = _a.numFrozenRows;\n        var defaultStyle = grid.getRect().sizeStyle();\n        var style = {\n            height: numFrozenRows != null ? grid.getCumulativeHeightAt(numFrozenRows - 1) : defaultStyle.height,\n            width: numFrozenColumns != null ? grid.getCumulativeWidthAt(numFrozenColumns - 1) : defaultStyle.width,\n        };\n        return (React.createElement(DragSelectable, { enableMultipleSelection: this.props.enableMultipleSelection, focusedCell: this.props.focusedCell, locateClick: this.locateClick, locateDrag: this.locateDrag, onFocusedCell: this.props.onFocusedCell, onSelection: this.props.onSelection, onSelectionEnd: this.handleSelectionEnd, selectedRegions: this.props.selectedRegions, selectedRegionTransform: this.props.selectedRegionTransform },\n            React.createElement(ContextMenuTargetWrapper, { className: classNames(Classes.TABLE_BODY_VIRTUAL_CLIENT, Classes.TABLE_CELL_CLIENT), renderContextMenu: this.renderContextMenu, style: style },\n                React.createElement(TableBodyCells, { cellRenderer: this.props.cellRenderer, focusedCell: this.props.focusedCell, grid: grid, loading: this.props.loading, onCompleteRender: this.props.onCompleteRender, renderMode: this.props.renderMode, columnIndexStart: this.props.columnIndexStart, columnIndexEnd: this.props.columnIndexEnd, rowIndexStart: this.props.rowIndexStart, rowIndexEnd: this.props.rowIndexEnd, viewportRect: this.props.viewportRect }))));\n    };\n    TableBody.defaultProps = {\n        loading: false,\n        renderMode: RenderMode.BATCH,\n    };\n    return TableBody;\n}(React.Component));\nexport { TableBody };\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { emptyCellRenderer } from \"./cell/cell\";\nimport { Batcher } from \"./common/batcher\";\nimport * as Classes from \"./common/classes\";\nimport { Rect } from \"./common/rect\";\nimport { RenderMode } from \"./common/renderMode\";\nvar SHALLOW_COMPARE_BLACKLIST = [\"viewportRect\"];\n/**\n * We don't want to reset the batcher when this set of keys changes. Any other\n * changes should reset the batcher's internal cache.\n */\nvar BATCHER_RESET_PROP_KEYS_BLACKLIST = [\n    \"columnIndexEnd\",\n    \"columnIndexStart\",\n    \"rowIndexEnd\",\n    \"rowIndexStart\",\n];\nvar TableBodyCells = /** @class */ (function (_super) {\n    tslib_1.__extends(TableBodyCells, _super);\n    function TableBodyCells() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.batcher = new Batcher();\n        // Cell renderers\n        // ==============\n        _this.renderNewCell = function (rowIndex, columnIndex) {\n            var _a = _this.props, columnIndexEnd = _a.columnIndexEnd, grid = _a.grid, rowIndexEnd = _a.rowIndexEnd;\n            var extremaClasses = grid.getExtremaClasses(rowIndex, columnIndex, rowIndexEnd, columnIndexEnd);\n            var isGhost = grid.isGhostIndex(rowIndex, columnIndex);\n            return _this.renderCell(rowIndex, columnIndex, extremaClasses, isGhost);\n        };\n        _this.renderCell = function (rowIndex, columnIndex, extremaClasses, isGhost) {\n            var _a = _this.props, cellRenderer = _a.cellRenderer, focusedCell = _a.focusedCell, loading = _a.loading, grid = _a.grid;\n            var baseCell = isGhost ? emptyCellRenderer() : cellRenderer(rowIndex, columnIndex);\n            var className = classNames(cellClassNames(rowIndex, columnIndex), extremaClasses, (_b = {},\n                _b[Classes.TABLE_CELL_GHOST] = isGhost,\n                _b[Classes.TABLE_CELL_LEDGER_ODD] = rowIndex % 2 === 1,\n                _b[Classes.TABLE_CELL_LEDGER_EVEN] = rowIndex % 2 === 0,\n                _b), baseCell.props.className);\n            var key = TableBodyCells.cellReactKey(rowIndex, columnIndex);\n            var rect = isGhost ? grid.getGhostCellRect(rowIndex, columnIndex) : grid.getCellRect(rowIndex, columnIndex);\n            var cellLoading = baseCell.props.loading != null ? baseCell.props.loading : loading;\n            var style = tslib_1.__assign({}, baseCell.props.style, Rect.style(rect));\n            var isFocused = focusedCell != null && focusedCell.row === rowIndex && focusedCell.col === columnIndex;\n            return React.cloneElement(baseCell, { className: className, key: key, isFocused: isFocused, loading: cellLoading, style: style });\n            var _b;\n        };\n        // Other\n        // =====\n        _this.didViewportRectChange = function (nextViewportRect, currViewportRect) {\n            if (nextViewportRect == null && currViewportRect == null) {\n                return false;\n            }\n            else if (nextViewportRect == null || currViewportRect == null) {\n                return true;\n            }\n            else {\n                return !nextViewportRect.equals(currViewportRect);\n            }\n        };\n        return _this;\n    }\n    TableBodyCells.cellReactKey = function (rowIndex, columnIndex) {\n        return \"cell-\" + rowIndex + \"-\" + columnIndex;\n    };\n    TableBodyCells.prototype.componentDidMount = function () {\n        this.maybeInvokeOnCompleteRender();\n    };\n    TableBodyCells.prototype.shouldComponentUpdate = function (nextProps) {\n        return (!CoreUtils.shallowCompareKeys(nextProps, this.props, { exclude: SHALLOW_COMPARE_BLACKLIST }) ||\n            // \"viewportRect\" is not a plain object, so we can't just deep\n            // compare; we need custom logic.\n            this.didViewportRectChange(nextProps.viewportRect, this.props.viewportRect));\n    };\n    TableBodyCells.prototype.componentWillUpdate = function (nextProps) {\n        var resetKeysBlacklist = { exclude: BATCHER_RESET_PROP_KEYS_BLACKLIST };\n        var shouldResetBatcher = !CoreUtils.shallowCompareKeys(this.props, nextProps, resetKeysBlacklist);\n        if (shouldResetBatcher) {\n            this.batcher.reset();\n        }\n    };\n    TableBodyCells.prototype.componentDidUpdate = function () {\n        this.maybeInvokeOnCompleteRender();\n    };\n    TableBodyCells.prototype.componentWillUnmount = function () {\n        this.batcher.cancelOutstandingCallback();\n    };\n    TableBodyCells.prototype.render = function () {\n        var renderMode = this.props.renderMode;\n        var cells = renderMode === RenderMode.BATCH ? this.renderBatchedCells() : this.renderAllCells();\n        return React.createElement(\"div\", { className: \"pt-table-body-cells\" }, cells);\n    };\n    // Render modes\n    // ============\n    TableBodyCells.prototype.renderBatchedCells = function () {\n        var _this = this;\n        var _a = this.props, columnIndexEnd = _a.columnIndexEnd, columnIndexStart = _a.columnIndexStart, rowIndexEnd = _a.rowIndexEnd, rowIndexStart = _a.rowIndexStart;\n        // render cells in batches\n        this.batcher.startNewBatch();\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n                this.batcher.addArgsToBatch(rowIndex, columnIndex);\n            }\n        }\n        this.batcher.removeOldAddNew(this.renderNewCell);\n        if (!this.batcher.isDone()) {\n            this.batcher.idleCallback(function () { return _this.forceUpdate(); });\n        }\n        var cells = this.batcher.getList();\n        return cells;\n    };\n    TableBodyCells.prototype.renderAllCells = function () {\n        var _a = this.props, columnIndexEnd = _a.columnIndexEnd, columnIndexStart = _a.columnIndexStart, rowIndexEnd = _a.rowIndexEnd, rowIndexStart = _a.rowIndexStart;\n        var cells = [];\n        var cellsArgs = [];\n        for (var rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n                cells.push(this.renderNewCell(rowIndex, columnIndex));\n                cellsArgs.push([rowIndex, columnIndex]);\n            }\n        }\n        // pretend we did an entire rendering pass using the batcher. that way,\n        // if we switch from `RenderMode.NONE` to `RenderMode.BATCH`, we don't\n        // have to re-paint every cell still in view.\n        this.batcher.setList(cellsArgs, cells);\n        return cells;\n    };\n    // Callbacks\n    // =========\n    TableBodyCells.prototype.maybeInvokeOnCompleteRender = function () {\n        var _a = this.props, onCompleteRender = _a.onCompleteRender, renderMode = _a.renderMode;\n        if (renderMode === RenderMode.NONE || (renderMode === RenderMode.BATCH && this.batcher.isDone())) {\n            CoreUtils.safeInvoke(onCompleteRender);\n        }\n    };\n    TableBodyCells.defaultProps = {\n        renderMode: RenderMode.BATCH,\n    };\n    return TableBodyCells;\n}(React.Component));\nexport { TableBodyCells };\n/**\n * Returns the array of class names that must be applied to each table\n * cell so that we can locate any cell based on its coordinate.\n */\nexport function cellClassNames(rowIndex, columnIndex) {\n    return [Classes.rowCellIndexClass(rowIndex), Classes.columnCellIndexClass(columnIndex)];\n}\n","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|accept|acceptCharset|accessKey|action|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class)|(on[A-Z].*)|((data|aria)-.*))$/i;\nvar index = memoize(RegExp.prototype.test.bind(reactPropsRegex));\n\nexport default index;\n//# sourceMappingURL=is-prop-valid.esm.js.map\n","function memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n//# sourceMappingURL=memoize.esm.js.map\n","import PropTypes from 'prop-types';\nimport isPropValid from '@emotion/is-prop-valid';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar channel = '__EMOTION_THEMING__';\n\n// https://github.com/styled-components/styled-components/blob/e05b3fe247e9d956bcde786cec376e32afb85bca/src/utils/create-broadcast.js\n\nvar _contextTypes;\nvar contextTypes = (_contextTypes = {}, _contextTypes[channel] = PropTypes.object, _contextTypes);\n\nfunction setTheme(theme) {\n  this.setState({\n    theme: theme\n  });\n}\nvar testPickPropsOnStringTag = isPropValid;\nvar testPickPropsOnComponent = function testPickPropsOnComponent(key) {\n  return key !== 'theme' && key !== 'innerRef';\n};\nvar testAlwaysTrue = function testAlwaysTrue() {\n  return true;\n};\nvar pickAssign = function pickAssign(testFn, target) {\n  var i = 2;\n  var length = arguments.length;\n\n  for (; i < length; i++) {\n    var source = arguments[i];\n\n    var _key = void 0;\n\n    for (_key in source) {\n      if (testFn(_key)) {\n        target[_key] = source[_key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction createEmotionStyled(emotion, view) {\n  var _createStyled = function createStyled(tag, options) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (tag === undefined) {\n        throw new Error('You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.');\n      }\n    }\n\n    var staticClassName;\n    var identifierName;\n    var stableClassName;\n    var shouldForwardProp;\n\n    if (options !== undefined) {\n      staticClassName = options.e;\n      identifierName = options.label;\n      stableClassName = options.target;\n      shouldForwardProp = tag.__emotion_forwardProp && options.shouldForwardProp ? function (propName) {\n        return tag.__emotion_forwardProp(propName) && // $FlowFixMe\n        options.shouldForwardProp(propName);\n      } : options.shouldForwardProp;\n    }\n\n    var isReal = tag.__emotion_real === tag;\n    var baseTag = staticClassName === undefined ? isReal && tag.__emotion_base || tag : tag;\n\n    if (typeof shouldForwardProp !== 'function') {\n      shouldForwardProp = typeof baseTag === 'string' && baseTag.charAt(0) === baseTag.charAt(0).toLowerCase() ? testPickPropsOnStringTag : testPickPropsOnComponent;\n    }\n\n    return function () {\n      var args = arguments;\n      var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];\n\n      if (identifierName !== undefined) {\n        styles.push(\"label:\" + identifierName + \";\");\n      }\n\n      if (staticClassName === undefined) {\n        if (args[0] == null || args[0].raw === undefined) {\n          styles.push.apply(styles, args);\n        } else {\n          styles.push(args[0][0]);\n          var len = args.length;\n          var i = 1;\n\n          for (; i < len; i++) {\n            styles.push(args[i], args[0][i]);\n          }\n        }\n      }\n\n      var Styled =\n      /*#__PURE__*/\n      function (_view$Component) {\n        _inheritsLoose(Styled, _view$Component);\n\n        function Styled() {\n          return _view$Component.apply(this, arguments) || this;\n        }\n\n        var _proto = Styled.prototype;\n\n        _proto.componentWillMount = function componentWillMount() {\n          if (this.context[channel] !== undefined) {\n            this.unsubscribe = this.context[channel].subscribe(setTheme.bind(this));\n          }\n        };\n\n        _proto.componentWillUnmount = function componentWillUnmount() {\n          if (this.unsubscribe !== undefined) {\n            this.context[channel].unsubscribe(this.unsubscribe);\n          }\n        };\n\n        _proto.render = function render() {\n          var props = this.props,\n              state = this.state;\n          this.mergedProps = pickAssign(testAlwaysTrue, {}, props, {\n            theme: state !== null && state.theme || props.theme || {}\n          });\n          var className = '';\n          var classInterpolations = [];\n\n          if (props.className) {\n            if (staticClassName === undefined) {\n              className += emotion.getRegisteredStyles(classInterpolations, props.className);\n            } else {\n              className += props.className + \" \";\n            }\n          }\n\n          if (staticClassName === undefined) {\n            className += emotion.css.apply(this, styles.concat(classInterpolations));\n          } else {\n            className += staticClassName;\n          }\n\n          if (stableClassName !== undefined) {\n            className += \" \" + stableClassName;\n          }\n\n          return view.createElement(baseTag, // $FlowFixMe\n          pickAssign(shouldForwardProp, {}, props, {\n            className: className,\n            ref: props.innerRef\n          }));\n        };\n\n        return Styled;\n      }(view.Component);\n\n      Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + \")\";\n\n      if (tag.defaultProps !== undefined) {\n        // $FlowFixMe\n        Styled.defaultProps = tag.defaultProps;\n      }\n\n      Styled.contextTypes = contextTypes;\n      Styled.__emotion_styles = styles;\n      Styled.__emotion_base = baseTag;\n      Styled.__emotion_real = Styled;\n      Styled.__emotion_forwardProp = shouldForwardProp;\n      Object.defineProperty(Styled, 'toString', {\n        enumerable: false,\n        value: function value() {\n          if (process.env.NODE_ENV !== 'production' && stableClassName === undefined) {\n            return 'NO_COMPONENT_SELECTOR';\n          } // $FlowFixMe\n\n\n          return \".\" + stableClassName;\n        }\n      });\n\n      Styled.withComponent = function (nextTag, nextOptions) {\n        return _createStyled(nextTag, nextOptions !== undefined ? // $FlowFixMe\n        pickAssign(testAlwaysTrue, {}, options, nextOptions) : options).apply(void 0, styles);\n      };\n\n      return Styled;\n    };\n  };\n\n  if (process.env.NODE_ENV !== 'production' && typeof Proxy !== 'undefined') {\n    _createStyled = new Proxy(_createStyled, {\n      get: function get(target, property) {\n        switch (property) {\n          // react-hot-loader tries to access this stuff\n          case '__proto__':\n          case 'name':\n          case 'prototype':\n          case 'displayName':\n            {\n              return target[property];\n            }\n\n          default:\n            {\n              throw new Error(\"You're trying to use the styled shorthand without babel-plugin-emotion.\" + (\"\\nPlease install and setup babel-plugin-emotion or use the function call syntax(`styled('\" + property + \"')` instead of `styled.\" + property + \"`)\"));\n            }\n        }\n      }\n    });\n  }\n\n  return _createStyled;\n}\n\nexport default createEmotionStyled;\n//# sourceMappingURL=index.esm.js.map\n","import React from 'react';\nimport * as emotion from 'emotion';\nexport * from 'emotion';\nimport createEmotionStyled from 'create-emotion-styled';\n\nvar index = createEmotionStyled(emotion, React);\n\nexport default index;\n//# sourceMappingURL=index.esm.js.map\n"],"sourceRoot":""}