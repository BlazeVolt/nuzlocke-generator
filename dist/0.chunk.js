(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"./node_modules/@emmaramirez/dom-to-image/dist/dom-to-image.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@emmaramirez/dom-to-image/dist/dom-to-image.js ***!
  \*********************************************************************/
/*! exports provided: domToImage */function(e,t,n){"use strict";n.r(t),n.d(t,"domToImage",(function(){return a}));var r=function(){return{escape:function(e){return e.replace(/([.*+?^${}()|\[\]\/\\])/g,"\\$1")},parseExtension:t,mimeType:function(e){var n=t(e).toLowerCase();return(r="application/font-woff",{woff:r,woff2:r,ttf:"application/font-truetype",eot:"application/vnd.ms-fontobject",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",tiff:"image/tiff",svg:"image/svg+xml"})[n]||"";var r},dataAsUrl:function(e,t){return"data:"+t+";base64,"+e},isDataUrl:function(e){return-1!==e.search(/^(data:)/)},canvasToBlob:function(e){return e.toBlob?new Promise((function(t){e.toBlob(t)})):function(e){return new Promise((function(t){for(var n=window.atob(e.toDataURL().split(",")[1]),r=n.length,o=new Uint8Array(r),i=0;i<r;i++)o[i]=n.charCodeAt(i);t(new Blob([o],{type:"image/png"}))}))}(e)},resolveUrl:function(e,t){var n=document.implementation.createHTMLDocument(),r=n.createElement("base");n.head.appendChild(r);var o=n.createElement("a");return n.body.appendChild(o),r.href=t,o.href=e,o.href},getAndEncode:function(e){a.impl.options.cacheBust&&(e+=(/\?/.test(e)?"&":"?")+(new Date).getTime());return new Promise((function(t){var n,r=new XMLHttpRequest;if(r.onreadystatechange=function(){if(4!==r.readyState)return;if(r.status>=400)return void(n?t(n):f("cannot fetch resource: "+e+", status: "+r.status));var o=new FileReader;o.onloadend=function(){var e=o.result.split(/,/)[1];t(e)},o.readAsDataURL(r.response)},r.ontimeout=function(){n?t(n):f("timeout of 30000ms occured while fetching resource: "+e)},r.responseType="blob",r.timeout=3e4,0===e.indexOf("http")&&-1===e.indexOf(window.location.origin)&&a.impl.options.corsImg){var o=a.impl.options.corsImg.method||"GET";o="POST"===o.toUpperCase(o)?"POST":"GET";var i=a.impl.options.corsImg.url||"";i=i.replace("#{cors}",e);var u=a.impl.options.corsImg.data||"";try{u=JSON.parse(JSON.stringify(u))}catch(e){return void f("corsImg.data is not available")}Object.keys(u).forEach((function(t){"string"==typeof u[t]&&(u[t]=u[t].replace("#{cors}",e))})),r.open(o,i,!0);var c=!1,s=a.impl.options.corsImg.headers||{};Object.keys(s).forEach((function(e){-1!==s[e].indexOf("application/json")&&(c=!0),r.setRequestHeader(e,s[e])})),r.send(c?JSON.stringify(u):u)}else r.open("GET",e,!0),r.send();if(a.impl.options.imagePlaceholder){var l=a.impl.options.imagePlaceholder.split(/,/);l&&l[1]&&(n=l[1])}function f(e){console.error(e),t("")}}))},uid:(e=0,function(){return"u"+("0000"+(Math.random()*Math.pow(36,4)<<0).toString(36)).slice(-4)+e++}),delay:function(e){return function(t){return new Promise((function(n){setTimeout((function(){n(t)}),e)}))}},asArray:function(e){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t},escapeXhtml:function(e){return e.replace(/#/g,"%23").replace(/\n/g,"%0A")},makeImage:function(e){return new Promise((function(t,n){var r=new Image;r.onload=function(){t(r)},r.onerror=n,r.src=e}))},width:function(e){var t=n(e,"border-left-width"),r=n(e,"border-right-width");return e.scrollWidth+t+r},height:function(e){var t=n(e,"border-top-width"),r=n(e,"border-bottom-width");return e.scrollHeight+t+r}};var e;function t(e){var t=/\.([^\.\/]*?)$/g.exec(e);return t?t[1]:""}function n(e,t){var n=window.getComputedStyle(e).getPropertyValue(t);return parseFloat(n.replace("px",""))}}(),o=function(){var e=/url\(['"]?([^'"]+?)['"]?\)/g;return{inlineAll:function(e,r,i){return function(){return!t(e)}()?Promise.resolve(e):Promise.resolve(e).then(n).then((function(t){var n=Promise.resolve(e);return t.forEach((function(e){n=n.then((function(t){return o(t,e,r,i)}))})),n}))},shouldProcess:t,impl:{readUrls:n,inline:o}};function t(t){return-1!==t.search(e)}function n(t){for(var n,o=[];null!==(n=e.exec(t));)o.push(n[1]);return o.filter((function(e){return!r.isDataUrl(e)}))}function o(e,t,n,o){return Promise.resolve(t).then((function(e){return n?r.resolveUrl(e,n):e})).then(o||r.getAndEncode).then((function(e){return r.dataAsUrl(e,r.mimeType(t))})).then((function(n){return e.replace(function(e){return new RegExp("(url\\(['\"]?)("+r.escape(e)+")(['\"]?\\))","g")}(t),"$1"+n+"$3")}))}}(),i=function(){return{resolveAll:function(){return e(document).then((function(e){return Promise.all(e.map((function(e){return e.resolve()})))})).then((function(e){return e.join("\n")}))},impl:{readAll:e}};function e(){return Promise.resolve(r.asArray(document.styleSheets)).then((function(e){var t=[];return e.forEach((function(e){try{r.asArray(e.cssRules||[]).forEach(t.push.bind(t))}catch(t){console.log("Error while reading CSS rules from "+e.href,t.toString())}})),t})).then((function(e){return e.filter((function(e){return e.type===CSSRule.FONT_FACE_RULE})).filter((function(e){return o.shouldProcess(e.style.getPropertyValue("src"))}))})).then((function(t){return t.map(e)}));function e(e){return{resolve:function(){var t=(e.parentStyleSheet||{}).href;return o.inlineAll(e.cssText,t)},src:function(){return e.style.getPropertyValue("src")}}}}}(),u=function(){return{inlineAll:function t(n){return n instanceof Element?function(e){var t=e.style.getPropertyValue("background");return t?o.inlineAll(t).then((function(t){e.style.setProperty("background",t,e.style.getPropertyPriority("background"))})).then((function(){return e})):Promise.resolve(e)}(n).then((function(){return n instanceof HTMLImageElement?e(n).inline():Promise.all(r.asArray(n.childNodes).map((function(e){return t(e)})))})):Promise.resolve(n)},impl:{newImage:e}};function e(e){return{inline:function(t){return r.isDataUrl(e.src)?Promise.resolve():Promise.resolve(e.src).then(t||r.getAndEncode).then((function(t){return r.dataAsUrl(t,r.mimeType(e.src))})).then((function(t){return new Promise((function(n,r){e.onload=n,e.onerror=r,e.src=t}))}))}}}}(),c={imagePlaceholder:void 0,cacheBust:!1,corsImg:void 0},a={toSvg:s,toPng:function(e,t){return l(e,t||{}).then((function(e){return e.toDataURL()}))},toJpeg:function(e,t){return l(e,t=t||{}).then((function(e){return e.toDataURL("image/jpeg",t.quality||1)}))},toBlob:function(e,t){return l(e,t||{}).then(r.canvasToBlob)},toPixelData:function(e,t){return l(e,t||{}).then((function(t){return t.getContext("2d").getImageData(0,0,r.width(e),r.height(e)).data}))},impl:{fontFaces:i,images:u,util:r,inliner:o,options:{}}};function s(e,t){return function(e){void 0===e.imagePlaceholder?a.impl.options.imagePlaceholder=c.imagePlaceholder:a.impl.options.imagePlaceholder=e.imagePlaceholder;void 0===e.cacheBust?a.impl.options.cacheBust=c.cacheBust:a.impl.options.cacheBust=e.cacheBust;void 0===e.corsImg?a.impl.options.corsImg=c.corsImg:a.impl.options.corsImg=e.corsImg}(t=t||{}),Promise.resolve(e).then((function(e){return function e(t,n,o){return o||!n||n(t)?Promise.resolve(t).then((function(e){return e instanceof HTMLCanvasElement?r.makeImage(e.toDataURL()):e.cloneNode(!1)})).then((function(e){return i(t,e,n)})).then((function(e){return function(e,t){return t instanceof Element?Promise.resolve().then(n).then(o).then(i).then(u).then((function(){return t})):t;function n(){!function(e,t){e.cssText?t.cssText=e.cssText:function(e,t){r.asArray(e).forEach((function(n){t.setProperty(n,e.getPropertyValue(n),e.getPropertyPriority(n))}))}(e,t);t.fontStretch="normal"}(window.getComputedStyle(e),t.style)}function o(){[":before",":after"].forEach((function(n){!function(n){var o=window.getComputedStyle(e,n),i=o.getPropertyValue("content");if(""===i||"none"===i)return;var u=r.uid();t.className=t.className+" "+u;var c=document.createElement("style");c.appendChild(function(e,t,n){var o="."+e+":"+t,i=n.cssText?function(e){var t=e.getPropertyValue("content");return e.cssText+" content: "+t+";"}(n):function(e){return r.asArray(e).map((function(t){return t+": "+e.getPropertyValue(t)+(e.getPropertyPriority(t)?" !important":"")})).join("; ")+";"}(n);return document.createTextNode(o+"{"+i+"}")}(u,n,o)),t.appendChild(c)}(n)}))}function i(){e instanceof HTMLTextAreaElement&&(t.innerHTML=e.value),e instanceof HTMLInputElement&&t.setAttribute("value",e.value)}function u(){t instanceof SVGElement&&(t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t instanceof SVGRectElement&&["width","height"].forEach((function(e){var n=t.getAttribute(e);n&&t.style.setProperty(e,n)})))}}(t,e)})):Promise.resolve();function i(t,n,o){var i=t.childNodes;return 0===i.length?Promise.resolve(n):u(n,r.asArray(i),o).then((function(){return n}));function u(t,n,r){var o=Promise.resolve();return n.forEach((function(n){o=o.then((function(){return e(n,r)})).then((function(e){e&&t.appendChild(e)}))})),o}}}(e,t.filter,!0)})).then(f).then(h).then((function(e){t.bgcolor&&(e.style.backgroundColor=t.bgcolor);t.width&&(e.style.width=t.width+"px");t.height&&(e.style.height=t.height+"px");t.style&&Object.keys(t.style).forEach((function(n){e.style[n]=t.style[n]}));return e})).then((function(n){return function(e,t,n){return Promise.resolve(e).then((function(e){return e.setAttribute("xmlns","http://www.w3.org/1999/xhtml"),(new XMLSerializer).serializeToString(e)})).then(r.escapeXhtml).then((function(e){return'<foreignObject x="0" y="0" width="100%" height="100%">'+e+"</foreignObject>"})).then((function(e){return'<svg xmlns="http://www.w3.org/2000/svg" width="'+t+'" height="'+n+'">'+e+"</svg>"})).then((function(e){return"data:image/svg+xml;charset=utf-8,"+e}))}(n,t.width||r.width(e),t.height||r.height(e))}))}function l(e,t){return s(e,t).then(r.makeImage).then(r.delay(100)).then((function(n){var o=function(e){var n=document.createElement("canvas");if(n.width=t.width||r.width(e),n.height=t.height||r.height(e),t.bgcolor){var o=n.getContext("2d");o.fillStyle=t.bgcolor,o.fillRect(0,0,n.width,n.height)}return n}(e);return o.getContext("2d").drawImage(n,0,0),o}))}function f(e){return i.resolveAll().then((function(t){var n=document.createElement("style");return e.appendChild(n),n.appendChild(document.createTextNode(t)),e}))}function h(e){return u.inlineAll(e).then((function(){return e}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,